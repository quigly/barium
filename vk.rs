macro_rules! non_dispatchable_handle
{
	($name:ident) =>
	{
		#[derive(Eq, PartialEq, Ord, PartialOrd, Clone, Copy, Hash, Default)]
		pub struct $name(pub u64);
	}
}

macro_rules! dispatchable_handle
{
	($name:ident) =>
	{
		#[derive(Eq, PartialEq, Ord, PartialOrd, Clone, Copy, Hash, Default)]
		pub struct $name(pub *mut ());
	}
}

pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE: u32 = 256;
pub const VK_UUID_SIZE: u32 = 16;
pub const VK_LUID_SIZE: u32 = 8;
pub const VK_MAX_EXTENSION_NAME_SIZE: u32 = 256;
pub const VK_MAX_DESCRIPTION_SIZE: u32 = 256;
pub const VK_MAX_MEMORY_TYPES: u32 = 32;
pub const VK_MAX_MEMORY_HEAPS: u32 = 16;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkImageLayout
{
	/* Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation) */
	VK_IMAGE_LAYOUT_UNDEFINED = 0,
	/* General layout when image can be used for any kind of access */
	VK_IMAGE_LAYOUT_GENERAL = 1,
	/* Optimal layout when image is only used for color attachment read/write */
	VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL = 2,
	/* Optimal layout when image is only used for depth/stencil attachment read/write */
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3,
	/* Optimal layout when image is used for read only depth/stencil attachment and shader access */
	VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL = 4,
	/* Optimal layout when image is used for read only shader access */
	VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL = 5,
	/* Optimal layout when image is used only as source of transfer operations */
	VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL = 6,
	/* Optimal layout when image is used only as destination of transfer operations */
	VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL = 7,
	/* Initial layout used when the data is populated by the CPU */
	VK_IMAGE_LAYOUT_PREINITIALIZED = 8
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkAttachmentLoadOp
{
	VK_ATTACHMENT_LOAD_OP_LOAD = 0,
	VK_ATTACHMENT_LOAD_OP_CLEAR = 1,
	VK_ATTACHMENT_LOAD_OP_DONT_CARE = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkAttachmentStoreOp
{
	VK_ATTACHMENT_STORE_OP_STORE = 0,
	VK_ATTACHMENT_STORE_OP_DONT_CARE = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkImageType
{
	VK_IMAGE_TYPE_1D = 0,
	VK_IMAGE_TYPE_2D = 1,
	VK_IMAGE_TYPE_3D = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkImageTiling
{
	VK_IMAGE_TILING_OPTIMAL = 0,
	VK_IMAGE_TILING_LINEAR = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkImageViewType
{
	VK_IMAGE_VIEW_TYPE_1D = 0,
	VK_IMAGE_VIEW_TYPE_2D = 1,
	VK_IMAGE_VIEW_TYPE_3D = 2,
	VK_IMAGE_VIEW_TYPE_CUBE = 3,
	VK_IMAGE_VIEW_TYPE_1D_ARRAY = 4,
	VK_IMAGE_VIEW_TYPE_2D_ARRAY = 5,
	VK_IMAGE_VIEW_TYPE_CUBE_ARRAY = 6
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkCommandBufferLevel
{
	VK_COMMAND_BUFFER_LEVEL_PRIMARY = 0,
	VK_COMMAND_BUFFER_LEVEL_SECONDARY = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkComponentSwizzle
{
	VK_COMPONENT_SWIZZLE_IDENTITY = 0,
	VK_COMPONENT_SWIZZLE_ZERO = 1,
	VK_COMPONENT_SWIZZLE_ONE = 2,
	VK_COMPONENT_SWIZZLE_R = 3,
	VK_COMPONENT_SWIZZLE_G = 4,
	VK_COMPONENT_SWIZZLE_B = 5,
	VK_COMPONENT_SWIZZLE_A = 6
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDescriptorType
{
	VK_DESCRIPTOR_TYPE_SAMPLER = 0,
	VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER = 1,
	VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE = 2,
	VK_DESCRIPTOR_TYPE_STORAGE_IMAGE = 3,
	VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER = 4,
	VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER = 5,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER = 6,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER = 7,
	VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC = 8,
	VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC = 9,
	VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT = 10
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkQueryType
{
	VK_QUERY_TYPE_OCCLUSION = 0,
	/* Optional */
	VK_QUERY_TYPE_PIPELINE_STATISTICS = 1,
	VK_QUERY_TYPE_TIMESTAMP = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkBorderColor
{
	VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK = 0,
	VK_BORDER_COLOR_INT_TRANSPARENT_BLACK = 1,
	VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK = 2,
	VK_BORDER_COLOR_INT_OPAQUE_BLACK = 3,
	VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE = 4,
	VK_BORDER_COLOR_INT_OPAQUE_WHITE = 5
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPipelineBindPoint
{
	VK_PIPELINE_BIND_POINT_GRAPHICS = 0,
	VK_PIPELINE_BIND_POINT_COMPUTE = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPipelineCacheHeaderVersion
{
	VK_PIPELINE_CACHE_HEADER_VERSION_ONE = 1
}

pub type VkPipelineCacheCreateFlagBits = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPrimitiveTopology
{
	VK_PRIMITIVE_TOPOLOGY_POINT_LIST = 0,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST = 1,
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP = 2,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST = 3,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP = 4,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN = 5,
	VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY = 6,
	VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY = 7,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY = 8,
	VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY = 9,
	VK_PRIMITIVE_TOPOLOGY_PATCH_LIST = 10
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkSharingMode
{
	VK_SHARING_MODE_EXCLUSIVE = 0,
	VK_SHARING_MODE_CONCURRENT = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkIndexType
{
	VK_INDEX_TYPE_UINT16 = 0,
	VK_INDEX_TYPE_UINT32 = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkFilter
{
	VK_FILTER_NEAREST = 0,
	VK_FILTER_LINEAR = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkSamplerMipmapMode
{
	/* Choose nearest mip level */
	VK_SAMPLER_MIPMAP_MODE_NEAREST = 0,
	/* Linear filter between mip levels */
	VK_SAMPLER_MIPMAP_MODE_LINEAR = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkSamplerAddressMode
{
	VK_SAMPLER_ADDRESS_MODE_REPEAT = 0,
	VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT = 1,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE = 2,
	VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER = 3
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkCompareOp
{
	VK_COMPARE_OP_NEVER = 0,
	VK_COMPARE_OP_LESS = 1,
	VK_COMPARE_OP_EQUAL = 2,
	VK_COMPARE_OP_LESS_OR_EQUAL = 3,
	VK_COMPARE_OP_GREATER = 4,
	VK_COMPARE_OP_NOT_EQUAL = 5,
	VK_COMPARE_OP_GREATER_OR_EQUAL = 6,
	VK_COMPARE_OP_ALWAYS = 7
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPolygonMode
{
	VK_POLYGON_MODE_FILL = 0,
	VK_POLYGON_MODE_LINE = 1,
	VK_POLYGON_MODE_POINT = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkFrontFace
{
	VK_FRONT_FACE_COUNTER_CLOCKWISE = 0,
	VK_FRONT_FACE_CLOCKWISE = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkBlendFactor
{
	VK_BLEND_FACTOR_ZERO = 0,
	VK_BLEND_FACTOR_ONE = 1,
	VK_BLEND_FACTOR_SRC_COLOR = 2,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR = 3,
	VK_BLEND_FACTOR_DST_COLOR = 4,
	VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR = 5,
	VK_BLEND_FACTOR_SRC_ALPHA = 6,
	VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA = 7,
	VK_BLEND_FACTOR_DST_ALPHA = 8,
	VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA = 9,
	VK_BLEND_FACTOR_CONSTANT_COLOR = 10,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR = 11,
	VK_BLEND_FACTOR_CONSTANT_ALPHA = 12,
	VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA = 13,
	VK_BLEND_FACTOR_SRC_ALPHA_SATURATE = 14,
	VK_BLEND_FACTOR_SRC1_COLOR = 15,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR = 16,
	VK_BLEND_FACTOR_SRC1_ALPHA = 17,
	VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA = 18
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkBlendOp
{
	VK_BLEND_OP_ADD = 0,
	VK_BLEND_OP_SUBTRACT = 1,
	VK_BLEND_OP_REVERSE_SUBTRACT = 2,
	VK_BLEND_OP_MIN = 3,
	VK_BLEND_OP_MAX = 4
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkStencilOp
{
	VK_STENCIL_OP_KEEP = 0,
	VK_STENCIL_OP_ZERO = 1,
	VK_STENCIL_OP_REPLACE = 2,
	VK_STENCIL_OP_INCREMENT_AND_CLAMP = 3,
	VK_STENCIL_OP_DECREMENT_AND_CLAMP = 4,
	VK_STENCIL_OP_INVERT = 5,
	VK_STENCIL_OP_INCREMENT_AND_WRAP = 6,
	VK_STENCIL_OP_DECREMENT_AND_WRAP = 7
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkLogicOp
{
	VK_LOGIC_OP_CLEAR = 0,
	VK_LOGIC_OP_AND = 1,
	VK_LOGIC_OP_AND_REVERSE = 2,
	VK_LOGIC_OP_COPY = 3,
	VK_LOGIC_OP_AND_INVERTED = 4,
	VK_LOGIC_OP_NO_OP = 5,
	VK_LOGIC_OP_XOR = 6,
	VK_LOGIC_OP_OR = 7,
	VK_LOGIC_OP_NOR = 8,
	VK_LOGIC_OP_EQUIVALENT = 9,
	VK_LOGIC_OP_INVERT = 10,
	VK_LOGIC_OP_OR_REVERSE = 11,
	VK_LOGIC_OP_COPY_INVERTED = 12,
	VK_LOGIC_OP_OR_INVERTED = 13,
	VK_LOGIC_OP_NAND = 14,
	VK_LOGIC_OP_SET = 15
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkInternalAllocationType
{
	VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE = 0
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkSystemAllocationScope
{
	VK_SYSTEM_ALLOCATION_SCOPE_COMMAND = 0,
	VK_SYSTEM_ALLOCATION_SCOPE_OBJECT = 1,
	VK_SYSTEM_ALLOCATION_SCOPE_CACHE = 2,
	VK_SYSTEM_ALLOCATION_SCOPE_DEVICE = 3,
	VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE = 4
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPhysicalDeviceType
{
	VK_PHYSICAL_DEVICE_TYPE_OTHER = 0,
	VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU = 1,
	VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU = 2,
	VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU = 3,
	VK_PHYSICAL_DEVICE_TYPE_CPU = 4
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkVertexInputRate
{
	VK_VERTEX_INPUT_RATE_VERTEX = 0,
	VK_VERTEX_INPUT_RATE_INSTANCE = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkFormat
{
	VK_FORMAT_UNDEFINED = 0,
	VK_FORMAT_R4G4_UNORM_PACK8 = 1,
	VK_FORMAT_R4G4B4A4_UNORM_PACK16 = 2,
	VK_FORMAT_B4G4R4A4_UNORM_PACK16 = 3,
	VK_FORMAT_R5G6B5_UNORM_PACK16 = 4,
	VK_FORMAT_B5G6R5_UNORM_PACK16 = 5,
	VK_FORMAT_R5G5B5A1_UNORM_PACK16 = 6,
	VK_FORMAT_B5G5R5A1_UNORM_PACK16 = 7,
	VK_FORMAT_A1R5G5B5_UNORM_PACK16 = 8,
	VK_FORMAT_R8_UNORM = 9,
	VK_FORMAT_R8_SNORM = 10,
	VK_FORMAT_R8_USCALED = 11,
	VK_FORMAT_R8_SSCALED = 12,
	VK_FORMAT_R8_UINT = 13,
	VK_FORMAT_R8_SINT = 14,
	VK_FORMAT_R8_SRGB = 15,
	VK_FORMAT_R8G8_UNORM = 16,
	VK_FORMAT_R8G8_SNORM = 17,
	VK_FORMAT_R8G8_USCALED = 18,
	VK_FORMAT_R8G8_SSCALED = 19,
	VK_FORMAT_R8G8_UINT = 20,
	VK_FORMAT_R8G8_SINT = 21,
	VK_FORMAT_R8G8_SRGB = 22,
	VK_FORMAT_R8G8B8_UNORM = 23,
	VK_FORMAT_R8G8B8_SNORM = 24,
	VK_FORMAT_R8G8B8_USCALED = 25,
	VK_FORMAT_R8G8B8_SSCALED = 26,
	VK_FORMAT_R8G8B8_UINT = 27,
	VK_FORMAT_R8G8B8_SINT = 28,
	VK_FORMAT_R8G8B8_SRGB = 29,
	VK_FORMAT_B8G8R8_UNORM = 30,
	VK_FORMAT_B8G8R8_SNORM = 31,
	VK_FORMAT_B8G8R8_USCALED = 32,
	VK_FORMAT_B8G8R8_SSCALED = 33,
	VK_FORMAT_B8G8R8_UINT = 34,
	VK_FORMAT_B8G8R8_SINT = 35,
	VK_FORMAT_B8G8R8_SRGB = 36,
	VK_FORMAT_R8G8B8A8_UNORM = 37,
	VK_FORMAT_R8G8B8A8_SNORM = 38,
	VK_FORMAT_R8G8B8A8_USCALED = 39,
	VK_FORMAT_R8G8B8A8_SSCALED = 40,
	VK_FORMAT_R8G8B8A8_UINT = 41,
	VK_FORMAT_R8G8B8A8_SINT = 42,
	VK_FORMAT_R8G8B8A8_SRGB = 43,
	VK_FORMAT_B8G8R8A8_UNORM = 44,
	VK_FORMAT_B8G8R8A8_SNORM = 45,
	VK_FORMAT_B8G8R8A8_USCALED = 46,
	VK_FORMAT_B8G8R8A8_SSCALED = 47,
	VK_FORMAT_B8G8R8A8_UINT = 48,
	VK_FORMAT_B8G8R8A8_SINT = 49,
	VK_FORMAT_B8G8R8A8_SRGB = 50,
	VK_FORMAT_A8B8G8R8_UNORM_PACK32 = 51,
	VK_FORMAT_A8B8G8R8_SNORM_PACK32 = 52,
	VK_FORMAT_A8B8G8R8_USCALED_PACK32 = 53,
	VK_FORMAT_A8B8G8R8_SSCALED_PACK32 = 54,
	VK_FORMAT_A8B8G8R8_UINT_PACK32 = 55,
	VK_FORMAT_A8B8G8R8_SINT_PACK32 = 56,
	VK_FORMAT_A8B8G8R8_SRGB_PACK32 = 57,
	VK_FORMAT_A2R10G10B10_UNORM_PACK32 = 58,
	VK_FORMAT_A2R10G10B10_SNORM_PACK32 = 59,
	VK_FORMAT_A2R10G10B10_USCALED_PACK32 = 60,
	VK_FORMAT_A2R10G10B10_SSCALED_PACK32 = 61,
	VK_FORMAT_A2R10G10B10_UINT_PACK32 = 62,
	VK_FORMAT_A2R10G10B10_SINT_PACK32 = 63,
	VK_FORMAT_A2B10G10R10_UNORM_PACK32 = 64,
	VK_FORMAT_A2B10G10R10_SNORM_PACK32 = 65,
	VK_FORMAT_A2B10G10R10_USCALED_PACK32 = 66,
	VK_FORMAT_A2B10G10R10_SSCALED_PACK32 = 67,
	VK_FORMAT_A2B10G10R10_UINT_PACK32 = 68,
	VK_FORMAT_A2B10G10R10_SINT_PACK32 = 69,
	VK_FORMAT_R16_UNORM = 70,
	VK_FORMAT_R16_SNORM = 71,
	VK_FORMAT_R16_USCALED = 72,
	VK_FORMAT_R16_SSCALED = 73,
	VK_FORMAT_R16_UINT = 74,
	VK_FORMAT_R16_SINT = 75,
	VK_FORMAT_R16_SFLOAT = 76,
	VK_FORMAT_R16G16_UNORM = 77,
	VK_FORMAT_R16G16_SNORM = 78,
	VK_FORMAT_R16G16_USCALED = 79,
	VK_FORMAT_R16G16_SSCALED = 80,
	VK_FORMAT_R16G16_UINT = 81,
	VK_FORMAT_R16G16_SINT = 82,
	VK_FORMAT_R16G16_SFLOAT = 83,
	VK_FORMAT_R16G16B16_UNORM = 84,
	VK_FORMAT_R16G16B16_SNORM = 85,
	VK_FORMAT_R16G16B16_USCALED = 86,
	VK_FORMAT_R16G16B16_SSCALED = 87,
	VK_FORMAT_R16G16B16_UINT = 88,
	VK_FORMAT_R16G16B16_SINT = 89,
	VK_FORMAT_R16G16B16_SFLOAT = 90,
	VK_FORMAT_R16G16B16A16_UNORM = 91,
	VK_FORMAT_R16G16B16A16_SNORM = 92,
	VK_FORMAT_R16G16B16A16_USCALED = 93,
	VK_FORMAT_R16G16B16A16_SSCALED = 94,
	VK_FORMAT_R16G16B16A16_UINT = 95,
	VK_FORMAT_R16G16B16A16_SINT = 96,
	VK_FORMAT_R16G16B16A16_SFLOAT = 97,
	VK_FORMAT_R32_UINT = 98,
	VK_FORMAT_R32_SINT = 99,
	VK_FORMAT_R32_SFLOAT = 100,
	VK_FORMAT_R32G32_UINT = 101,
	VK_FORMAT_R32G32_SINT = 102,
	VK_FORMAT_R32G32_SFLOAT = 103,
	VK_FORMAT_R32G32B32_UINT = 104,
	VK_FORMAT_R32G32B32_SINT = 105,
	VK_FORMAT_R32G32B32_SFLOAT = 106,
	VK_FORMAT_R32G32B32A32_UINT = 107,
	VK_FORMAT_R32G32B32A32_SINT = 108,
	VK_FORMAT_R32G32B32A32_SFLOAT = 109,
	VK_FORMAT_R64_UINT = 110,
	VK_FORMAT_R64_SINT = 111,
	VK_FORMAT_R64_SFLOAT = 112,
	VK_FORMAT_R64G64_UINT = 113,
	VK_FORMAT_R64G64_SINT = 114,
	VK_FORMAT_R64G64_SFLOAT = 115,
	VK_FORMAT_R64G64B64_UINT = 116,
	VK_FORMAT_R64G64B64_SINT = 117,
	VK_FORMAT_R64G64B64_SFLOAT = 118,
	VK_FORMAT_R64G64B64A64_UINT = 119,
	VK_FORMAT_R64G64B64A64_SINT = 120,
	VK_FORMAT_R64G64B64A64_SFLOAT = 121,
	VK_FORMAT_B10G11R11_UFLOAT_PACK32 = 122,
	VK_FORMAT_E5B9G9R9_UFLOAT_PACK32 = 123,
	VK_FORMAT_D16_UNORM = 124,
	VK_FORMAT_X8_D24_UNORM_PACK32 = 125,
	VK_FORMAT_D32_SFLOAT = 126,
	VK_FORMAT_S8_UINT = 127,
	VK_FORMAT_D16_UNORM_S8_UINT = 128,
	VK_FORMAT_D24_UNORM_S8_UINT = 129,
	VK_FORMAT_D32_SFLOAT_S8_UINT = 130,
	VK_FORMAT_BC1_RGB_UNORM_BLOCK = 131,
	VK_FORMAT_BC1_RGB_SRGB_BLOCK = 132,
	VK_FORMAT_BC1_RGBA_UNORM_BLOCK = 133,
	VK_FORMAT_BC1_RGBA_SRGB_BLOCK = 134,
	VK_FORMAT_BC2_UNORM_BLOCK = 135,
	VK_FORMAT_BC2_SRGB_BLOCK = 136,
	VK_FORMAT_BC3_UNORM_BLOCK = 137,
	VK_FORMAT_BC3_SRGB_BLOCK = 138,
	VK_FORMAT_BC4_UNORM_BLOCK = 139,
	VK_FORMAT_BC4_SNORM_BLOCK = 140,
	VK_FORMAT_BC5_UNORM_BLOCK = 141,
	VK_FORMAT_BC5_SNORM_BLOCK = 142,
	VK_FORMAT_BC6H_UFLOAT_BLOCK = 143,
	VK_FORMAT_BC6H_SFLOAT_BLOCK = 144,
	VK_FORMAT_BC7_UNORM_BLOCK = 145,
	VK_FORMAT_BC7_SRGB_BLOCK = 146,
	VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK = 147,
	VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK = 148,
	VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK = 149,
	VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK = 150,
	VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK = 151,
	VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK = 152,
	VK_FORMAT_EAC_R11_UNORM_BLOCK = 153,
	VK_FORMAT_EAC_R11_SNORM_BLOCK = 154,
	VK_FORMAT_EAC_R11G11_UNORM_BLOCK = 155,
	VK_FORMAT_EAC_R11G11_SNORM_BLOCK = 156,
	VK_FORMAT_ASTC_4x4_UNORM_BLOCK = 157,
	VK_FORMAT_ASTC_4x4_SRGB_BLOCK = 158,
	VK_FORMAT_ASTC_5x4_UNORM_BLOCK = 159,
	VK_FORMAT_ASTC_5x4_SRGB_BLOCK = 160,
	VK_FORMAT_ASTC_5x5_UNORM_BLOCK = 161,
	VK_FORMAT_ASTC_5x5_SRGB_BLOCK = 162,
	VK_FORMAT_ASTC_6x5_UNORM_BLOCK = 163,
	VK_FORMAT_ASTC_6x5_SRGB_BLOCK = 164,
	VK_FORMAT_ASTC_6x6_UNORM_BLOCK = 165,
	VK_FORMAT_ASTC_6x6_SRGB_BLOCK = 166,
	VK_FORMAT_ASTC_8x5_UNORM_BLOCK = 167,
	VK_FORMAT_ASTC_8x5_SRGB_BLOCK = 168,
	VK_FORMAT_ASTC_8x6_UNORM_BLOCK = 169,
	VK_FORMAT_ASTC_8x6_SRGB_BLOCK = 170,
	VK_FORMAT_ASTC_8x8_UNORM_BLOCK = 171,
	VK_FORMAT_ASTC_8x8_SRGB_BLOCK = 172,
	VK_FORMAT_ASTC_10x5_UNORM_BLOCK = 173,
	VK_FORMAT_ASTC_10x5_SRGB_BLOCK = 174,
	VK_FORMAT_ASTC_10x6_UNORM_BLOCK = 175,
	VK_FORMAT_ASTC_10x6_SRGB_BLOCK = 176,
	VK_FORMAT_ASTC_10x8_UNORM_BLOCK = 177,
	VK_FORMAT_ASTC_10x8_SRGB_BLOCK = 178,
	VK_FORMAT_ASTC_10x10_UNORM_BLOCK = 179,
	VK_FORMAT_ASTC_10x10_SRGB_BLOCK = 180,
	VK_FORMAT_ASTC_12x10_UNORM_BLOCK = 181,
	VK_FORMAT_ASTC_12x10_SRGB_BLOCK = 182,
	VK_FORMAT_ASTC_12x12_UNORM_BLOCK = 183,
	VK_FORMAT_ASTC_12x12_SRGB_BLOCK = 184
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkStructureType
{
	VK_STRUCTURE_TYPE_APPLICATION_INFO = 0,
	VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO = 1,
	VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO = 2,
	VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO = 3,
	VK_STRUCTURE_TYPE_SUBMIT_INFO = 4,
	VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO = 5,
	VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE = 6,
	VK_STRUCTURE_TYPE_BIND_SPARSE_INFO = 7,
	VK_STRUCTURE_TYPE_FENCE_CREATE_INFO = 8,
	VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO = 9,
	VK_STRUCTURE_TYPE_EVENT_CREATE_INFO = 10,
	VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO = 11,
	VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO = 12,
	VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO = 13,
	VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO = 14,
	VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO = 15,
	VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO = 16,
	VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO = 17,
	VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO = 18,
	VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO = 19,
	VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO = 20,
	VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO = 21,
	VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO = 22,
	VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO = 23,
	VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO = 24,
	VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO = 25,
	VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO = 26,
	VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO = 27,
	VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO = 28,
	VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO = 29,
	VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO = 30,
	VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO = 31,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO = 32,
	VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO = 33,
	VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO = 34,
	VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET = 35,
	VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET = 36,
	VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO = 37,
	VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO = 38,
	VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO = 39,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO = 40,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO = 41,
	VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO = 42,
	VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO = 43,
	VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER = 44,
	VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER = 45,
	VK_STRUCTURE_TYPE_MEMORY_BARRIER = 46,
	/* Reserved for internal use by the loader, layers, and ICDs */
	VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO = 47,
	/* Reserved for internal use by the loader, layers, and ICDs */
	VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO = 48
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkSubpassContents
{
	VK_SUBPASS_CONTENTS_INLINE = 0,
	VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkResult
{
	/* Command completed successfully */
	VK_SUCCESS = 0,
	/* A fence or query has not yet completed */
	VK_NOT_READY = 1,
	/* A wait operation has not completed in the specified time */
	VK_TIMEOUT = 2,
	/* An event is signaled */
	VK_EVENT_SET = 3,
	/* An event is unsignaled */
	VK_EVENT_RESET = 4,
	/* A return array was too small for the result */
	VK_INCOMPLETE = 5,
	/* A host memory allocation has failed */
	VK_ERROR_OUT_OF_HOST_MEMORY = -1,
	/* A device memory allocation has failed */
	VK_ERROR_OUT_OF_DEVICE_MEMORY = -2,
	/* Initialization of an object has failed */
	VK_ERROR_INITIALIZATION_FAILED = -3,
	/* The logical device has been lost. See <<devsandqueues-lost-device>> */
	VK_ERROR_DEVICE_LOST = -4,
	/* Mapping of a memory object has failed */
	VK_ERROR_MEMORY_MAP_FAILED = -5,
	/* Layer specified does not exist */
	VK_ERROR_LAYER_NOT_PRESENT = -6,
	/* Extension specified does not exist */
	VK_ERROR_EXTENSION_NOT_PRESENT = -7,
	/* Requested feature is not available on this device */
	VK_ERROR_FEATURE_NOT_PRESENT = -8,
	/* Unable to find a Vulkan driver */
	VK_ERROR_INCOMPATIBLE_DRIVER = -9,
	/* Too many objects of the type have already been created */
	VK_ERROR_TOO_MANY_OBJECTS = -10,
	/* Requested format is not supported on this device */
	VK_ERROR_FORMAT_NOT_SUPPORTED = -11,
	/* A requested pool allocation has failed due to fragmentation of the pool's memory */
	VK_ERROR_FRAGMENTED_POOL = -12,
	/* An unknown error has occurred, due to an implementation or application bug */
	VK_ERROR_UNKNOWN = -13
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDynamicState
{
	VK_DYNAMIC_STATE_VIEWPORT = 0,
	VK_DYNAMIC_STATE_SCISSOR = 1,
	VK_DYNAMIC_STATE_LINE_WIDTH = 2,
	VK_DYNAMIC_STATE_DEPTH_BIAS = 3,
	VK_DYNAMIC_STATE_BLEND_CONSTANTS = 4,
	VK_DYNAMIC_STATE_DEPTH_BOUNDS = 5,
	VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK = 6,
	VK_DYNAMIC_STATE_STENCIL_WRITE_MASK = 7,
	VK_DYNAMIC_STATE_STENCIL_REFERENCE = 8
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDescriptorUpdateTemplateType
{
	/* Create descriptor update template for descriptor set updates */
	VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET = 0
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkObjectType
{
	VK_OBJECT_TYPE_UNKNOWN = 0,
	VK_OBJECT_TYPE_INSTANCE = 1,
	VK_OBJECT_TYPE_PHYSICAL_DEVICE = 2,
	VK_OBJECT_TYPE_DEVICE = 3,
	VK_OBJECT_TYPE_QUEUE = 4,
	VK_OBJECT_TYPE_SEMAPHORE = 5,
	VK_OBJECT_TYPE_COMMAND_BUFFER = 6,
	VK_OBJECT_TYPE_FENCE = 7,
	VK_OBJECT_TYPE_DEVICE_MEMORY = 8,
	VK_OBJECT_TYPE_BUFFER = 9,
	VK_OBJECT_TYPE_IMAGE = 10,
	VK_OBJECT_TYPE_EVENT = 11,
	VK_OBJECT_TYPE_QUERY_POOL = 12,
	VK_OBJECT_TYPE_BUFFER_VIEW = 13,
	VK_OBJECT_TYPE_IMAGE_VIEW = 14,
	VK_OBJECT_TYPE_SHADER_MODULE = 15,
	VK_OBJECT_TYPE_PIPELINE_CACHE = 16,
	VK_OBJECT_TYPE_PIPELINE_LAYOUT = 17,
	VK_OBJECT_TYPE_RENDER_PASS = 18,
	VK_OBJECT_TYPE_PIPELINE = 19,
	VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT = 20,
	VK_OBJECT_TYPE_SAMPLER = 21,
	VK_OBJECT_TYPE_DESCRIPTOR_POOL = 22,
	VK_OBJECT_TYPE_DESCRIPTOR_SET = 23,
	VK_OBJECT_TYPE_FRAMEBUFFER = 24,
	VK_OBJECT_TYPE_COMMAND_POOL = 25
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkRayTracingInvocationReorderModeNV
{
	VK_RAY_TRACING_INVOCATION_REORDER_MODE_NONE_NV = 0,
	VK_RAY_TRACING_INVOCATION_REORDER_MODE_REORDER_NV = 1
}

pub type VkQueueFlagBits = u32;

pub type VkCullModeFlagBits = u32;

pub type VkRenderPassCreateFlagBits = u32;

pub type VkDeviceQueueCreateFlagBits = u32;

pub type VkMemoryPropertyFlagBits = u32;

pub type VkMemoryHeapFlagBits = u32;

pub type VkAccessFlagBits = u32;

pub type VkBufferUsageFlagBits = u32;

pub type VkBufferCreateFlagBits = u32;

pub type VkShaderStageFlagBits = u32;

pub type VkImageUsageFlagBits = u32;

pub type VkImageCreateFlagBits = u32;

pub type VkImageViewCreateFlagBits = u32;

pub type VkSamplerCreateFlagBits = u32;

pub type VkPipelineCreateFlagBits = u32;

pub type VkPipelineShaderStageCreateFlagBits = u32;

pub type VkColorComponentFlagBits = u32;

pub type VkFenceCreateFlagBits = u32;

pub type VkSemaphoreCreateFlagBits = u32;

pub type VkFormatFeatureFlagBits = u32;

pub type VkQueryControlFlagBits = u32;

pub type VkQueryResultFlagBits = u32;

pub type VkCommandBufferUsageFlagBits = u32;

pub type VkQueryPipelineStatisticFlagBits = u32;

pub type VkImageAspectFlagBits = u32;

pub type VkSparseImageFormatFlagBits = u32;

pub type VkSparseMemoryBindFlagBits = u32;

pub type VkPipelineStageFlagBits = u32;

pub type VkCommandPoolCreateFlagBits = u32;

pub type VkCommandPoolResetFlagBits = u32;

pub type VkCommandBufferResetFlagBits = u32;

pub type VkSampleCountFlagBits = u32;

pub type VkAttachmentDescriptionFlagBits = u32;

pub type VkStencilFaceFlagBits = u32;

pub type VkDescriptorPoolCreateFlagBits = u32;

pub type VkDependencyFlagBits = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkSemaphoreType
{
	VK_SEMAPHORE_TYPE_BINARY = 0,
	VK_SEMAPHORE_TYPE_TIMELINE = 1
}

pub type VkSemaphoreWaitFlagBits = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPresentModeKHR
{
	VK_PRESENT_MODE_IMMEDIATE_KHR = 0,
	VK_PRESENT_MODE_MAILBOX_KHR = 1,
	VK_PRESENT_MODE_FIFO_KHR = 2,
	VK_PRESENT_MODE_FIFO_RELAXED_KHR = 3
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkColorSpaceKHR
{
	VK_COLOR_SPACE_SRGB_NONLINEAR_KHR = 0,
	/* Backwards-compatible alias containing a typo */
	VK_COLORSPACE_SRGB_NONLINEAR_KHR
}

pub type VkDisplayPlaneAlphaFlagBitsKHR = u32;

pub type VkCompositeAlphaFlagBitsKHR = u32;

pub type VkSurfaceTransformFlagBitsKHR = u32;

pub type VkSwapchainImageUsageFlagBitsANDROID = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkTimeDomainEXT
{
	VK_TIME_DOMAIN_DEVICE_EXT = 0,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT = 1,
	VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT = 2,
	VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT = 3
}

pub type VkDebugReportFlagBitsEXT = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDebugReportObjectTypeEXT
{
	VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT = 0,
	VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT = 1,
	VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT = 2,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT = 3,
	VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT = 4,
	VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT = 5,
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT = 6,
	VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT = 7,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT = 8,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT = 9,
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT = 10,
	VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT = 11,
	VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT = 12,
	VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT = 13,
	VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT = 14,
	VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT = 15,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT = 16,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT = 17,
	VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT = 18,
	VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT = 19,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT = 20,
	VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT = 21,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT = 22,
	VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT = 23,
	VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT = 24,
	VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT = 25,
	VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT = 26,
	VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT = 27,
	VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT = 28,
	/* Backwards-compatible alias containing a typo */
	VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT,
	VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT = 29,
	VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT = 30,
	VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT = 33,
	/* Backwards-compatible alias containing a typo */
	VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDeviceMemoryReportEventTypeEXT
{
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT = 0,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT = 1,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT = 2,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT = 3,
	VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT = 4
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkRasterizationOrderAMD
{
	VK_RASTERIZATION_ORDER_STRICT_AMD = 0,
	VK_RASTERIZATION_ORDER_RELAXED_AMD = 1
}

pub type VkExternalMemoryHandleTypeFlagBitsNV = u32;

pub type VkExternalMemoryFeatureFlagBitsNV = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkValidationCheckEXT
{
	VK_VALIDATION_CHECK_ALL_EXT = 0,
	VK_VALIDATION_CHECK_SHADERS_EXT = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkValidationFeatureEnableEXT
{
	VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT = 0,
	VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT = 1,
	VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT = 2,
	VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT = 3,
	VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT = 4
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkValidationFeatureDisableEXT
{
	VK_VALIDATION_FEATURE_DISABLE_ALL_EXT = 0,
	VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT = 1,
	VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT = 2,
	VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT = 3,
	VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT = 4,
	VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT = 5,
	VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT = 6,
	VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT = 7
}

pub type VkSubgroupFeatureFlagBits = u32;

pub type VkIndirectCommandsLayoutUsageFlagBitsNV = u32;

pub type VkIndirectStateFlagBitsNV = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkIndirectCommandsTokenTypeNV
{
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV = 0,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV = 1,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV = 2,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV = 3,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV = 4,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV = 5,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV = 6,
	VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV = 7
}

pub type VkPrivateDataSlotCreateFlagBits = u32;

pub type VkDescriptorSetLayoutCreateFlagBits = u32;

pub type VkExternalMemoryHandleTypeFlagBits = u32;

pub type VkExternalMemoryFeatureFlagBits = u32;

pub type VkExternalSemaphoreHandleTypeFlagBits = u32;

pub type VkExternalSemaphoreFeatureFlagBits = u32;

pub type VkSemaphoreImportFlagBits = u32;

pub type VkExternalFenceHandleTypeFlagBits = u32;

pub type VkExternalFenceFeatureFlagBits = u32;

pub type VkFenceImportFlagBits = u32;

pub type VkSurfaceCounterFlagBitsEXT = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDisplayPowerStateEXT
{
	VK_DISPLAY_POWER_STATE_OFF_EXT = 0,
	VK_DISPLAY_POWER_STATE_SUSPEND_EXT = 1,
	VK_DISPLAY_POWER_STATE_ON_EXT = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDeviceEventTypeEXT
{
	VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT = 0
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDisplayEventTypeEXT
{
	VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT = 0
}

pub type VkPeerMemoryFeatureFlagBits = u32;

pub type VkMemoryAllocateFlagBits = u32;

pub type VkDeviceGroupPresentModeFlagBitsKHR = u32;

pub type VkSwapchainCreateFlagBitsKHR = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkViewportCoordinateSwizzleNV
{
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV = 0,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV = 1,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV = 2,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV = 3,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV = 4,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV = 5,
	VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV = 6,
	VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV = 7
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDiscardRectangleModeEXT
{
	VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT = 0,
	VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT = 1
}

pub type VkSubpassDescriptionFlagBits = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPointClippingBehavior
{
	VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES = 0,
	VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkSamplerReductionMode
{
	VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE = 0,
	VK_SAMPLER_REDUCTION_MODE_MIN = 1,
	VK_SAMPLER_REDUCTION_MODE_MAX = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkTessellationDomainOrigin
{
	VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT = 0,
	VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkSamplerYcbcrModelConversion
{
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY = 0,
	/* just range expansion */
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY = 1,
	/* aka HD YUV */
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709 = 2,
	/* aka SD YUV */
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601 = 3,
	/* aka UHD YUV */
	VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020 = 4
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkSamplerYcbcrRange
{
	/* Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped) */
	VK_SAMPLER_YCBCR_RANGE_ITU_FULL = 0,
	/* Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240 */
	VK_SAMPLER_YCBCR_RANGE_ITU_NARROW = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkChromaLocation
{
	VK_CHROMA_LOCATION_COSITED_EVEN = 0,
	VK_CHROMA_LOCATION_MIDPOINT = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkBlendOverlapEXT
{
	VK_BLEND_OVERLAP_UNCORRELATED_EXT = 0,
	VK_BLEND_OVERLAP_DISJOINT_EXT = 1,
	VK_BLEND_OVERLAP_CONJOINT_EXT = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkCoverageModulationModeNV
{
	VK_COVERAGE_MODULATION_MODE_NONE_NV = 0,
	VK_COVERAGE_MODULATION_MODE_RGB_NV = 1,
	VK_COVERAGE_MODULATION_MODE_ALPHA_NV = 2,
	VK_COVERAGE_MODULATION_MODE_RGBA_NV = 3
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkCoverageReductionModeNV
{
	VK_COVERAGE_REDUCTION_MODE_MERGE_NV = 0,
	VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkValidationCacheHeaderVersionEXT
{
	VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkShaderInfoTypeAMD
{
	VK_SHADER_INFO_TYPE_STATISTICS_AMD = 0,
	VK_SHADER_INFO_TYPE_BINARY_AMD = 1,
	VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkQueueGlobalPriorityKHR
{
	VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR = 128,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR = 256,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR = 512,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR = 1024,
	VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT,
	VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT,
	VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT,
	VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT
}

pub type VkDebugUtilsMessageSeverityFlagBitsEXT = u32;

pub type VkDebugUtilsMessageTypeFlagBitsEXT = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkConservativeRasterizationModeEXT
{
	VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT = 0,
	VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT = 1,
	VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT = 2
}

pub type VkDescriptorBindingFlagBits = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkVendorId
{
	/* Vivante vendor ID */
	VK_VENDOR_ID_VIV = 0x10001,
	/* VeriSilicon vendor ID */
	VK_VENDOR_ID_VSI = 0x10002,
	/* Kazan Software Renderer */
	VK_VENDOR_ID_KAZAN = 0x10003,
	/* Codeplay Software Ltd. vendor ID */
	VK_VENDOR_ID_CODEPLAY = 0x10004,
	/* Mesa vendor ID */
	VK_VENDOR_ID_MESA = 0x10005,
	/* PoCL vendor ID */
	VK_VENDOR_ID_POCL = 0x10006
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDriverId
{
	/* Advanced Micro Devices, Inc. */
	VK_DRIVER_ID_AMD_PROPRIETARY = 1,
	/* Advanced Micro Devices, Inc. */
	VK_DRIVER_ID_AMD_OPEN_SOURCE = 2,
	/* Mesa open source project */
	VK_DRIVER_ID_MESA_RADV = 3,
	/* NVIDIA Corporation */
	VK_DRIVER_ID_NVIDIA_PROPRIETARY = 4,
	/* Intel Corporation */
	VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS = 5,
	/* Intel Corporation */
	VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA = 6,
	/* Imagination Technologies */
	VK_DRIVER_ID_IMAGINATION_PROPRIETARY = 7,
	/* Qualcomm Technologies, Inc. */
	VK_DRIVER_ID_QUALCOMM_PROPRIETARY = 8,
	/* Arm Limited */
	VK_DRIVER_ID_ARM_PROPRIETARY = 9,
	/* Google LLC */
	VK_DRIVER_ID_GOOGLE_SWIFTSHADER = 10,
	/* Google LLC */
	VK_DRIVER_ID_GGP_PROPRIETARY = 11,
	/* Broadcom Inc. */
	VK_DRIVER_ID_BROADCOM_PROPRIETARY = 12,
	/* Mesa */
	VK_DRIVER_ID_MESA_LLVMPIPE = 13,
	/* MoltenVK */
	VK_DRIVER_ID_MOLTENVK = 14,
	/* Core Avionics & Industrial Inc. */
	VK_DRIVER_ID_COREAVI_PROPRIETARY = 15,
	/* Juice Technologies, Inc. */
	VK_DRIVER_ID_JUICE_PROPRIETARY = 16,
	/* Verisilicon, Inc. */
	VK_DRIVER_ID_VERISILICON_PROPRIETARY = 17,
	/* Mesa open source project */
	VK_DRIVER_ID_MESA_TURNIP = 18,
	/* Mesa open source project */
	VK_DRIVER_ID_MESA_V3DV = 19,
	/* Mesa open source project */
	VK_DRIVER_ID_MESA_PANVK = 20,
	/* Samsung Electronics Co., Ltd. */
	VK_DRIVER_ID_SAMSUNG_PROPRIETARY = 21,
	/* Mesa open source project */
	VK_DRIVER_ID_MESA_VENUS = 22,
	/* Mesa open source project */
	VK_DRIVER_ID_MESA_DOZEN = 23
}

pub type VkConditionalRenderingFlagBitsEXT = u32;

pub type VkResolveModeFlagBits = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkShadingRatePaletteEntryNV
{
	VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV = 0,
	VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV = 1,
	VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV = 2,
	VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV = 3,
	VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV = 4,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV = 5,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV = 6,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV = 7,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV = 8,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV = 10,
	VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV = 11
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkCoarseSampleOrderTypeNV
{
	VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV = 0,
	VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV = 1,
	VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV = 2,
	VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV = 3
}

pub type VkGeometryInstanceFlagBitsKHR = u32;

pub type VkGeometryFlagBitsKHR = u32;

pub type VkBuildAccelerationStructureFlagBitsKHR = u32;

pub type VkAccelerationStructureCreateFlagBitsKHR = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkCopyAccelerationStructureModeKHR
{
	VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR = 0,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR = 1,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR = 2,
	VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR = 3
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkBuildAccelerationStructureModeKHR
{
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR = 0,
	VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkAccelerationStructureTypeKHR
{
	VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR = 0,
	VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR = 1,
	VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkGeometryTypeKHR
{
	VK_GEOMETRY_TYPE_TRIANGLES_KHR = 0,
	VK_GEOMETRY_TYPE_AABBS_KHR = 1,
	VK_GEOMETRY_TYPE_INSTANCES_KHR = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkAccelerationStructureMemoryRequirementsTypeNV
{
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV = 0,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV = 1,
	VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkAccelerationStructureBuildTypeKHR
{
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR = 0,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR = 1,
	VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkRayTracingShaderGroupTypeKHR
{
	VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR = 0,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR = 1,
	VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkAccelerationStructureCompatibilityKHR
{
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR = 0,
	VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkShaderGroupShaderKHR
{
	VK_SHADER_GROUP_SHADER_GENERAL_KHR = 0,
	VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR = 1,
	VK_SHADER_GROUP_SHADER_ANY_HIT_KHR = 2,
	VK_SHADER_GROUP_SHADER_INTERSECTION_KHR = 3
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkMemoryOverallocationBehaviorAMD
{
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD = 0,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD = 1,
	VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD = 2
}

pub type VkFramebufferCreateFlagBits = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkScopeNV
{
	VK_SCOPE_DEVICE_NV = 1,
	VK_SCOPE_WORKGROUP_NV = 2,
	VK_SCOPE_SUBGROUP_NV = 3,
	VK_SCOPE_QUEUE_FAMILY_NV = 5
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkComponentTypeNV
{
	VK_COMPONENT_TYPE_FLOAT16_NV = 0,
	VK_COMPONENT_TYPE_FLOAT32_NV = 1,
	VK_COMPONENT_TYPE_FLOAT64_NV = 2,
	VK_COMPONENT_TYPE_SINT8_NV = 3,
	VK_COMPONENT_TYPE_SINT16_NV = 4,
	VK_COMPONENT_TYPE_SINT32_NV = 5,
	VK_COMPONENT_TYPE_SINT64_NV = 6,
	VK_COMPONENT_TYPE_UINT8_NV = 7,
	VK_COMPONENT_TYPE_UINT16_NV = 8,
	VK_COMPONENT_TYPE_UINT32_NV = 9,
	VK_COMPONENT_TYPE_UINT64_NV = 10
}

pub type VkDeviceDiagnosticsConfigFlagBitsNV = u32;

pub type VkPipelineCreationFeedbackFlagBits = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkFullScreenExclusiveEXT
{
	VK_FULL_SCREEN_EXCLUSIVE_DEFAULT_EXT = 0,
	VK_FULL_SCREEN_EXCLUSIVE_ALLOWED_EXT = 1,
	VK_FULL_SCREEN_EXCLUSIVE_DISALLOWED_EXT = 2,
	VK_FULL_SCREEN_EXCLUSIVE_APPLICATION_CONTROLLED_EXT = 3
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPerformanceCounterScopeKHR
{
	VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR = 0,
	VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR = 1,
	VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR = 2,
	/* Backwards-compatible alias containing a typo */
	VK_QUERY_SCOPE_COMMAND_BUFFER_KHR,
	/* Backwards-compatible alias containing a typo */
	VK_QUERY_SCOPE_RENDER_PASS_KHR,
	/* Backwards-compatible alias containing a typo */
	VK_QUERY_SCOPE_COMMAND_KHR
}

pub type VkMemoryDecompressionMethodFlagBitsNV = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPerformanceCounterUnitKHR
{
	VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR = 0,
	VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR = 1,
	VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR = 2,
	VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR = 3,
	VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR = 4,
	VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR = 5,
	VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR = 6,
	VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR = 7,
	VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR = 8,
	VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR = 9,
	VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR = 10
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPerformanceCounterStorageKHR
{
	VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR = 0,
	VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR = 1,
	VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR = 2,
	VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR = 3,
	VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR = 4,
	VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR = 5
}

pub type VkPerformanceCounterDescriptionFlagBitsKHR = u32;

pub type VkAcquireProfilingLockFlagBitsKHR = u32;

pub type VkShaderCorePropertiesFlagBitsAMD = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPerformanceConfigurationTypeINTEL
{
	VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL = 0
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkQueryPoolSamplingModeINTEL
{
	VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL = 0
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPerformanceOverrideTypeINTEL
{
	VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL = 0,
	VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPerformanceParameterTypeINTEL
{
	VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL = 0,
	VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPerformanceValueTypeINTEL
{
	VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL = 0,
	VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL = 1,
	VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL = 2,
	VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL = 3,
	VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL = 4
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkShaderFloatControlsIndependence
{
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY = 0,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL = 1,
	VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPipelineExecutableStatisticFormatKHR
{
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR = 0,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR = 1,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR = 2,
	VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR = 3
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkLineRasterizationModeEXT
{
	VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT = 0,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT = 1,
	VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT = 2,
	VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT = 3
}

pub type VkShaderModuleCreateFlagBits = u32;

pub type VkPipelineCompilerControlFlagBitsAMD = u32;

pub type VkToolPurposeFlagBits = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkFragmentShadingRateCombinerOpKHR
{
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR = 0,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR = 1,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR = 2,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR = 3,
	VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR = 4
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkFragmentShadingRateNV
{
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 1,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 4,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 5,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 6,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 9,
	VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 10,
	VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 11,
	VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 12,
	VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 13,
	VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 14,
	VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV = 15
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkFragmentShadingRateTypeNV
{
	VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV = 0,
	VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkSubpassMergeStatusEXT
{
	VK_SUBPASS_MERGE_STATUS_MERGED_EXT = 0,
	VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT = 1,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT = 2,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT = 3,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT = 4,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT = 5,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT = 6,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT = 7,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT = 8,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT = 9,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT = 10,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT = 11,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT = 12,
	VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT = 13
}

pub type VkAccessFlagBits2 = u32;

pub type VkPipelineStageFlagBits2 = u32;

pub type VkSubmitFlagBits = u32;

pub type VkEventCreateFlagBits = u32;

pub type VkPipelineLayoutCreateFlagBits = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkProvokingVertexModeEXT
{
	VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT = 0,
	VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT = 1
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkAccelerationStructureMotionInstanceTypeNV
{
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV = 0,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV = 1,
	VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV = 2
}

pub type VkPipelineColorBlendStateCreateFlagBits = u32;

pub type VkPipelineDepthStencilStateCreateFlagBits = u32;

pub type VkGraphicsPipelineLibraryFlagBitsEXT = u32;

pub type VkDeviceAddressBindingFlagBitsEXT = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDeviceAddressBindingTypeEXT
{
	VK_DEVICE_ADDRESS_BINDING_TYPE_BIND_EXT = 0,
	VK_DEVICE_ADDRESS_BINDING_TYPE_UNBIND_EXT = 1
}

pub type VkVideoCodecOperationFlagBitsKHR = u32;

pub type VkVideoChromaSubsamplingFlagBitsKHR = u32;

pub type VkVideoComponentBitDepthFlagBitsKHR = u32;

pub type VkVideoCapabilityFlagBitsKHR = u32;

pub type VkVideoSessionCreateFlagBitsKHR = u32;

pub type VkVideoDecodeH264PictureLayoutFlagBitsEXT = u32;

pub type VkVideoCodingControlFlagBitsKHR = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkQueryResultStatusKHR
{
	VK_QUERY_RESULT_STATUS_ERROR_KHR = -1,
	VK_QUERY_RESULT_STATUS_NOT_READY_KHR = 0,
	VK_QUERY_RESULT_STATUS_COMPLETE_KHR = 1
}

pub type VkVideoDecodeUsageFlagBitsKHR = u32;

pub type VkVideoDecodeCapabilityFlagBitsKHR = u32;

pub type VkVideoEncodeUsageFlagBitsKHR = u32;

pub type VkVideoEncodeContentFlagBitsKHR = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkVideoEncodeTuningModeKHR
{
	VK_VIDEO_ENCODE_TUNING_MODE_DEFAULT_KHR = 0,
	VK_VIDEO_ENCODE_TUNING_MODE_HIGH_QUALITY_KHR = 1,
	VK_VIDEO_ENCODE_TUNING_MODE_LOW_LATENCY_KHR = 2,
	VK_VIDEO_ENCODE_TUNING_MODE_ULTRA_LOW_LATENCY_KHR = 3,
	VK_VIDEO_ENCODE_TUNING_MODE_LOSSLESS_KHR = 4
}

pub type VkVideoEncodeCapabilityFlagBitsKHR = u32;

pub type VkVideoEncodeRateControlModeFlagBitsKHR = u32;

pub type VkVideoEncodeH264CapabilityFlagBitsEXT = u32;

pub type VkVideoEncodeH264InputModeFlagBitsEXT = u32;

pub type VkVideoEncodeH264OutputModeFlagBitsEXT = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkVideoEncodeH264RateControlStructureEXT
{
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT = 0,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_FLAT_EXT = 1,
	VK_VIDEO_ENCODE_H264_RATE_CONTROL_STRUCTURE_DYADIC_EXT = 2
}

pub type VkImageFormatConstraintsFlagBitsFUCHSIA = u32;

pub type VkImageConstraintsInfoFlagBitsFUCHSIA = u32;

pub type VkFormatFeatureFlagBits2 = u32;

pub type VkRenderingFlagBits = u32;

pub type VkVideoEncodeH265CapabilityFlagBitsEXT = u32;

pub type VkVideoEncodeH265InputModeFlagBitsEXT = u32;

pub type VkVideoEncodeH265OutputModeFlagBitsEXT = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkVideoEncodeH265RateControlStructureEXT
{
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_UNKNOWN_EXT = 0,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_FLAT_EXT = 1,
	VK_VIDEO_ENCODE_H265_RATE_CONTROL_STRUCTURE_DYADIC_EXT = 2
}

pub type VkVideoEncodeH265CtbSizeFlagBitsEXT = u32;

pub type VkVideoEncodeH265TransformBlockSizeFlagBitsEXT = u32;

pub type VkExportMetalObjectTypeFlagBitsEXT = u32;

pub type VkInstanceCreateFlagBits = u32;

pub type VkImageCompressionFlagBitsEXT = u32;

pub type VkImageCompressionFixedRateFlagBitsEXT = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPipelineRobustnessBufferBehaviorEXT
{
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT = 0,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT = 1,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT = 2,
	VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT = 3
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkPipelineRobustnessImageBehaviorEXT
{
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT = 0,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT = 1,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT = 2,
	VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT = 3
}

pub type VkOpticalFlowGridSizeFlagBitsNV = u32;

pub type VkOpticalFlowUsageFlagBitsNV = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkOpticalFlowPerformanceLevelNV
{
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_UNKNOWN_NV = 0,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_SLOW_NV = 1,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_MEDIUM_NV = 2,
	VK_OPTICAL_FLOW_PERFORMANCE_LEVEL_FAST_NV = 3
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkOpticalFlowSessionBindingPointNV
{
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_UNKNOWN_NV = 0,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_INPUT_NV = 1,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_REFERENCE_NV = 2,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_HINT_NV = 3,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_FLOW_VECTOR_NV = 4,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_FLOW_VECTOR_NV = 5,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_COST_NV = 6,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_BACKWARD_COST_NV = 7,
	VK_OPTICAL_FLOW_SESSION_BINDING_POINT_GLOBAL_FLOW_NV = 8
}

pub type VkOpticalFlowSessionCreateFlagBitsNV = u32;

pub type VkOpticalFlowExecuteFlagBitsNV = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkMicromapTypeEXT
{
	VK_MICROMAP_TYPE_OPACITY_MICROMAP_EXT = 0
}

pub type VkBuildMicromapFlagBitsEXT = u32;

pub type VkMicromapCreateFlagBitsEXT = u32;

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkCopyMicromapModeEXT
{
	VK_COPY_MICROMAP_MODE_CLONE_EXT = 0,
	VK_COPY_MICROMAP_MODE_SERIALIZE_EXT = 1,
	VK_COPY_MICROMAP_MODE_DESERIALIZE_EXT = 2,
	VK_COPY_MICROMAP_MODE_COMPACT_EXT = 3
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkBuildMicromapModeEXT
{
	VK_BUILD_MICROMAP_MODE_BUILD_EXT = 0
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkOpacityMicromapFormatEXT
{
	VK_OPACITY_MICROMAP_FORMAT_2_STATE_EXT = 1,
	VK_OPACITY_MICROMAP_FORMAT_4_STATE_EXT = 2
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkOpacityMicromapSpecialIndexEXT
{
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_TRANSPARENT_EXT = -1,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_OPAQUE_EXT = -2,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_TRANSPARENT_EXT = -3,
	VK_OPACITY_MICROMAP_SPECIAL_INDEX_FULLY_UNKNOWN_OPAQUE_EXT = -4
}

#[derive(Debug, Copy, Clone, PartialEq)]
pub enum VkDeviceFaultAddressTypeEXT
{
	/* Currently unused */
	VK_DEVICE_FAULT_ADDRESS_TYPE_NONE_EXT = 0,
	VK_DEVICE_FAULT_ADDRESS_TYPE_READ_INVALID_EXT = 1,
	VK_DEVICE_FAULT_ADDRESS_TYPE_WRITE_INVALID_EXT = 2,
	VK_DEVICE_FAULT_ADDRESS_TYPE_EXECUTE_INVALID_EXT = 3,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_UNKNOWN_EXT = 4,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_INVALID_EXT = 5,
	VK_DEVICE_FAULT_ADDRESS_TYPE_INSTRUCTION_POINTER_FAULT_EXT = 6
}

pub type VkSampleMask = u32;
pub type VkBool32 = u32;
pub type VkFlags = u32;
pub type VkFlags64 = u64;
pub type VkDeviceSize = u64;
pub type VkDeviceAddress = u64;
pub type VkFramebufferCreateFlags = VkFlags;
pub type VkQueryPoolCreateFlags = VkFlags;
pub type VkRenderPassCreateFlags = VkFlags;
pub type VkSamplerCreateFlags = VkFlags;
pub type VkPipelineLayoutCreateFlags = VkFlags;
pub type VkPipelineCacheCreateFlags = VkFlags;
pub type VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub type VkPipelineDynamicStateCreateFlags = VkFlags;
pub type VkPipelineColorBlendStateCreateFlags = VkFlags;
pub type VkPipelineMultisampleStateCreateFlags = VkFlags;
pub type VkPipelineRasterizationStateCreateFlags = VkFlags;
pub type VkPipelineViewportStateCreateFlags = VkFlags;
pub type VkPipelineTessellationStateCreateFlags = VkFlags;
pub type VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub type VkPipelineVertexInputStateCreateFlags = VkFlags;
pub type VkPipelineShaderStageCreateFlags = VkFlags;
pub type VkDescriptorSetLayoutCreateFlags = VkFlags;
pub type VkBufferViewCreateFlags = VkFlags;
pub type VkInstanceCreateFlags = VkFlags;
pub type VkDeviceCreateFlags = VkFlags;
pub type VkDeviceQueueCreateFlags = VkFlags;
pub type VkQueueFlags = VkFlags;
pub type VkMemoryPropertyFlags = VkFlags;
pub type VkMemoryHeapFlags = VkFlags;
pub type VkAccessFlags = VkFlags;
pub type VkBufferUsageFlags = VkFlags;
pub type VkBufferCreateFlags = VkFlags;
pub type VkShaderStageFlags = VkFlags;
pub type VkImageUsageFlags = VkFlags;
pub type VkImageCreateFlags = VkFlags;
pub type VkImageViewCreateFlags = VkFlags;
pub type VkPipelineCreateFlags = VkFlags;
pub type VkColorComponentFlags = VkFlags;
pub type VkFenceCreateFlags = VkFlags;
pub type VkSemaphoreCreateFlags = VkFlags;
pub type VkFormatFeatureFlags = VkFlags;
pub type VkQueryControlFlags = VkFlags;
pub type VkQueryResultFlags = VkFlags;
pub type VkShaderModuleCreateFlags = VkFlags;
pub type VkEventCreateFlags = VkFlags;
pub type VkCommandPoolCreateFlags = VkFlags;
pub type VkCommandPoolResetFlags = VkFlags;
pub type VkCommandBufferResetFlags = VkFlags;
pub type VkCommandBufferUsageFlags = VkFlags;
pub type VkQueryPipelineStatisticFlags = VkFlags;
pub type VkMemoryMapFlags = VkFlags;
pub type VkImageAspectFlags = VkFlags;
pub type VkSparseMemoryBindFlags = VkFlags;
pub type VkSparseImageFormatFlags = VkFlags;
pub type VkSubpassDescriptionFlags = VkFlags;
pub type VkPipelineStageFlags = VkFlags;
pub type VkSampleCountFlags = VkFlags;
pub type VkAttachmentDescriptionFlags = VkFlags;
pub type VkStencilFaceFlags = VkFlags;
pub type VkCullModeFlags = VkFlags;
pub type VkDescriptorPoolCreateFlags = VkFlags;
pub type VkDescriptorPoolResetFlags = VkFlags;
pub type VkDependencyFlags = VkFlags;
pub type VkSubgroupFeatureFlags = VkFlags;
pub type VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
pub type VkIndirectStateFlagsNV = VkFlags;
pub type VkGeometryFlagsKHR = VkFlags;
pub type VkGeometryFlagsNV = VkGeometryFlagsKHR;

pub type VkGeometryInstanceFlagsKHR = VkFlags;
pub type VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;

pub type VkBuildAccelerationStructureFlagsKHR = VkFlags;
pub type VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;

pub type VkPrivateDataSlotCreateFlags = VkFlags;
pub type VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags;

pub type VkAccelerationStructureCreateFlagsKHR = VkFlags;
pub type VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub type VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;

pub type VkPipelineCreationFeedbackFlags = VkFlags;
pub type VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags;

pub type VkPerformanceCounterDescriptionFlagsKHR = VkFlags;
pub type VkAcquireProfilingLockFlagsKHR = VkFlags;
pub type VkSemaphoreWaitFlags = VkFlags;
pub type VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;

pub type VkPipelineCompilerControlFlagsAMD = VkFlags;
pub type VkShaderCorePropertiesFlagsAMD = VkFlags;
pub type VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
pub type VkAccessFlags2 = VkFlags64;
pub type VkAccessFlags2KHR = VkAccessFlags2;

pub type VkPipelineStageFlags2 = VkFlags64;
pub type VkPipelineStageFlags2KHR = VkPipelineStageFlags2;

pub type VkAccelerationStructureMotionInfoFlagsNV = VkFlags;
pub type VkAccelerationStructureMotionInstanceFlagsNV = VkFlags;
pub type VkFormatFeatureFlags2 = VkFlags64;
pub type VkFormatFeatureFlags2KHR = VkFormatFeatureFlags2;

pub type VkRenderingFlags = VkFlags;
pub type VkMemoryDecompressionMethodFlagsNV = VkFlags64;
pub type VkRenderingFlagsKHR = VkRenderingFlags;

pub type VkBuildMicromapFlagsEXT = VkFlags;
pub type VkMicromapCreateFlagsEXT = VkFlags;
pub type VkCompositeAlphaFlagsKHR = VkFlags;
pub type VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub type VkSurfaceTransformFlagsKHR = VkFlags;
pub type VkSwapchainCreateFlagsKHR = VkFlags;
pub type VkDisplayModeCreateFlagsKHR = VkFlags;
pub type VkDisplaySurfaceCreateFlagsKHR = VkFlags;
pub type VkAndroidSurfaceCreateFlagsKHR = VkFlags;
pub type VkViSurfaceCreateFlagsNN = VkFlags;
pub type VkWaylandSurfaceCreateFlagsKHR = VkFlags;
pub type VkWin32SurfaceCreateFlagsKHR = VkFlags;
pub type VkXlibSurfaceCreateFlagsKHR = VkFlags;
pub type VkXcbSurfaceCreateFlagsKHR = VkFlags;
pub type VkDirectFBSurfaceCreateFlagsEXT = VkFlags;
pub type VkIOSSurfaceCreateFlagsMVK = VkFlags;
pub type VkMacOSSurfaceCreateFlagsMVK = VkFlags;
pub type VkMetalSurfaceCreateFlagsEXT = VkFlags;
pub type VkImagePipeSurfaceCreateFlagsFUCHSIA = VkFlags;
pub type VkStreamDescriptorSurfaceCreateFlagsGGP = VkFlags;
pub type VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
pub type VkScreenSurfaceCreateFlagsQNX = VkFlags;
pub type VkPeerMemoryFeatureFlags = VkFlags;
pub type VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;

pub type VkMemoryAllocateFlags = VkFlags;
pub type VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;

pub type VkDeviceGroupPresentModeFlagsKHR = VkFlags;
pub type VkDebugReportFlagsEXT = VkFlags;
pub type VkCommandPoolTrimFlags = VkFlags;
pub type VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;

pub type VkExternalMemoryHandleTypeFlagsNV = VkFlags;
pub type VkExternalMemoryFeatureFlagsNV = VkFlags;
pub type VkExternalMemoryHandleTypeFlags = VkFlags;
pub type VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;

pub type VkExternalMemoryFeatureFlags = VkFlags;
pub type VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;

pub type VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub type VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;

pub type VkExternalSemaphoreFeatureFlags = VkFlags;
pub type VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;

pub type VkSemaphoreImportFlags = VkFlags;
pub type VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;

pub type VkExternalFenceHandleTypeFlags = VkFlags;
pub type VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;

pub type VkExternalFenceFeatureFlags = VkFlags;
pub type VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;

pub type VkFenceImportFlags = VkFlags;
pub type VkFenceImportFlagsKHR = VkFenceImportFlags;

pub type VkSurfaceCounterFlagsEXT = VkFlags;
pub type VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
pub type VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
pub type VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
pub type VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
pub type VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
pub type VkValidationCacheCreateFlagsEXT = VkFlags;
pub type VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub type VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub type VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
pub type VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
pub type VkDeviceMemoryReportFlagsEXT = VkFlags;
pub type VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
pub type VkDescriptorBindingFlags = VkFlags;
pub type VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;

pub type VkConditionalRenderingFlagsEXT = VkFlags;
pub type VkResolveModeFlags = VkFlags;
pub type VkResolveModeFlagsKHR = VkResolveModeFlags;

pub type VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
pub type VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
pub type VkSwapchainImageUsageFlagsANDROID = VkFlags;
pub type VkToolPurposeFlags = VkFlags;
pub type VkToolPurposeFlagsEXT = VkToolPurposeFlags;

pub type VkSubmitFlags = VkFlags;
pub type VkSubmitFlagsKHR = VkSubmitFlags;

pub type VkImageFormatConstraintsFlagsFUCHSIA = VkFlags;
pub type VkImageConstraintsInfoFlagsFUCHSIA = VkFlags;
pub type VkGraphicsPipelineLibraryFlagsEXT = VkFlags;
pub type VkImageCompressionFlagsEXT = VkFlags;
pub type VkImageCompressionFixedRateFlagsEXT = VkFlags;
pub type VkExportMetalObjectTypeFlagsEXT = VkFlags;
pub type VkDeviceAddressBindingFlagsEXT = VkFlags;
pub type VkVideoCodecOperationFlagsKHR = VkFlags;
pub type VkVideoCapabilityFlagsKHR = VkFlags;
pub type VkVideoSessionCreateFlagsKHR = VkFlags;
pub type VkVideoSessionParametersCreateFlagsKHR = VkFlags;
pub type VkVideoBeginCodingFlagsKHR = VkFlags;
pub type VkVideoEndCodingFlagsKHR = VkFlags;
pub type VkVideoCodingControlFlagsKHR = VkFlags;
pub type VkVideoDecodeUsageFlagsKHR = VkFlags;
pub type VkVideoDecodeCapabilityFlagsKHR = VkFlags;
pub type VkVideoDecodeFlagsKHR = VkFlags;
pub type VkVideoDecodeH264PictureLayoutFlagsEXT = VkFlags;
pub type VkVideoEncodeFlagsKHR = VkFlags;
pub type VkVideoEncodeUsageFlagsKHR = VkFlags;
pub type VkVideoEncodeContentFlagsKHR = VkFlags;
pub type VkVideoEncodeCapabilityFlagsKHR = VkFlags;
pub type VkVideoEncodeRateControlFlagsKHR = VkFlags;
pub type VkVideoEncodeRateControlModeFlagsKHR = VkFlags;
pub type VkVideoChromaSubsamplingFlagsKHR = VkFlags;
pub type VkVideoComponentBitDepthFlagsKHR = VkFlags;
pub type VkVideoEncodeH264CapabilityFlagsEXT = VkFlags;
pub type VkVideoEncodeH264InputModeFlagsEXT = VkFlags;
pub type VkVideoEncodeH264OutputModeFlagsEXT = VkFlags;
pub type VkVideoEncodeH265CapabilityFlagsEXT = VkFlags;
pub type VkVideoEncodeH265InputModeFlagsEXT = VkFlags;
pub type VkVideoEncodeH265OutputModeFlagsEXT = VkFlags;
pub type VkVideoEncodeH265CtbSizeFlagsEXT = VkFlags;
pub type VkVideoEncodeH265TransformBlockSizeFlagsEXT = VkFlags;
dispatchable_handle!(VkInstance);
dispatchable_handle!(VkPhysicalDevice);
dispatchable_handle!(VkDevice);
dispatchable_handle!(VkQueue);
dispatchable_handle!(VkCommandBuffer);
non_dispatchable_handle!(VkDeviceMemory);
non_dispatchable_handle!(VkCommandPool);
non_dispatchable_handle!(VkBuffer);
non_dispatchable_handle!(VkBufferView);
non_dispatchable_handle!(VkImage);
non_dispatchable_handle!(VkImageView);
non_dispatchable_handle!(VkShaderModule);
non_dispatchable_handle!(VkPipeline);
non_dispatchable_handle!(VkPipelineLayout);
non_dispatchable_handle!(VkSampler);
non_dispatchable_handle!(VkDescriptorSet);
non_dispatchable_handle!(VkDescriptorSetLayout);
non_dispatchable_handle!(VkDescriptorPool);
non_dispatchable_handle!(VkFence);
non_dispatchable_handle!(VkSemaphore);
non_dispatchable_handle!(VkEvent);
non_dispatchable_handle!(VkQueryPool);
non_dispatchable_handle!(VkFramebuffer);
non_dispatchable_handle!(VkRenderPass);
non_dispatchable_handle!(VkPipelineCache);
non_dispatchable_handle!(VkIndirectCommandsLayoutNV);
non_dispatchable_handle!(VkDescriptorUpdateTemplate);
pub type VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;

non_dispatchable_handle!(VkSamplerYcbcrConversion);
pub type VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;

non_dispatchable_handle!(VkValidationCacheEXT);
non_dispatchable_handle!(VkAccelerationStructureKHR);
non_dispatchable_handle!(VkAccelerationStructureNV);
non_dispatchable_handle!(VkPerformanceConfigurationINTEL);
non_dispatchable_handle!(VkBufferCollectionFUCHSIA);
non_dispatchable_handle!(VkDeferredOperationKHR);
non_dispatchable_handle!(VkPrivateDataSlot);
pub type VkPrivateDataSlotEXT = VkPrivateDataSlot;

non_dispatchable_handle!(VkCuModuleNVX);
non_dispatchable_handle!(VkCuFunctionNVX);
non_dispatchable_handle!(VkOpticalFlowSessionNV);
non_dispatchable_handle!(VkMicromapEXT);
non_dispatchable_handle!(VkDisplayKHR);
non_dispatchable_handle!(VkDisplayModeKHR);
non_dispatchable_handle!(VkSurfaceKHR);
non_dispatchable_handle!(VkSwapchainKHR);
non_dispatchable_handle!(VkDebugReportCallbackEXT);
non_dispatchable_handle!(VkDebugUtilsMessengerEXT);
non_dispatchable_handle!(VkVideoSessionKHR);
non_dispatchable_handle!(VkVideoSessionParametersKHR);
#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBaseOutStructure
{
	pub sType: VkStructureType,
	pub pNext: *mut VkBaseOutStructure
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBaseInStructure
{
	pub sType: VkStructureType,
	pub pNext: *const VkBaseInStructure
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkOffset2D
{
	pub x: i32,
	pub y: i32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkOffset3D
{
	pub x: i32,
	pub y: i32,
	pub z: i32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExtent2D
{
	pub width: u32,
	pub height: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExtent3D
{
	pub width: u32,
	pub height: u32,
	pub depth: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkViewport
{
	pub x: f32,
	pub y: f32,
	pub width: f32,
	pub height: f32,
	pub minDepth: f32,
	pub maxDepth: f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRect2D
{
	pub offset: VkOffset2D,
	pub extent: VkExtent2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkClearRect
{
	pub rect: VkRect2D,
	pub baseArrayLayer: u32,
	pub layerCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkComponentMapping
{
	pub r: VkComponentSwizzle,
	pub g: VkComponentSwizzle,
	pub b: VkComponentSwizzle,
	pub a: VkComponentSwizzle
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceProperties
{
	pub apiVersion: u32,
	pub driverVersion: u32,
	pub vendorID: u32,
	pub deviceID: u32,
	pub deviceType: VkPhysicalDeviceType,
	pub deviceName: [i8; VK_MAX_PHYSICAL_DEVICE_NAME_SIZE],
	pub pipelineCacheUUID: [u8; VK_UUID_SIZE],
	pub limits: VkPhysicalDeviceLimits,
	pub sparseProperties: VkPhysicalDeviceSparseProperties
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExtensionProperties
{
	pub extensionName: [i8; VK_MAX_EXTENSION_NAME_SIZE],
	pub specVersion: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkLayerProperties
{
	pub layerName: [i8; VK_MAX_EXTENSION_NAME_SIZE],
	pub specVersion: u32,
	pub implementationVersion: u32,
	pub description: [i8; VK_MAX_DESCRIPTION_SIZE]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkApplicationInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pApplicationName: *const i8,
	pub applicationVersion: u32,
	pub pEngineName: *const i8,
	pub engineVersion: u32,
	pub apiVersion: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAllocationCallbacks
{
	pub pUserData: *mut c_void,
	pub pfnAllocation: PFN_vkAllocationFunction,
	pub pfnReallocation: PFN_vkReallocationFunction,
	pub pfnFree: PFN_vkFreeFunction,
	pub pfnInternalAllocation: PFN_vkInternalAllocationNotification,
	pub pfnInternalFree: PFN_vkInternalFreeNotification
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceQueueCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDeviceQueueCreateFlags,
	pub queueFamilyIndex: u32,
	pub queueCount: u32,
	pub pQueuePriorities: *const f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDeviceCreateFlags,
	pub queueCreateInfoCount: u32,
	pub pQueueCreateInfos: *const VkDeviceQueueCreateInfo,
	pub enabledLayerCount: u32,
	pub ppEnabledLayerNames: *const *const i8,
	pub enabledExtensionCount: u32,
	pub ppEnabledExtensionNames: *const *const i8,
	pub pEnabledFeatures: *const VkPhysicalDeviceFeatures
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkInstanceCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkInstanceCreateFlags,
	pub pApplicationInfo: *const VkApplicationInfo,
	pub enabledLayerCount: u32,
	pub ppEnabledLayerNames: *const *const i8,
	pub enabledExtensionCount: u32,
	pub ppEnabledExtensionNames: *const *const i8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkQueueFamilyProperties
{
	pub queueFlags: VkQueueFlags,
	pub queueCount: u32,
	pub timestampValidBits: u32,
	pub minImageTransferGranularity: VkExtent3D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMemoryProperties
{
	pub memoryTypeCount: u32,
	pub memoryTypes: [VkMemoryType; VK_MAX_MEMORY_TYPES],
	pub memoryHeapCount: u32,
	pub memoryHeaps: [VkMemoryHeap; VK_MAX_MEMORY_HEAPS]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryAllocateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub allocationSize: VkDeviceSize,
	pub memoryTypeIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryRequirements
{
	pub size: VkDeviceSize,
	pub alignment: VkDeviceSize,
	pub memoryTypeBits: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSparseImageFormatProperties
{
	pub aspectMask: VkImageAspectFlags,
	pub imageGranularity: VkExtent3D,
	pub flags: VkSparseImageFormatFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSparseImageMemoryRequirements
{
	pub formatProperties: VkSparseImageFormatProperties,
	pub imageMipTailFirstLod: u32,
	pub imageMipTailSize: VkDeviceSize,
	pub imageMipTailOffset: VkDeviceSize,
	pub imageMipTailStride: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryType
{
	pub propertyFlags: VkMemoryPropertyFlags,
	pub heapIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryHeap
{
	pub size: VkDeviceSize,
	pub flags: VkMemoryHeapFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMappedMemoryRange
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub memory: VkDeviceMemory,
	pub offset: VkDeviceSize,
	pub size: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFormatProperties
{
	pub linearTilingFeatures: VkFormatFeatureFlags,
	pub optimalTilingFeatures: VkFormatFeatureFlags,
	pub bufferFeatures: VkFormatFeatureFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageFormatProperties
{
	pub maxExtent: VkExtent3D,
	pub maxMipLevels: u32,
	pub maxArrayLayers: u32,
	pub sampleCounts: VkSampleCountFlags,
	pub maxResourceSize: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorBufferInfo
{
	pub buffer: VkBuffer,
	pub offset: VkDeviceSize,
	pub range: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorImageInfo
{
	pub sampler: VkSampler,
	pub imageView: VkImageView,
	pub imageLayout: VkImageLayout
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkWriteDescriptorSet
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub dstSet: VkDescriptorSet,
	pub dstBinding: u32,
	pub dstArrayElement: u32,
	pub descriptorCount: u32,
	pub descriptorType: VkDescriptorType,
	pub pImageInfo: *const VkDescriptorImageInfo,
	pub pBufferInfo: *const VkDescriptorBufferInfo,
	pub pTexelBufferView: *const VkBufferView
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyDescriptorSet
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcSet: VkDescriptorSet,
	pub srcBinding: u32,
	pub srcArrayElement: u32,
	pub dstSet: VkDescriptorSet,
	pub dstBinding: u32,
	pub dstArrayElement: u32,
	pub descriptorCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkBufferCreateFlags,
	pub size: VkDeviceSize,
	pub usage: VkBufferUsageFlags,
	pub sharingMode: VkSharingMode,
	pub queueFamilyIndexCount: u32,
	pub pQueueFamilyIndices: *const u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferViewCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkBufferViewCreateFlags,
	pub buffer: VkBuffer,
	pub format: VkFormat,
	pub offset: VkDeviceSize,
	pub range: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageSubresource
{
	pub aspectMask: VkImageAspectFlags,
	pub mipLevel: u32,
	pub arrayLayer: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageSubresourceLayers
{
	pub aspectMask: VkImageAspectFlags,
	pub mipLevel: u32,
	pub baseArrayLayer: u32,
	pub layerCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageSubresourceRange
{
	pub aspectMask: VkImageAspectFlags,
	pub baseMipLevel: u32,
	pub levelCount: u32,
	pub baseArrayLayer: u32,
	pub layerCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryBarrier
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcAccessMask: VkAccessFlags,
	pub dstAccessMask: VkAccessFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferMemoryBarrier
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcAccessMask: VkAccessFlags,
	pub dstAccessMask: VkAccessFlags,
	pub srcQueueFamilyIndex: u32,
	pub dstQueueFamilyIndex: u32,
	pub buffer: VkBuffer,
	pub offset: VkDeviceSize,
	pub size: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageMemoryBarrier
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcAccessMask: VkAccessFlags,
	pub dstAccessMask: VkAccessFlags,
	pub oldLayout: VkImageLayout,
	pub newLayout: VkImageLayout,
	pub srcQueueFamilyIndex: u32,
	pub dstQueueFamilyIndex: u32,
	pub image: VkImage,
	pub subresourceRange: VkImageSubresourceRange
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkImageCreateFlags,
	pub imageType: VkImageType,
	pub format: VkFormat,
	pub extent: VkExtent3D,
	pub mipLevels: u32,
	pub arrayLayers: u32,
	pub samples: VkSampleCountFlagBits,
	pub tiling: VkImageTiling,
	pub usage: VkImageUsageFlags,
	pub sharingMode: VkSharingMode,
	pub queueFamilyIndexCount: u32,
	pub pQueueFamilyIndices: *const u32,
	pub initialLayout: VkImageLayout
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubresourceLayout
{
	pub offset: VkDeviceSize,
	pub size: VkDeviceSize,
	pub rowPitch: VkDeviceSize,
	pub arrayPitch: VkDeviceSize,
	pub depthPitch: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageViewCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkImageViewCreateFlags,
	pub image: VkImage,
	pub viewType: VkImageViewType,
	pub format: VkFormat,
	pub components: VkComponentMapping,
	pub subresourceRange: VkImageSubresourceRange
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferCopy
{
	pub srcOffset: VkDeviceSize,
	pub dstOffset: VkDeviceSize,
	pub size: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSparseMemoryBind
{
	pub resourceOffset: VkDeviceSize,
	pub size: VkDeviceSize,
	pub memory: VkDeviceMemory,
	pub memoryOffset: VkDeviceSize,
	pub flags: VkSparseMemoryBindFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSparseImageMemoryBind
{
	pub subresource: VkImageSubresource,
	pub offset: VkOffset3D,
	pub extent: VkExtent3D,
	pub memory: VkDeviceMemory,
	pub memoryOffset: VkDeviceSize,
	pub flags: VkSparseMemoryBindFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSparseBufferMemoryBindInfo
{
	pub buffer: VkBuffer,
	pub bindCount: u32,
	pub pBinds: *const VkSparseMemoryBind
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSparseImageOpaqueMemoryBindInfo
{
	pub image: VkImage,
	pub bindCount: u32,
	pub pBinds: *const VkSparseMemoryBind
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSparseImageMemoryBindInfo
{
	pub image: VkImage,
	pub bindCount: u32,
	pub pBinds: *const VkSparseImageMemoryBind
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindSparseInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub waitSemaphoreCount: u32,
	pub pWaitSemaphores: *const VkSemaphore,
	pub bufferBindCount: u32,
	pub pBufferBinds: *const VkSparseBufferMemoryBindInfo,
	pub imageOpaqueBindCount: u32,
	pub pImageOpaqueBinds: *const VkSparseImageOpaqueMemoryBindInfo,
	pub imageBindCount: u32,
	pub pImageBinds: *const VkSparseImageMemoryBindInfo,
	pub signalSemaphoreCount: u32,
	pub pSignalSemaphores: *const VkSemaphore
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageCopy
{
	pub srcSubresource: VkImageSubresourceLayers,
	pub srcOffset: VkOffset3D,
	pub dstSubresource: VkImageSubresourceLayers,
	pub dstOffset: VkOffset3D,
	pub extent: VkExtent3D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageBlit
{
	pub srcSubresource: VkImageSubresourceLayers,
	pub srcOffsets: [VkOffset3D; 2],
	pub dstSubresource: VkImageSubresourceLayers,
	pub dstOffsets: [VkOffset3D; 2]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferImageCopy
{
	pub bufferOffset: VkDeviceSize,
	pub bufferRowLength: u32,
	pub bufferImageHeight: u32,
	pub imageSubresource: VkImageSubresourceLayers,
	pub imageOffset: VkOffset3D,
	pub imageExtent: VkExtent3D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyMemoryIndirectCommandNV
{
	pub srcAddress: VkDeviceAddress,
	pub dstAddress: VkDeviceAddress,
	pub size: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyMemoryToImageIndirectCommandNV
{
	pub srcAddress: VkDeviceAddress,
	pub bufferRowLength: u32,
	pub bufferImageHeight: u32,
	pub imageSubresource: VkImageSubresourceLayers,
	pub imageOffset: VkOffset3D,
	pub imageExtent: VkExtent3D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageResolve
{
	pub srcSubresource: VkImageSubresourceLayers,
	pub srcOffset: VkOffset3D,
	pub dstSubresource: VkImageSubresourceLayers,
	pub dstOffset: VkOffset3D,
	pub extent: VkExtent3D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkShaderModuleCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkShaderModuleCreateFlags,
	pub codeSize: usize,
	pub pCode: *const u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorSetLayoutBinding
{
	pub binding: u32,
	pub descriptorType: VkDescriptorType,
	pub descriptorCount: u32,
	pub stageFlags: VkShaderStageFlags,
	pub pImmutableSamplers: *const VkSampler
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorSetLayoutCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDescriptorSetLayoutCreateFlags,
	pub bindingCount: u32,
	pub pBindings: *const VkDescriptorSetLayoutBinding
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorPoolSize
{
	pub kind: VkDescriptorType,
	pub descriptorCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorPoolCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDescriptorPoolCreateFlags,
	pub maxSets: u32,
	pub poolSizeCount: u32,
	pub pPoolSizes: *const VkDescriptorPoolSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorSetAllocateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub descriptorPool: VkDescriptorPool,
	pub descriptorSetCount: u32,
	pub pSetLayouts: *const VkDescriptorSetLayout
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSpecializationMapEntry
{
	pub constantID: u32,
	pub offset: u32,
	pub size: usize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSpecializationInfo
{
	pub mapEntryCount: u32,
	pub pMapEntries: *const VkSpecializationMapEntry,
	pub dataSize: usize,
	pub pData: *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineShaderStageCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineShaderStageCreateFlags,
	pub stage: VkShaderStageFlagBits,
	pub module: VkShaderModule,
	pub pName: *const i8,
	pub pSpecializationInfo: *const VkSpecializationInfo
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkComputePipelineCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineCreateFlags,
	pub stage: VkPipelineShaderStageCreateInfo,
	pub layout: VkPipelineLayout,
	pub basePipelineHandle: VkPipeline,
	pub basePipelineIndex: i32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVertexInputBindingDescription
{
	pub binding: u32,
	pub stride: u32,
	pub inputRate: VkVertexInputRate
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVertexInputAttributeDescription
{
	pub location: u32,
	pub binding: u32,
	pub format: VkFormat,
	pub offset: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineVertexInputStateCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineVertexInputStateCreateFlags,
	pub vertexBindingDescriptionCount: u32,
	pub pVertexBindingDescriptions: *const VkVertexInputBindingDescription,
	pub vertexAttributeDescriptionCount: u32,
	pub pVertexAttributeDescriptions: *const VkVertexInputAttributeDescription
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineInputAssemblyStateCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineInputAssemblyStateCreateFlags,
	pub topology: VkPrimitiveTopology,
	pub primitiveRestartEnable: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineTessellationStateCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineTessellationStateCreateFlags,
	pub patchControlPoints: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineViewportStateCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineViewportStateCreateFlags,
	pub viewportCount: u32,
	pub pViewports: *const VkViewport,
	pub scissorCount: u32,
	pub pScissors: *const VkRect2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineRasterizationStateCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineRasterizationStateCreateFlags,
	pub depthClampEnable: VkBool32,
	pub rasterizerDiscardEnable: VkBool32,
	pub polygonMode: VkPolygonMode,
	pub cullMode: VkCullModeFlags,
	pub frontFace: VkFrontFace,
	pub depthBiasEnable: VkBool32,
	pub depthBiasConstantFactor: f32,
	pub depthBiasClamp: f32,
	pub depthBiasSlopeFactor: f32,
	pub lineWidth: f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineMultisampleStateCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineMultisampleStateCreateFlags,
	pub rasterizationSamples: VkSampleCountFlagBits,
	pub sampleShadingEnable: VkBool32,
	pub minSampleShading: f32,
	pub pSampleMask: *const VkSampleMask,
	pub alphaToCoverageEnable: VkBool32,
	pub alphaToOneEnable: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineColorBlendAttachmentState
{
	pub blendEnable: VkBool32,
	pub srcColorBlendFactor: VkBlendFactor,
	pub dstColorBlendFactor: VkBlendFactor,
	pub colorBlendOp: VkBlendOp,
	pub srcAlphaBlendFactor: VkBlendFactor,
	pub dstAlphaBlendFactor: VkBlendFactor,
	pub alphaBlendOp: VkBlendOp,
	pub colorWriteMask: VkColorComponentFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineColorBlendStateCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineColorBlendStateCreateFlags,
	pub logicOpEnable: VkBool32,
	pub logicOp: VkLogicOp,
	pub attachmentCount: u32,
	pub pAttachments: *const VkPipelineColorBlendAttachmentState,
	pub blendConstants: [f32; 4]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineDynamicStateCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineDynamicStateCreateFlags,
	pub dynamicStateCount: u32,
	pub pDynamicStates: *const VkDynamicState
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkStencilOpState
{
	pub failOp: VkStencilOp,
	pub passOp: VkStencilOp,
	pub depthFailOp: VkStencilOp,
	pub compareOp: VkCompareOp,
	pub compareMask: u32,
	pub writeMask: u32,
	pub reference: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineDepthStencilStateCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineDepthStencilStateCreateFlags,
	pub depthTestEnable: VkBool32,
	pub depthWriteEnable: VkBool32,
	pub depthCompareOp: VkCompareOp,
	pub depthBoundsTestEnable: VkBool32,
	pub stencilTestEnable: VkBool32,
	pub front: VkStencilOpState,
	pub back: VkStencilOpState,
	pub minDepthBounds: f32,
	pub maxDepthBounds: f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkGraphicsPipelineCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineCreateFlags,
	pub stageCount: u32,
	pub pStages: *const VkPipelineShaderStageCreateInfo,
	pub pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
	pub pInputAssemblyState: *const VkPipelineInputAssemblyStateCreateInfo,
	pub pTessellationState: *const VkPipelineTessellationStateCreateInfo,
	pub pViewportState: *const VkPipelineViewportStateCreateInfo,
	pub pRasterizationState: *const VkPipelineRasterizationStateCreateInfo,
	pub pMultisampleState: *const VkPipelineMultisampleStateCreateInfo,
	pub pDepthStencilState: *const VkPipelineDepthStencilStateCreateInfo,
	pub pColorBlendState: *const VkPipelineColorBlendStateCreateInfo,
	pub pDynamicState: *const VkPipelineDynamicStateCreateInfo,
	pub layout: VkPipelineLayout,
	pub renderPass: VkRenderPass,
	pub subpass: u32,
	pub basePipelineHandle: VkPipeline,
	pub basePipelineIndex: i32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineCacheCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineCacheCreateFlags,
	pub initialDataSize: usize,
	pub pInitialData: *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineCacheHeaderVersionOne
{
	pub headerSize: u32,
	pub headerVersion: VkPipelineCacheHeaderVersion,
	pub vendorID: u32,
	pub deviceID: u32,
	pub pipelineCacheUUID: [u8; VK_UUID_SIZE]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPushConstantRange
{
	pub stageFlags: VkShaderStageFlags,
	pub offset: u32,
	pub size: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineLayoutCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineLayoutCreateFlags,
	pub setLayoutCount: u32,
	pub pSetLayouts: *const VkDescriptorSetLayout,
	pub pushConstantRangeCount: u32,
	pub pPushConstantRanges: *const VkPushConstantRange
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSamplerCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkSamplerCreateFlags,
	pub magFilter: VkFilter,
	pub minFilter: VkFilter,
	pub mipmapMode: VkSamplerMipmapMode,
	pub addressModeU: VkSamplerAddressMode,
	pub addressModeV: VkSamplerAddressMode,
	pub addressModeW: VkSamplerAddressMode,
	pub mipLodBias: f32,
	pub anisotropyEnable: VkBool32,
	pub maxAnisotropy: f32,
	pub compareEnable: VkBool32,
	pub compareOp: VkCompareOp,
	pub minLod: f32,
	pub maxLod: f32,
	pub borderColor: VkBorderColor,
	pub unnormalizedCoordinates: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCommandPoolCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkCommandPoolCreateFlags,
	pub queueFamilyIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCommandBufferAllocateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub commandPool: VkCommandPool,
	pub level: VkCommandBufferLevel,
	pub commandBufferCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCommandBufferInheritanceInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub renderPass: VkRenderPass,
	pub subpass: u32,
	pub framebuffer: VkFramebuffer,
	pub occlusionQueryEnable: VkBool32,
	pub queryFlags: VkQueryControlFlags,
	pub pipelineStatistics: VkQueryPipelineStatisticFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCommandBufferBeginInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkCommandBufferUsageFlags,
	pub pInheritanceInfo: *const VkCommandBufferInheritanceInfo
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassBeginInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub renderPass: VkRenderPass,
	pub framebuffer: VkFramebuffer,
	pub renderArea: VkRect2D,
	pub clearValueCount: u32,
	pub pClearValues: *const VkClearValue
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkClearDepthStencilValue
{
	pub depth: f32,
	pub stencil: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkClearAttachment
{
	pub aspectMask: VkImageAspectFlags,
	pub colorAttachment: u32,
	pub clearValue: VkClearValue
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAttachmentDescription
{
	pub flags: VkAttachmentDescriptionFlags,
	pub format: VkFormat,
	pub samples: VkSampleCountFlagBits,
	pub loadOp: VkAttachmentLoadOp,
	pub storeOp: VkAttachmentStoreOp,
	pub stencilLoadOp: VkAttachmentLoadOp,
	pub stencilStoreOp: VkAttachmentStoreOp,
	pub initialLayout: VkImageLayout,
	pub finalLayout: VkImageLayout
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAttachmentReference
{
	pub attachment: u32,
	pub layout: VkImageLayout
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubpassDescription
{
	pub flags: VkSubpassDescriptionFlags,
	pub pipelineBindPoint: VkPipelineBindPoint,
	pub inputAttachmentCount: u32,
	pub pInputAttachments: *const VkAttachmentReference,
	pub colorAttachmentCount: u32,
	pub pColorAttachments: *const VkAttachmentReference,
	pub pResolveAttachments: *const VkAttachmentReference,
	pub pDepthStencilAttachment: *const VkAttachmentReference,
	pub preserveAttachmentCount: u32,
	pub pPreserveAttachments: *const u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubpassDependency
{
	pub srcSubpass: u32,
	pub dstSubpass: u32,
	pub srcStageMask: VkPipelineStageFlags,
	pub dstStageMask: VkPipelineStageFlags,
	pub srcAccessMask: VkAccessFlags,
	pub dstAccessMask: VkAccessFlags,
	pub dependencyFlags: VkDependencyFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkRenderPassCreateFlags,
	pub attachmentCount: u32,
	pub pAttachments: *const VkAttachmentDescription,
	pub subpassCount: u32,
	pub pSubpasses: *const VkSubpassDescription,
	pub dependencyCount: u32,
	pub pDependencies: *const VkSubpassDependency
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkEventCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkEventCreateFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFenceCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkFenceCreateFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFeatures
{
	pub robustBufferAccess: VkBool32,
	pub fullDrawIndexUint32: VkBool32,
	pub imageCubeArray: VkBool32,
	pub independentBlend: VkBool32,
	pub geometryShader: VkBool32,
	pub tessellationShader: VkBool32,
	pub sampleRateShading: VkBool32,
	pub dualSrcBlend: VkBool32,
	pub logicOp: VkBool32,
	pub multiDrawIndirect: VkBool32,
	pub drawIndirectFirstInstance: VkBool32,
	pub depthClamp: VkBool32,
	pub depthBiasClamp: VkBool32,
	pub fillModeNonSolid: VkBool32,
	pub depthBounds: VkBool32,
	pub wideLines: VkBool32,
	pub largePoints: VkBool32,
	pub alphaToOne: VkBool32,
	pub multiViewport: VkBool32,
	pub samplerAnisotropy: VkBool32,
	pub textureCompressionETC2: VkBool32,
	pub textureCompressionASTC_LDR: VkBool32,
	pub textureCompressionBC: VkBool32,
	pub occlusionQueryPrecise: VkBool32,
	pub pipelineStatisticsQuery: VkBool32,
	pub vertexPipelineStoresAndAtomics: VkBool32,
	pub fragmentStoresAndAtomics: VkBool32,
	pub shaderTessellationAndGeometryPointSize: VkBool32,
	pub shaderImageGatherExtended: VkBool32,
	pub shaderStorageImageExtendedFormats: VkBool32,
	pub shaderStorageImageMultisample: VkBool32,
	pub shaderStorageImageReadWithoutFormat: VkBool32,
	pub shaderStorageImageWriteWithoutFormat: VkBool32,
	pub shaderUniformBufferArrayDynamicIndexing: VkBool32,
	pub shaderSampledImageArrayDynamicIndexing: VkBool32,
	pub shaderStorageBufferArrayDynamicIndexing: VkBool32,
	pub shaderStorageImageArrayDynamicIndexing: VkBool32,
	pub shaderClipDistance: VkBool32,
	pub shaderCullDistance: VkBool32,
	pub shaderFloat64: VkBool32,
	pub shaderInt64: VkBool32,
	pub shaderInt16: VkBool32,
	pub shaderResourceResidency: VkBool32,
	pub shaderResourceMinLod: VkBool32,
	pub sparseBinding: VkBool32,
	pub sparseResidencyBuffer: VkBool32,
	pub sparseResidencyImage2D: VkBool32,
	pub sparseResidencyImage3D: VkBool32,
	pub sparseResidency2Samples: VkBool32,
	pub sparseResidency4Samples: VkBool32,
	pub sparseResidency8Samples: VkBool32,
	pub sparseResidency16Samples: VkBool32,
	pub sparseResidencyAliased: VkBool32,
	pub variableMultisampleRate: VkBool32,
	pub inheritedQueries: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSparseProperties
{
	pub residencyStandard2DBlockShape: VkBool32,
	pub residencyStandard2DMultisampleBlockShape: VkBool32,
	pub residencyStandard3DBlockShape: VkBool32,
	pub residencyAlignedMipSize: VkBool32,
	pub residencyNonResidentStrict: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceLimits
{
	pub maxImageDimension1D: u32,
	pub maxImageDimension2D: u32,
	pub maxImageDimension3D: u32,
	pub maxImageDimensionCube: u32,
	pub maxImageArrayLayers: u32,
	pub maxTexelBufferElements: u32,
	pub maxUniformBufferRange: u32,
	pub maxStorageBufferRange: u32,
	pub maxPushConstantsSize: u32,
	pub maxMemoryAllocationCount: u32,
	pub maxSamplerAllocationCount: u32,
	pub bufferImageGranularity: VkDeviceSize,
	pub sparseAddressSpaceSize: VkDeviceSize,
	pub maxBoundDescriptorSets: u32,
	pub maxPerStageDescriptorSamplers: u32,
	pub maxPerStageDescriptorUniformBuffers: u32,
	pub maxPerStageDescriptorStorageBuffers: u32,
	pub maxPerStageDescriptorSampledImages: u32,
	pub maxPerStageDescriptorStorageImages: u32,
	pub maxPerStageDescriptorInputAttachments: u32,
	pub maxPerStageResources: u32,
	pub maxDescriptorSetSamplers: u32,
	pub maxDescriptorSetUniformBuffers: u32,
	pub maxDescriptorSetUniformBuffersDynamic: u32,
	pub maxDescriptorSetStorageBuffers: u32,
	pub maxDescriptorSetStorageBuffersDynamic: u32,
	pub maxDescriptorSetSampledImages: u32,
	pub maxDescriptorSetStorageImages: u32,
	pub maxDescriptorSetInputAttachments: u32,
	pub maxVertexInputAttributes: u32,
	pub maxVertexInputBindings: u32,
	pub maxVertexInputAttributeOffset: u32,
	pub maxVertexInputBindingStride: u32,
	pub maxVertexOutputComponents: u32,
	pub maxTessellationGenerationLevel: u32,
	pub maxTessellationPatchSize: u32,
	pub maxTessellationControlPerVertexInputComponents: u32,
	pub maxTessellationControlPerVertexOutputComponents: u32,
	pub maxTessellationControlPerPatchOutputComponents: u32,
	pub maxTessellationControlTotalOutputComponents: u32,
	pub maxTessellationEvaluationInputComponents: u32,
	pub maxTessellationEvaluationOutputComponents: u32,
	pub maxGeometryShaderInvocations: u32,
	pub maxGeometryInputComponents: u32,
	pub maxGeometryOutputComponents: u32,
	pub maxGeometryOutputVertices: u32,
	pub maxGeometryTotalOutputComponents: u32,
	pub maxFragmentInputComponents: u32,
	pub maxFragmentOutputAttachments: u32,
	pub maxFragmentDualSrcAttachments: u32,
	pub maxFragmentCombinedOutputResources: u32,
	pub maxComputeSharedMemorySize: u32,
	pub maxComputeWorkGroupCount: [u32; 3],
	pub maxComputeWorkGroupInvocations: u32,
	pub maxComputeWorkGroupSize: [u32; 3],
	pub subPixelPrecisionBits: u32,
	pub subTexelPrecisionBits: u32,
	pub mipmapPrecisionBits: u32,
	pub maxDrawIndexedIndexValue: u32,
	pub maxDrawIndirectCount: u32,
	pub maxSamplerLodBias: f32,
	pub maxSamplerAnisotropy: f32,
	pub maxViewports: u32,
	pub maxViewportDimensions: [u32; 2],
	pub viewportBoundsRange: [f32; 2],
	pub viewportSubPixelBits: u32,
	pub minMemoryMapAlignment: usize,
	pub minTexelBufferOffsetAlignment: VkDeviceSize,
	pub minUniformBufferOffsetAlignment: VkDeviceSize,
	pub minStorageBufferOffsetAlignment: VkDeviceSize,
	pub minTexelOffset: i32,
	pub maxTexelOffset: u32,
	pub minTexelGatherOffset: i32,
	pub maxTexelGatherOffset: u32,
	pub minInterpolationOffset: f32,
	pub maxInterpolationOffset: f32,
	pub subPixelInterpolationOffsetBits: u32,
	pub maxFramebufferWidth: u32,
	pub maxFramebufferHeight: u32,
	pub maxFramebufferLayers: u32,
	pub framebufferColorSampleCounts: VkSampleCountFlags,
	pub framebufferDepthSampleCounts: VkSampleCountFlags,
	pub framebufferStencilSampleCounts: VkSampleCountFlags,
	pub framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
	pub maxColorAttachments: u32,
	pub sampledImageColorSampleCounts: VkSampleCountFlags,
	pub sampledImageIntegerSampleCounts: VkSampleCountFlags,
	pub sampledImageDepthSampleCounts: VkSampleCountFlags,
	pub sampledImageStencilSampleCounts: VkSampleCountFlags,
	pub storageImageSampleCounts: VkSampleCountFlags,
	pub maxSampleMaskWords: u32,
	pub timestampComputeAndGraphics: VkBool32,
	pub timestampPeriod: f32,
	pub maxClipDistances: u32,
	pub maxCullDistances: u32,
	pub maxCombinedClipAndCullDistances: u32,
	pub discreteQueuePriorities: u32,
	pub pointSizeRange: [f32; 2],
	pub lineWidthRange: [f32; 2],
	pub pointSizeGranularity: f32,
	pub lineWidthGranularity: f32,
	pub strictLines: VkBool32,
	pub standardSampleLocations: VkBool32,
	pub optimalBufferCopyOffsetAlignment: VkDeviceSize,
	pub optimalBufferCopyRowPitchAlignment: VkDeviceSize,
	pub nonCoherentAtomSize: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSemaphoreCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkSemaphoreCreateFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkQueryPoolCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkQueryPoolCreateFlags,
	pub queryType: VkQueryType,
	pub queryCount: u32,
	pub pipelineStatistics: VkQueryPipelineStatisticFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFramebufferCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkFramebufferCreateFlags,
	pub renderPass: VkRenderPass,
	pub attachmentCount: u32,
	pub pAttachments: *const VkImageView,
	pub width: u32,
	pub height: u32,
	pub layers: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDrawIndirectCommand
{
	pub vertexCount: u32,
	pub instanceCount: u32,
	pub firstVertex: u32,
	pub firstInstance: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDrawIndexedIndirectCommand
{
	pub indexCount: u32,
	pub instanceCount: u32,
	pub firstIndex: u32,
	pub vertexOffset: i32,
	pub firstInstance: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDispatchIndirectCommand
{
	pub x: u32,
	pub y: u32,
	pub z: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMultiDrawInfoEXT
{
	pub firstVertex: u32,
	pub vertexCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMultiDrawIndexedInfoEXT
{
	pub firstIndex: u32,
	pub indexCount: u32,
	pub vertexOffset: i32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubmitInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub waitSemaphoreCount: u32,
	pub pWaitSemaphores: *const VkSemaphore,
	pub pWaitDstStageMask: *const VkPipelineStageFlags,
	pub commandBufferCount: u32,
	pub pCommandBuffers: *const VkCommandBuffer,
	pub signalSemaphoreCount: u32,
	pub pSignalSemaphores: *const VkSemaphore
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayPropertiesKHR
{
	pub display: VkDisplayKHR,
	pub displayName: *const i8,
	pub physicalDimensions: VkExtent2D,
	pub physicalResolution: VkExtent2D,
	pub supportedTransforms: VkSurfaceTransformFlagsKHR,
	pub planeReorderPossible: VkBool32,
	pub persistentContent: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayPlanePropertiesKHR
{
	pub currentDisplay: VkDisplayKHR,
	pub currentStackIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayModeParametersKHR
{
	pub visibleRegion: VkExtent2D,
	pub refreshRate: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayModePropertiesKHR
{
	pub displayMode: VkDisplayModeKHR,
	pub parameters: VkDisplayModeParametersKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayModeCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDisplayModeCreateFlagsKHR,
	pub parameters: VkDisplayModeParametersKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayPlaneCapabilitiesKHR
{
	pub supportedAlpha: VkDisplayPlaneAlphaFlagsKHR,
	pub minSrcPosition: VkOffset2D,
	pub maxSrcPosition: VkOffset2D,
	pub minSrcExtent: VkExtent2D,
	pub maxSrcExtent: VkExtent2D,
	pub minDstPosition: VkOffset2D,
	pub maxDstPosition: VkOffset2D,
	pub minDstExtent: VkExtent2D,
	pub maxDstExtent: VkExtent2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplaySurfaceCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDisplaySurfaceCreateFlagsKHR,
	pub displayMode: VkDisplayModeKHR,
	pub planeIndex: u32,
	pub planeStackIndex: u32,
	pub transform: VkSurfaceTransformFlagBitsKHR,
	pub globalAlpha: f32,
	pub alphaMode: VkDisplayPlaneAlphaFlagBitsKHR,
	pub imageExtent: VkExtent2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayPresentInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcRect: VkRect2D,
	pub dstRect: VkRect2D,
	pub persistent: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSurfaceCapabilitiesKHR
{
	pub minImageCount: u32,
	pub maxImageCount: u32,
	pub currentExtent: VkExtent2D,
	pub minImageExtent: VkExtent2D,
	pub maxImageExtent: VkExtent2D,
	pub maxImageArrayLayers: u32,
	pub supportedTransforms: VkSurfaceTransformFlagsKHR,
	pub currentTransform: VkSurfaceTransformFlagBitsKHR,
	pub supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
	pub supportedUsageFlags: VkImageUsageFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAndroidSurfaceCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkAndroidSurfaceCreateFlagsKHR,
	pub window: *mut ANativeWindow
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkViSurfaceCreateInfoNN
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkViSurfaceCreateFlagsNN,
	pub window: *mut c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkWaylandSurfaceCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkWaylandSurfaceCreateFlagsKHR,
	pub display: *mut wl_display,
	pub surface: *mut wl_surface
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkWin32SurfaceCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkWin32SurfaceCreateFlagsKHR,
	pub hinstance: HINSTANCE,
	pub hwnd: HWND
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkXlibSurfaceCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkXlibSurfaceCreateFlagsKHR,
	pub dpy: *mut Display,
	pub window: Window
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkXcbSurfaceCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkXcbSurfaceCreateFlagsKHR,
	pub connection: *mut xcb_connection_t,
	pub window: xcb_window_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDirectFBSurfaceCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDirectFBSurfaceCreateFlagsEXT,
	pub dfb: *mut IDirectFB,
	pub surface: *mut IDirectFBSurface
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImagePipeSurfaceCreateInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkImagePipeSurfaceCreateFlagsFUCHSIA,
	pub imagePipeHandle: zx_handle_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkStreamDescriptorSurfaceCreateInfoGGP
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkStreamDescriptorSurfaceCreateFlagsGGP,
	pub streamDescriptor: GgpStreamDescriptor
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkScreenSurfaceCreateInfoQNX
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkScreenSurfaceCreateFlagsQNX,
	pub context: *mut _screen_context,
	pub window: *mut _screen_window
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSurfaceFormatKHR
{
	pub format: VkFormat,
	pub colorSpace: VkColorSpaceKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSwapchainCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkSwapchainCreateFlagsKHR,
	pub surface: VkSurfaceKHR,
	pub minImageCount: u32,
	pub imageFormat: VkFormat,
	pub imageColorSpace: VkColorSpaceKHR,
	pub imageExtent: VkExtent2D,
	pub imageArrayLayers: u32,
	pub imageUsage: VkImageUsageFlags,
	pub imageSharingMode: VkSharingMode,
	pub queueFamilyIndexCount: u32,
	pub pQueueFamilyIndices: *const u32,
	pub preTransform: VkSurfaceTransformFlagBitsKHR,
	pub compositeAlpha: VkCompositeAlphaFlagBitsKHR,
	pub presentMode: VkPresentModeKHR,
	pub clipped: VkBool32,
	pub oldSwapchain: VkSwapchainKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPresentInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub waitSemaphoreCount: u32,
	pub pWaitSemaphores: *const VkSemaphore,
	pub swapchainCount: u32,
	pub pSwapchains: *const VkSwapchainKHR,
	pub pImageIndices: *const u32,
	pub pResults: *mut VkResult
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDebugReportCallbackCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDebugReportFlagsEXT,
	pub pfnCallback: PFN_vkDebugReportCallbackEXT,
	pub pUserData: *mut c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkValidationFlagsEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub disabledValidationCheckCount: u32,
	pub pDisabledValidationChecks: *const VkValidationCheckEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkValidationFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub enabledValidationFeatureCount: u32,
	pub pEnabledValidationFeatures: *const VkValidationFeatureEnableEXT,
	pub disabledValidationFeatureCount: u32,
	pub pDisabledValidationFeatures: *const VkValidationFeatureDisableEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineRasterizationStateRasterizationOrderAMD
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub rasterizationOrder: VkRasterizationOrderAMD
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDebugMarkerObjectNameInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub objectType: VkDebugReportObjectTypeEXT,
	pub object: uint64_t,
	pub pObjectName: *const i8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDebugMarkerObjectTagInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub objectType: VkDebugReportObjectTypeEXT,
	pub object: uint64_t,
	pub tagName: uint64_t,
	pub tagSize: usize,
	pub pTag: *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDebugMarkerMarkerInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pMarkerName: *const i8,
	pub color: [f32; 4]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDedicatedAllocationImageCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub dedicatedAllocation: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDedicatedAllocationBufferCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub dedicatedAllocation: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDedicatedAllocationMemoryAllocateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub image: VkImage,
	pub buffer: VkBuffer
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExternalImageFormatPropertiesNV
{
	pub imageFormatProperties: VkImageFormatProperties,
	pub externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV,
	pub exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
	pub compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExternalMemoryImageCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleTypes: VkExternalMemoryHandleTypeFlagsNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMemoryAllocateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleTypes: VkExternalMemoryHandleTypeFlagsNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportMemoryWin32HandleInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleType: VkExternalMemoryHandleTypeFlagsNV,
	pub handle: HANDLE
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMemoryWin32HandleInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pAttributes: *const SECURITY_ATTRIBUTES,
	pub dwAccess: DWORD
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkWin32KeyedMutexAcquireReleaseInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub acquireCount: u32,
	pub pAcquireSyncs: *const VkDeviceMemory,
	pub pAcquireKeys: *const uint64_t,
	pub pAcquireTimeoutMilliseconds: *const u32,
	pub releaseCount: u32,
	pub pReleaseSyncs: *const VkDeviceMemory,
	pub pReleaseKeys: *const uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub deviceGeneratedCommands: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDevicePrivateDataCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub privateDataSlotRequestCount: u32
}

pub type VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPrivateDataSlotCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPrivateDataSlotCreateFlags
}

pub type VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePrivateDataFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub privateData: VkBool32
}

pub type VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxGraphicsShaderGroupCount: u32,
	pub maxIndirectSequenceCount: u32,
	pub maxIndirectCommandsTokenCount: u32,
	pub maxIndirectCommandsStreamCount: u32,
	pub maxIndirectCommandsTokenOffset: u32,
	pub maxIndirectCommandsStreamStride: u32,
	pub minSequencesCountBufferOffsetAlignment: u32,
	pub minSequencesIndexBufferOffsetAlignment: u32,
	pub minIndirectCommandsBufferOffsetAlignment: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMultiDrawPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxMultiDrawCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkGraphicsShaderGroupCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub stageCount: u32,
	pub pStages: *const VkPipelineShaderStageCreateInfo,
	pub pVertexInputState: *const VkPipelineVertexInputStateCreateInfo,
	pub pTessellationState: *const VkPipelineTessellationStateCreateInfo
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkGraphicsPipelineShaderGroupsCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub groupCount: u32,
	pub pGroups: *const VkGraphicsShaderGroupCreateInfoNV,
	pub pipelineCount: u32,
	pub pPipelines: *const VkPipeline
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindShaderGroupIndirectCommandNV
{
	pub groupIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindIndexBufferIndirectCommandNV
{
	pub bufferAddress: VkDeviceAddress,
	pub size: u32,
	pub indexType: VkIndexType
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindVertexBufferIndirectCommandNV
{
	pub bufferAddress: VkDeviceAddress,
	pub size: u32,
	pub stride: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSetStateFlagsIndirectCommandNV
{
	pub data: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkIndirectCommandsStreamNV
{
	pub buffer: VkBuffer,
	pub offset: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkIndirectCommandsLayoutTokenNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub tokenType: VkIndirectCommandsTokenTypeNV,
	pub stream: u32,
	pub offset: u32,
	pub vertexBindingUnit: u32,
	pub vertexDynamicStride: VkBool32,
	pub pushconstantPipelineLayout: VkPipelineLayout,
	pub pushconstantShaderStageFlags: VkShaderStageFlags,
	pub pushconstantOffset: u32,
	pub pushconstantSize: u32,
	pub indirectStateFlags: VkIndirectStateFlagsNV,
	pub indexTypeCount: u32,
	pub pIndexTypes: *const VkIndexType,
	pub pIndexTypeValues: *const u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkIndirectCommandsLayoutCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkIndirectCommandsLayoutUsageFlagsNV,
	pub pipelineBindPoint: VkPipelineBindPoint,
	pub tokenCount: u32,
	pub pTokens: *const VkIndirectCommandsLayoutTokenNV,
	pub streamCount: u32,
	pub pStreamStrides: *const u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkGeneratedCommandsInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pipelineBindPoint: VkPipelineBindPoint,
	pub pipeline: VkPipeline,
	pub indirectCommandsLayout: VkIndirectCommandsLayoutNV,
	pub streamCount: u32,
	pub pStreams: *const VkIndirectCommandsStreamNV,
	pub sequencesCount: u32,
	pub preprocessBuffer: VkBuffer,
	pub preprocessOffset: VkDeviceSize,
	pub preprocessSize: VkDeviceSize,
	pub sequencesCountBuffer: VkBuffer,
	pub sequencesCountOffset: VkDeviceSize,
	pub sequencesIndexBuffer: VkBuffer,
	pub sequencesIndexOffset: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkGeneratedCommandsMemoryRequirementsInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pipelineBindPoint: VkPipelineBindPoint,
	pub pipeline: VkPipeline,
	pub indirectCommandsLayout: VkIndirectCommandsLayoutNV,
	pub maxSequencesCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFeatures2
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub features: VkPhysicalDeviceFeatures
}

pub type VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceProperties2
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub properties: VkPhysicalDeviceProperties
}

pub type VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFormatProperties2
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub formatProperties: VkFormatProperties
}

pub type VkFormatProperties2KHR = VkFormatProperties2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageFormatProperties2
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub imageFormatProperties: VkImageFormatProperties
}

pub type VkImageFormatProperties2KHR = VkImageFormatProperties2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceImageFormatInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub format: VkFormat,
	pub kind: VkImageType,
	pub tiling: VkImageTiling,
	pub usage: VkImageUsageFlags,
	pub flags: VkImageCreateFlags
}

pub type VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkQueueFamilyProperties2
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub queueFamilyProperties: VkQueueFamilyProperties
}

pub type VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMemoryProperties2
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub memoryProperties: VkPhysicalDeviceMemoryProperties
}

pub type VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSparseImageFormatProperties2
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub properties: VkSparseImageFormatProperties
}

pub type VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSparseImageFormatInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub format: VkFormat,
	pub kind: VkImageType,
	pub samples: VkSampleCountFlagBits,
	pub usage: VkImageUsageFlags,
	pub tiling: VkImageTiling
}

pub type VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePushDescriptorPropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxPushDescriptors: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkConformanceVersion
{
	pub major: u8,
	pub minor: u8,
	pub subminor: u8,
	pub patch: u8
}

pub type VkConformanceVersionKHR = VkConformanceVersion;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDriverProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub driverID: VkDriverId,
	pub driverName: [i8; VK_MAX_DRIVER_NAME_SIZE],
	pub driverInfo: [i8; VK_MAX_DRIVER_INFO_SIZE],
	pub conformanceVersion: VkConformanceVersion
}

pub type VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPresentRegionsKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub swapchainCount: u32,
	pub pRegions: *const VkPresentRegionKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPresentRegionKHR
{
	pub rectangleCount: u32,
	pub pRectangles: *const VkRectLayerKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRectLayerKHR
{
	pub offset: VkOffset2D,
	pub extent: VkExtent2D,
	pub layer: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVariablePointersFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub variablePointersStorageBuffer: VkBool32,
	pub variablePointers: VkBool32
}

pub type VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;

pub type VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;

pub type VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExternalMemoryProperties
{
	pub externalMemoryFeatures: VkExternalMemoryFeatureFlags,
	pub exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
	pub compatibleHandleTypes: VkExternalMemoryHandleTypeFlags
}

pub type VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceExternalImageFormatInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleType: VkExternalMemoryHandleTypeFlagBits
}

pub type VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExternalImageFormatProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub externalMemoryProperties: VkExternalMemoryProperties
}

pub type VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceExternalBufferInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkBufferCreateFlags,
	pub usage: VkBufferUsageFlags,
	pub handleType: VkExternalMemoryHandleTypeFlagBits
}

pub type VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExternalBufferProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub externalMemoryProperties: VkExternalMemoryProperties
}

pub type VkExternalBufferPropertiesKHR = VkExternalBufferProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceIDProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub deviceUUID: [u8; VK_UUID_SIZE],
	pub driverUUID: [u8; VK_UUID_SIZE],
	pub deviceLUID: [u8; VK_LUID_SIZE],
	pub deviceNodeMask: u32,
	pub deviceLUIDValid: VkBool32
}

pub type VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExternalMemoryImageCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleTypes: VkExternalMemoryHandleTypeFlags
}

pub type VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExternalMemoryBufferCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleTypes: VkExternalMemoryHandleTypeFlags
}

pub type VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMemoryAllocateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleTypes: VkExternalMemoryHandleTypeFlags
}

pub type VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportMemoryWin32HandleInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleType: VkExternalMemoryHandleTypeFlagBits,
	pub handle: HANDLE,
	pub name: LPCWSTR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMemoryWin32HandleInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pAttributes: *const SECURITY_ATTRIBUTES,
	pub dwAccess: DWORD,
	pub name: LPCWSTR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportMemoryZirconHandleInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleType: VkExternalMemoryHandleTypeFlagBits,
	pub handle: zx_handle_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryZirconHandlePropertiesFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub memoryTypeBits: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryGetZirconHandleInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub memory: VkDeviceMemory,
	pub handleType: VkExternalMemoryHandleTypeFlagBits
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryWin32HandlePropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub memoryTypeBits: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryGetWin32HandleInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub memory: VkDeviceMemory,
	pub handleType: VkExternalMemoryHandleTypeFlagBits
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportMemoryFdInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleType: VkExternalMemoryHandleTypeFlagBits,
	pub fd: int
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryFdPropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub memoryTypeBits: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryGetFdInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub memory: VkDeviceMemory,
	pub handleType: VkExternalMemoryHandleTypeFlagBits
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkWin32KeyedMutexAcquireReleaseInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub acquireCount: u32,
	pub pAcquireSyncs: *const VkDeviceMemory,
	pub pAcquireKeys: *const uint64_t,
	pub pAcquireTimeouts: *const u32,
	pub releaseCount: u32,
	pub pReleaseSyncs: *const VkDeviceMemory,
	pub pReleaseKeys: *const uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceExternalSemaphoreInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleType: VkExternalSemaphoreHandleTypeFlagBits
}

pub type VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExternalSemaphoreProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
	pub compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
	pub externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags
}

pub type VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportSemaphoreCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleTypes: VkExternalSemaphoreHandleTypeFlags
}

pub type VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportSemaphoreWin32HandleInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub semaphore: VkSemaphore,
	pub flags: VkSemaphoreImportFlags,
	pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
	pub handle: HANDLE,
	pub name: LPCWSTR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportSemaphoreWin32HandleInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pAttributes: *const SECURITY_ATTRIBUTES,
	pub dwAccess: DWORD,
	pub name: LPCWSTR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkD3D12FenceSubmitInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub waitSemaphoreValuesCount: u32,
	pub pWaitSemaphoreValues: *const uint64_t,
	pub signalSemaphoreValuesCount: u32,
	pub pSignalSemaphoreValues: *const uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSemaphoreGetWin32HandleInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub semaphore: VkSemaphore,
	pub handleType: VkExternalSemaphoreHandleTypeFlagBits
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportSemaphoreFdInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub semaphore: VkSemaphore,
	pub flags: VkSemaphoreImportFlags,
	pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
	pub fd: int
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSemaphoreGetFdInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub semaphore: VkSemaphore,
	pub handleType: VkExternalSemaphoreHandleTypeFlagBits
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportSemaphoreZirconHandleInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub semaphore: VkSemaphore,
	pub flags: VkSemaphoreImportFlags,
	pub handleType: VkExternalSemaphoreHandleTypeFlagBits,
	pub zirconHandle: zx_handle_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSemaphoreGetZirconHandleInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub semaphore: VkSemaphore,
	pub handleType: VkExternalSemaphoreHandleTypeFlagBits
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceExternalFenceInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleType: VkExternalFenceHandleTypeFlagBits
}

pub type VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExternalFenceProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
	pub compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
	pub externalFenceFeatures: VkExternalFenceFeatureFlags
}

pub type VkExternalFencePropertiesKHR = VkExternalFenceProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportFenceCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleTypes: VkExternalFenceHandleTypeFlags
}

pub type VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportFenceWin32HandleInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub fence: VkFence,
	pub flags: VkFenceImportFlags,
	pub handleType: VkExternalFenceHandleTypeFlagBits,
	pub handle: HANDLE,
	pub name: LPCWSTR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportFenceWin32HandleInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pAttributes: *const SECURITY_ATTRIBUTES,
	pub dwAccess: DWORD,
	pub name: LPCWSTR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFenceGetWin32HandleInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub fence: VkFence,
	pub handleType: VkExternalFenceHandleTypeFlagBits
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportFenceFdInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub fence: VkFence,
	pub flags: VkFenceImportFlags,
	pub handleType: VkExternalFenceHandleTypeFlagBits,
	pub fd: int
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFenceGetFdInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub fence: VkFence,
	pub handleType: VkExternalFenceHandleTypeFlagBits
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMultiviewFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub multiview: VkBool32,
	pub multiviewGeometryShader: VkBool32,
	pub multiviewTessellationShader: VkBool32
}

pub type VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMultiviewProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxMultiviewViewCount: u32,
	pub maxMultiviewInstanceIndex: u32
}

pub type VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassMultiviewCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub subpassCount: u32,
	pub pViewMasks: *const u32,
	pub dependencyCount: u32,
	pub pViewOffsets: *const i32,
	pub correlationMaskCount: u32,
	pub pCorrelationMasks: *const u32
}

pub type VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSurfaceCapabilities2EXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub minImageCount: u32,
	pub maxImageCount: u32,
	pub currentExtent: VkExtent2D,
	pub minImageExtent: VkExtent2D,
	pub maxImageExtent: VkExtent2D,
	pub maxImageArrayLayers: u32,
	pub supportedTransforms: VkSurfaceTransformFlagsKHR,
	pub currentTransform: VkSurfaceTransformFlagBitsKHR,
	pub supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
	pub supportedUsageFlags: VkImageUsageFlags,
	pub supportedSurfaceCounters: VkSurfaceCounterFlagsEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayPowerInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub powerState: VkDisplayPowerStateEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceEventInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub deviceEvent: VkDeviceEventTypeEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayEventInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub displayEvent: VkDisplayEventTypeEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSwapchainCounterCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub surfaceCounters: VkSurfaceCounterFlagsEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceGroupProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub physicalDeviceCount: u32,
	pub physicalDevices: [VkPhysicalDevice; VK_MAX_DEVICE_GROUP_SIZE],
	pub subsetAllocation: VkBool32
}

pub type VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryAllocateFlagsInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkMemoryAllocateFlags,
	pub deviceMask: u32
}

pub type VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindBufferMemoryInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub buffer: VkBuffer,
	pub memory: VkDeviceMemory,
	pub memoryOffset: VkDeviceSize
}

pub type VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindBufferMemoryDeviceGroupInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub deviceIndexCount: u32,
	pub pDeviceIndices: *const u32
}

pub type VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindImageMemoryInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub image: VkImage,
	pub memory: VkDeviceMemory,
	pub memoryOffset: VkDeviceSize
}

pub type VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindImageMemoryDeviceGroupInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub deviceIndexCount: u32,
	pub pDeviceIndices: *const u32,
	pub splitInstanceBindRegionCount: u32,
	pub pSplitInstanceBindRegions: *const VkRect2D
}

pub type VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceGroupRenderPassBeginInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub deviceMask: u32,
	pub deviceRenderAreaCount: u32,
	pub pDeviceRenderAreas: *const VkRect2D
}

pub type VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceGroupCommandBufferBeginInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub deviceMask: u32
}

pub type VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceGroupSubmitInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub waitSemaphoreCount: u32,
	pub pWaitSemaphoreDeviceIndices: *const u32,
	pub commandBufferCount: u32,
	pub pCommandBufferDeviceMasks: *const u32,
	pub signalSemaphoreCount: u32,
	pub pSignalSemaphoreDeviceIndices: *const u32
}

pub type VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceGroupBindSparseInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub resourceDeviceIndex: u32,
	pub memoryDeviceIndex: u32
}

pub type VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceGroupPresentCapabilitiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub presentMask: [u32; VK_MAX_DEVICE_GROUP_SIZE],
	pub modes: VkDeviceGroupPresentModeFlagsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageSwapchainCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub swapchain: VkSwapchainKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindImageMemorySwapchainInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub swapchain: VkSwapchainKHR,
	pub imageIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAcquireNextImageInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub swapchain: VkSwapchainKHR,
	pub timeout: uint64_t,
	pub semaphore: VkSemaphore,
	pub fence: VkFence,
	pub deviceMask: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceGroupPresentInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub swapchainCount: u32,
	pub pDeviceMasks: *const u32,
	pub mode: VkDeviceGroupPresentModeFlagBitsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceGroupDeviceCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub physicalDeviceCount: u32,
	pub pPhysicalDevices: *const VkPhysicalDevice
}

pub type VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceGroupSwapchainCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub modes: VkDeviceGroupPresentModeFlagsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorUpdateTemplateEntry
{
	pub dstBinding: u32,
	pub dstArrayElement: u32,
	pub descriptorCount: u32,
	pub descriptorType: VkDescriptorType,
	pub offset: usize,
	pub stride: usize
}

pub type VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorUpdateTemplateCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDescriptorUpdateTemplateCreateFlags,
	pub descriptorUpdateEntryCount: u32,
	pub pDescriptorUpdateEntries: *const VkDescriptorUpdateTemplateEntry,
	pub templateType: VkDescriptorUpdateTemplateType,
	pub descriptorSetLayout: VkDescriptorSetLayout,
	pub pipelineBindPoint: VkPipelineBindPoint,
	pub pipelineLayout: VkPipelineLayout,
	pub set: u32
}

pub type VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkXYColorEXT
{
	pub x: f32,
	pub y: f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePresentIdFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub presentId: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPresentIdKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub swapchainCount: u32,
	pub pPresentIds: *const uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePresentWaitFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub presentWait: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkHdrMetadataEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub displayPrimaryRed: VkXYColorEXT,
	pub displayPrimaryGreen: VkXYColorEXT,
	pub displayPrimaryBlue: VkXYColorEXT,
	pub whitePoint: VkXYColorEXT,
	pub maxLuminance: f32,
	pub minLuminance: f32,
	pub maxContentLightLevel: f32,
	pub maxFrameAverageLightLevel: f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub localDimmingSupport: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSwapchainDisplayNativeHdrCreateInfoAMD
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub localDimmingEnable: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRefreshCycleDurationGOOGLE
{
	pub refreshDuration: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPastPresentationTimingGOOGLE
{
	pub presentID: u32,
	pub desiredPresentTime: uint64_t,
	pub actualPresentTime: uint64_t,
	pub earliestPresentTime: uint64_t,
	pub presentMargin: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPresentTimesInfoGOOGLE
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub swapchainCount: u32,
	pub pTimes: *const VkPresentTimeGOOGLE
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPresentTimeGOOGLE
{
	pub presentID: u32,
	pub desiredPresentTime: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkIOSSurfaceCreateInfoMVK
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkIOSSurfaceCreateFlagsMVK,
	pub pView: *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMacOSSurfaceCreateInfoMVK
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkMacOSSurfaceCreateFlagsMVK,
	pub pView: *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMetalSurfaceCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkMetalSurfaceCreateFlagsEXT,
	pub pLayer: *const CAMetalLayer
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkViewportWScalingNV
{
	pub xcoeff: f32,
	pub ycoeff: f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineViewportWScalingStateCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub viewportWScalingEnable: VkBool32,
	pub viewportCount: u32,
	pub pViewportWScalings: *const VkViewportWScalingNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkViewportSwizzleNV
{
	pub x: VkViewportCoordinateSwizzleNV,
	pub y: VkViewportCoordinateSwizzleNV,
	pub z: VkViewportCoordinateSwizzleNV,
	pub w: VkViewportCoordinateSwizzleNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineViewportSwizzleStateCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineViewportSwizzleStateCreateFlagsNV,
	pub viewportCount: u32,
	pub pViewportSwizzles: *const VkViewportSwizzleNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxDiscardRectangles: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineDiscardRectangleStateCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineDiscardRectangleStateCreateFlagsEXT,
	pub discardRectangleMode: VkDiscardRectangleModeEXT,
	pub discardRectangleCount: u32,
	pub pDiscardRectangles: *const VkRect2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub perViewPositionAllComponents: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkInputAttachmentAspectReference
{
	pub subpass: u32,
	pub inputAttachmentIndex: u32,
	pub aspectMask: VkImageAspectFlags
}

pub type VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassInputAttachmentAspectCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub aspectReferenceCount: u32,
	pub pAspectReferences: *const VkInputAttachmentAspectReference
}

pub type VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSurfaceInfo2KHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub surface: VkSurfaceKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSurfaceCapabilities2KHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub surfaceCapabilities: VkSurfaceCapabilitiesKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSurfaceFormat2KHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub surfaceFormat: VkSurfaceFormatKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayProperties2KHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub displayProperties: VkDisplayPropertiesKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayPlaneProperties2KHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub displayPlaneProperties: VkDisplayPlanePropertiesKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayModeProperties2KHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub displayModeProperties: VkDisplayModePropertiesKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayPlaneInfo2KHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub mode: VkDisplayModeKHR,
	pub planeIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDisplayPlaneCapabilities2KHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub capabilities: VkDisplayPlaneCapabilitiesKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSharedPresentSurfaceCapabilitiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub sharedPresentSupportedUsageFlags: VkImageUsageFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevice16BitStorageFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub storageBuffer16BitAccess: VkBool32,
	pub uniformAndStorageBuffer16BitAccess: VkBool32,
	pub storagePushConstant16: VkBool32,
	pub storageInputOutput16: VkBool32
}

pub type VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSubgroupProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub subgroupSize: u32,
	pub supportedStages: VkShaderStageFlags,
	pub supportedOperations: VkSubgroupFeatureFlags,
	pub quadOperationsInAllStages: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderSubgroupExtendedTypes: VkBool32
}

pub type VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferMemoryRequirementsInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub buffer: VkBuffer
}

pub type VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceBufferMemoryRequirements
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pCreateInfo: *const VkBufferCreateInfo
}

pub type VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageMemoryRequirementsInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub image: VkImage
}

pub type VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageSparseMemoryRequirementsInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub image: VkImage
}

pub type VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceImageMemoryRequirements
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pCreateInfo: *const VkImageCreateInfo,
	pub planeAspect: VkImageAspectFlagBits
}

pub type VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryRequirements2
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub memoryRequirements: VkMemoryRequirements
}

pub type VkMemoryRequirements2KHR = VkMemoryRequirements2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSparseImageMemoryRequirements2
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub memoryRequirements: VkSparseImageMemoryRequirements
}

pub type VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePointClippingProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub pointClippingBehavior: VkPointClippingBehavior
}

pub type VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryDedicatedRequirements
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub prefersDedicatedAllocation: VkBool32,
	pub requiresDedicatedAllocation: VkBool32
}

pub type VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryDedicatedAllocateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub image: VkImage,
	pub buffer: VkBuffer
}

pub type VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageViewUsageCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub usage: VkImageUsageFlags
}

pub type VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineTessellationDomainOriginStateCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub domainOrigin: VkTessellationDomainOrigin
}

pub type VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSamplerYcbcrConversionInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub conversion: VkSamplerYcbcrConversion
}

pub type VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSamplerYcbcrConversionCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub format: VkFormat,
	pub ycbcrModel: VkSamplerYcbcrModelConversion,
	pub ycbcrRange: VkSamplerYcbcrRange,
	pub components: VkComponentMapping,
	pub xChromaOffset: VkChromaLocation,
	pub yChromaOffset: VkChromaLocation,
	pub chromaFilter: VkFilter,
	pub forceExplicitReconstruction: VkBool32
}

pub type VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindImagePlaneMemoryInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub planeAspect: VkImageAspectFlagBits
}

pub type VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImagePlaneMemoryRequirementsInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub planeAspect: VkImageAspectFlagBits
}

pub type VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub samplerYcbcrConversion: VkBool32
}

pub type VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSamplerYcbcrConversionImageFormatProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub combinedImageSamplerDescriptorCount: u32
}

pub type VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkTextureLODGatherFormatPropertiesAMD
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub supportsTextureGatherLODBiasAMD: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkConditionalRenderingBeginInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub buffer: VkBuffer,
	pub offset: VkDeviceSize,
	pub flags: VkConditionalRenderingFlagsEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkProtectedSubmitInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub protectedSubmit: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceProtectedMemoryFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub protectedMemory: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceProtectedMemoryProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub protectedNoFault: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceQueueInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDeviceQueueCreateFlags,
	pub queueFamilyIndex: u32,
	pub queueIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineCoverageToColorStateCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineCoverageToColorStateCreateFlagsNV,
	pub coverageToColorEnable: VkBool32,
	pub coverageToColorLocation: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSamplerFilterMinmaxProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub filterMinmaxSingleComponentFormats: VkBool32,
	pub filterMinmaxImageComponentMapping: VkBool32
}

pub type VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSampleLocationEXT
{
	pub x: f32,
	pub y: f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSampleLocationsInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub sampleLocationsPerPixel: VkSampleCountFlagBits,
	pub sampleLocationGridSize: VkExtent2D,
	pub sampleLocationsCount: u32,
	pub pSampleLocations: *const VkSampleLocationEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAttachmentSampleLocationsEXT
{
	pub attachmentIndex: u32,
	pub sampleLocationsInfo: VkSampleLocationsInfoEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubpassSampleLocationsEXT
{
	pub subpassIndex: u32,
	pub sampleLocationsInfo: VkSampleLocationsInfoEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassSampleLocationsBeginInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub attachmentInitialSampleLocationsCount: u32,
	pub pAttachmentInitialSampleLocations: *const VkAttachmentSampleLocationsEXT,
	pub postSubpassSampleLocationsCount: u32,
	pub pPostSubpassSampleLocations: *const VkSubpassSampleLocationsEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineSampleLocationsStateCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub sampleLocationsEnable: VkBool32,
	pub sampleLocationsInfo: VkSampleLocationsInfoEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSampleLocationsPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub sampleLocationSampleCounts: VkSampleCountFlags,
	pub maxSampleLocationGridSize: VkExtent2D,
	pub sampleLocationCoordinateRange: [f32; 2],
	pub sampleLocationSubPixelBits: u32,
	pub variableSampleLocations: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMultisamplePropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxSampleLocationGridSize: VkExtent2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSamplerReductionModeCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub reductionMode: VkSamplerReductionMode
}

pub type VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub advancedBlendCoherentOperations: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMultiDrawFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub multiDraw: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub advancedBlendMaxColorAttachments: u32,
	pub advancedBlendIndependentBlend: VkBool32,
	pub advancedBlendNonPremultipliedSrcColor: VkBool32,
	pub advancedBlendNonPremultipliedDstColor: VkBool32,
	pub advancedBlendCorrelatedOverlap: VkBool32,
	pub advancedBlendAllOperations: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcPremultiplied: VkBool32,
	pub dstPremultiplied: VkBool32,
	pub blendOverlap: VkBlendOverlapEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceInlineUniformBlockFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub inlineUniformBlock: VkBool32,
	pub descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32
}

pub type VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceInlineUniformBlockProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxInlineUniformBlockSize: u32,
	pub maxPerStageDescriptorInlineUniformBlocks: u32,
	pub maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
	pub maxDescriptorSetInlineUniformBlocks: u32,
	pub maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32
}

pub type VkPhysicalDeviceInlineUniformBlockPropertiesEXT = VkPhysicalDeviceInlineUniformBlockProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkWriteDescriptorSetInlineUniformBlock
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub dataSize: u32,
	pub pData: *const c_void
}

pub type VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorPoolInlineUniformBlockCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub maxInlineUniformBlockBindings: u32
}

pub type VkDescriptorPoolInlineUniformBlockCreateInfoEXT = VkDescriptorPoolInlineUniformBlockCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineCoverageModulationStateCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineCoverageModulationStateCreateFlagsNV,
	pub coverageModulationMode: VkCoverageModulationModeNV,
	pub coverageModulationTableEnable: VkBool32,
	pub coverageModulationTableCount: u32,
	pub pCoverageModulationTable: *const f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageFormatListCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub viewFormatCount: u32,
	pub pViewFormats: *const VkFormat
}

pub type VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkValidationCacheCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkValidationCacheCreateFlagsEXT,
	pub initialDataSize: usize,
	pub pInitialData: *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkShaderModuleValidationCacheCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub validationCache: VkValidationCacheEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMaintenance3Properties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxPerSetDescriptors: u32,
	pub maxMemoryAllocationSize: VkDeviceSize
}

pub type VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMaintenance4Features
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maintenance4: VkBool32
}

pub type VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMaintenance4Properties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxBufferSize: VkDeviceSize
}

pub type VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorSetLayoutSupport
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub supported: VkBool32
}

pub type VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderDrawParametersFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderDrawParameters: VkBool32
}

pub type VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderFloat16Int8Features
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderFloat16: VkBool32,
	pub shaderInt8: VkBool32
}

pub type VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;

pub type VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFloatControlsProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub denormBehaviorIndependence: VkShaderFloatControlsIndependence,
	pub roundingModeIndependence: VkShaderFloatControlsIndependence,
	pub shaderSignedZeroInfNanPreserveFloat16: VkBool32,
	pub shaderSignedZeroInfNanPreserveFloat32: VkBool32,
	pub shaderSignedZeroInfNanPreserveFloat64: VkBool32,
	pub shaderDenormPreserveFloat16: VkBool32,
	pub shaderDenormPreserveFloat32: VkBool32,
	pub shaderDenormPreserveFloat64: VkBool32,
	pub shaderDenormFlushToZeroFloat16: VkBool32,
	pub shaderDenormFlushToZeroFloat32: VkBool32,
	pub shaderDenormFlushToZeroFloat64: VkBool32,
	pub shaderRoundingModeRTEFloat16: VkBool32,
	pub shaderRoundingModeRTEFloat32: VkBool32,
	pub shaderRoundingModeRTEFloat64: VkBool32,
	pub shaderRoundingModeRTZFloat16: VkBool32,
	pub shaderRoundingModeRTZFloat32: VkBool32,
	pub shaderRoundingModeRTZFloat64: VkBool32
}

pub type VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceHostQueryResetFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub hostQueryReset: VkBool32
}

pub type VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkNativeBufferUsage2ANDROID
{
	pub consumer: uint64_t,
	pub producer: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkNativeBufferANDROID
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handle: *const c_void,
	pub stride: int,
	pub format: int,
	pub usage: int,
	pub usage2: VkNativeBufferUsage2ANDROID
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSwapchainImageCreateInfoANDROID
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub usage: VkSwapchainImageUsageFlagsANDROID
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePresentationPropertiesANDROID
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub sharedImage: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkShaderResourceUsageAMD
{
	pub numUsedVgprs: u32,
	pub numUsedSgprs: u32,
	pub ldsSizePerLocalWorkGroup: u32,
	pub ldsUsageSizeInBytes: usize,
	pub scratchMemUsageInBytes: usize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkShaderStatisticsInfoAMD
{
	pub shaderStageMask: VkShaderStageFlags,
	pub resourceUsage: VkShaderResourceUsageAMD,
	pub numPhysicalVgprs: u32,
	pub numPhysicalSgprs: u32,
	pub numAvailableVgprs: u32,
	pub numAvailableSgprs: u32,
	pub computeWorkGroupSize: [u32; 3]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceQueueGlobalPriorityCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub globalPriority: VkQueueGlobalPriorityKHR
}

pub type VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfoKHR;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub globalPriorityQuery: VkBool32
}

pub type VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT = VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkQueueFamilyGlobalPriorityPropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub priorityCount: u32,
	pub priorities: [VkQueueGlobalPriorityKHR; VK_MAX_GLOBAL_PRIORITY_SIZE_KHR]
}

pub type VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityPropertiesKHR;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDebugUtilsObjectNameInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub objectType: VkObjectType,
	pub objectHandle: uint64_t,
	pub pObjectName: *const i8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDebugUtilsObjectTagInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub objectType: VkObjectType,
	pub objectHandle: uint64_t,
	pub tagName: uint64_t,
	pub tagSize: usize,
	pub pTag: *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDebugUtilsLabelEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pLabelName: *const i8,
	pub color: [f32; 4]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDebugUtilsMessengerCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDebugUtilsMessengerCreateFlagsEXT,
	pub messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT,
	pub messageType: VkDebugUtilsMessageTypeFlagsEXT,
	pub pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
	pub pUserData: *mut c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDebugUtilsMessengerCallbackDataEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDebugUtilsMessengerCallbackDataFlagsEXT,
	pub pMessageIdName: *const i8,
	pub messageIdNumber: i32,
	pub pMessage: *const i8,
	pub queueLabelCount: u32,
	pub pQueueLabels: *const VkDebugUtilsLabelEXT,
	pub cmdBufLabelCount: u32,
	pub pCmdBufLabels: *const VkDebugUtilsLabelEXT,
	pub objectCount: u32,
	pub pObjects: *const VkDebugUtilsObjectNameInfoEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub deviceMemoryReport: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceDeviceMemoryReportCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDeviceMemoryReportFlagsEXT,
	pub pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT,
	pub pUserData: *mut c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceMemoryReportCallbackDataEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub flags: VkDeviceMemoryReportFlagsEXT,
	pub kind: VkDeviceMemoryReportEventTypeEXT,
	pub memoryObjectId: uint64_t,
	pub size: VkDeviceSize,
	pub objectType: VkObjectType,
	pub objectHandle: uint64_t,
	pub heapIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportMemoryHostPointerInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub handleType: VkExternalMemoryHandleTypeFlagBits,
	pub pHostPointer: *mut c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryHostPointerPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub memoryTypeBits: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub minImportedHostPointerAlignment: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub primitiveOverestimationSize: f32,
	pub maxExtraPrimitiveOverestimationSize: f32,
	pub extraPrimitiveOverestimationSizeGranularity: f32,
	pub primitiveUnderestimation: VkBool32,
	pub conservativePointAndLineRasterization: VkBool32,
	pub degenerateTrianglesRasterized: VkBool32,
	pub degenerateLinesRasterized: VkBool32,
	pub fullyCoveredFragmentShaderInputVariable: VkBool32,
	pub conservativeRasterizationPostDepthCoverage: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCalibratedTimestampInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub timeDomain: VkTimeDomainEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderCorePropertiesAMD
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderEngineCount: u32,
	pub shaderArraysPerEngineCount: u32,
	pub computeUnitsPerShaderArray: u32,
	pub simdPerComputeUnit: u32,
	pub wavefrontsPerSimd: u32,
	pub wavefrontSize: u32,
	pub sgprsPerSimd: u32,
	pub minSgprAllocation: u32,
	pub maxSgprAllocation: u32,
	pub sgprAllocationGranularity: u32,
	pub vgprsPerSimd: u32,
	pub minVgprAllocation: u32,
	pub maxVgprAllocation: u32,
	pub vgprAllocationGranularity: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderCoreProperties2AMD
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD,
	pub activeComputeUnitCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineRasterizationConservativeStateCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT,
	pub conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
	pub extraPrimitiveOverestimationSize: f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDescriptorIndexingFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderInputAttachmentArrayDynamicIndexing: VkBool32,
	pub shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
	pub shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
	pub shaderUniformBufferArrayNonUniformIndexing: VkBool32,
	pub shaderSampledImageArrayNonUniformIndexing: VkBool32,
	pub shaderStorageBufferArrayNonUniformIndexing: VkBool32,
	pub shaderStorageImageArrayNonUniformIndexing: VkBool32,
	pub shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
	pub shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
	pub shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
	pub descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
	pub descriptorBindingSampledImageUpdateAfterBind: VkBool32,
	pub descriptorBindingStorageImageUpdateAfterBind: VkBool32,
	pub descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
	pub descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
	pub descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
	pub descriptorBindingUpdateUnusedWhilePending: VkBool32,
	pub descriptorBindingPartiallyBound: VkBool32,
	pub descriptorBindingVariableDescriptorCount: VkBool32,
	pub runtimeDescriptorArray: VkBool32
}

pub type VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDescriptorIndexingProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxUpdateAfterBindDescriptorsInAllPools: u32,
	pub shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
	pub shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
	pub shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
	pub shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
	pub shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
	pub robustBufferAccessUpdateAfterBind: VkBool32,
	pub quadDivergentImplicitLod: VkBool32,
	pub maxPerStageDescriptorUpdateAfterBindSamplers: u32,
	pub maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
	pub maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
	pub maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
	pub maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
	pub maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
	pub maxPerStageUpdateAfterBindResources: u32,
	pub maxDescriptorSetUpdateAfterBindSamplers: u32,
	pub maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
	pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
	pub maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
	pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
	pub maxDescriptorSetUpdateAfterBindSampledImages: u32,
	pub maxDescriptorSetUpdateAfterBindStorageImages: u32,
	pub maxDescriptorSetUpdateAfterBindInputAttachments: u32
}

pub type VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorSetLayoutBindingFlagsCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub bindingCount: u32,
	pub pBindingFlags: *const VkDescriptorBindingFlags
}

pub type VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorSetVariableDescriptorCountAllocateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub descriptorSetCount: u32,
	pub pDescriptorCounts: *const u32
}

pub type VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorSetVariableDescriptorCountLayoutSupport
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxVariableDescriptorCount: u32
}

pub type VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAttachmentDescription2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkAttachmentDescriptionFlags,
	pub format: VkFormat,
	pub samples: VkSampleCountFlagBits,
	pub loadOp: VkAttachmentLoadOp,
	pub storeOp: VkAttachmentStoreOp,
	pub stencilLoadOp: VkAttachmentLoadOp,
	pub stencilStoreOp: VkAttachmentStoreOp,
	pub initialLayout: VkImageLayout,
	pub finalLayout: VkImageLayout
}

pub type VkAttachmentDescription2KHR = VkAttachmentDescription2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAttachmentReference2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub attachment: u32,
	pub layout: VkImageLayout,
	pub aspectMask: VkImageAspectFlags
}

pub type VkAttachmentReference2KHR = VkAttachmentReference2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubpassDescription2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkSubpassDescriptionFlags,
	pub pipelineBindPoint: VkPipelineBindPoint,
	pub viewMask: u32,
	pub inputAttachmentCount: u32,
	pub pInputAttachments: *const VkAttachmentReference2,
	pub colorAttachmentCount: u32,
	pub pColorAttachments: *const VkAttachmentReference2,
	pub pResolveAttachments: *const VkAttachmentReference2,
	pub pDepthStencilAttachment: *const VkAttachmentReference2,
	pub preserveAttachmentCount: u32,
	pub pPreserveAttachments: *const u32
}

pub type VkSubpassDescription2KHR = VkSubpassDescription2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubpassDependency2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcSubpass: u32,
	pub dstSubpass: u32,
	pub srcStageMask: VkPipelineStageFlags,
	pub dstStageMask: VkPipelineStageFlags,
	pub srcAccessMask: VkAccessFlags,
	pub dstAccessMask: VkAccessFlags,
	pub dependencyFlags: VkDependencyFlags,
	pub viewOffset: i32
}

pub type VkSubpassDependency2KHR = VkSubpassDependency2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassCreateInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkRenderPassCreateFlags,
	pub attachmentCount: u32,
	pub pAttachments: *const VkAttachmentDescription2,
	pub subpassCount: u32,
	pub pSubpasses: *const VkSubpassDescription2,
	pub dependencyCount: u32,
	pub pDependencies: *const VkSubpassDependency2,
	pub correlatedViewMaskCount: u32,
	pub pCorrelatedViewMasks: *const u32
}

pub type VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubpassBeginInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub contents: VkSubpassContents
}

pub type VkSubpassBeginInfoKHR = VkSubpassBeginInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubpassEndInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void
}

pub type VkSubpassEndInfoKHR = VkSubpassEndInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceTimelineSemaphoreFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub timelineSemaphore: VkBool32
}

pub type VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceTimelineSemaphoreProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxTimelineSemaphoreValueDifference: uint64_t
}

pub type VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSemaphoreTypeCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub semaphoreType: VkSemaphoreType,
	pub initialValue: uint64_t
}

pub type VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkTimelineSemaphoreSubmitInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub waitSemaphoreValueCount: u32,
	pub pWaitSemaphoreValues: *const uint64_t,
	pub signalSemaphoreValueCount: u32,
	pub pSignalSemaphoreValues: *const uint64_t
}

pub type VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSemaphoreWaitInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkSemaphoreWaitFlags,
	pub semaphoreCount: u32,
	pub pSemaphores: *const VkSemaphore,
	pub pValues: *const uint64_t
}

pub type VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSemaphoreSignalInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub semaphore: VkSemaphore,
	pub value: uint64_t
}

pub type VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVertexInputBindingDivisorDescriptionEXT
{
	pub binding: u32,
	pub divisor: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineVertexInputDivisorStateCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub vertexBindingDivisorCount: u32,
	pub pVertexBindingDivisors: *const VkVertexInputBindingDivisorDescriptionEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxVertexAttribDivisor: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePCIBusInfoPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub pciDomain: u32,
	pub pciBus: u32,
	pub pciDevice: u32,
	pub pciFunction: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportAndroidHardwareBufferInfoANDROID
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub buffer: *mut AHardwareBuffer
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAndroidHardwareBufferUsageANDROID
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub androidHardwareBufferUsage: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAndroidHardwareBufferPropertiesANDROID
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub allocationSize: VkDeviceSize,
	pub memoryTypeBits: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryGetAndroidHardwareBufferInfoANDROID
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub memory: VkDeviceMemory
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAndroidHardwareBufferFormatPropertiesANDROID
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub format: VkFormat,
	pub externalFormat: uint64_t,
	pub formatFeatures: VkFormatFeatureFlags,
	pub samplerYcbcrConversionComponents: VkComponentMapping,
	pub suggestedYcbcrModel: VkSamplerYcbcrModelConversion,
	pub suggestedYcbcrRange: VkSamplerYcbcrRange,
	pub suggestedXChromaOffset: VkChromaLocation,
	pub suggestedYChromaOffset: VkChromaLocation
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub conditionalRenderingEnable: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExternalFormatANDROID
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub externalFormat: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevice8BitStorageFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub storageBuffer8BitAccess: VkBool32,
	pub uniformAndStorageBuffer8BitAccess: VkBool32,
	pub storagePushConstant8: VkBool32
}

pub type VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub conditionalRendering: VkBool32,
	pub inheritedConditionalRendering: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVulkanMemoryModelFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub vulkanMemoryModel: VkBool32,
	pub vulkanMemoryModelDeviceScope: VkBool32,
	pub vulkanMemoryModelAvailabilityVisibilityChains: VkBool32
}

pub type VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderAtomicInt64Features
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderBufferInt64Atomics: VkBool32,
	pub shaderSharedInt64Atomics: VkBool32
}

pub type VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderBufferFloat32Atomics: VkBool32,
	pub shaderBufferFloat32AtomicAdd: VkBool32,
	pub shaderBufferFloat64Atomics: VkBool32,
	pub shaderBufferFloat64AtomicAdd: VkBool32,
	pub shaderSharedFloat32Atomics: VkBool32,
	pub shaderSharedFloat32AtomicAdd: VkBool32,
	pub shaderSharedFloat64Atomics: VkBool32,
	pub shaderSharedFloat64AtomicAdd: VkBool32,
	pub shaderImageFloat32Atomics: VkBool32,
	pub shaderImageFloat32AtomicAdd: VkBool32,
	pub sparseImageFloat32Atomics: VkBool32,
	pub sparseImageFloat32AtomicAdd: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderBufferFloat16Atomics: VkBool32,
	pub shaderBufferFloat16AtomicAdd: VkBool32,
	pub shaderBufferFloat16AtomicMinMax: VkBool32,
	pub shaderBufferFloat32AtomicMinMax: VkBool32,
	pub shaderBufferFloat64AtomicMinMax: VkBool32,
	pub shaderSharedFloat16Atomics: VkBool32,
	pub shaderSharedFloat16AtomicAdd: VkBool32,
	pub shaderSharedFloat16AtomicMinMax: VkBool32,
	pub shaderSharedFloat32AtomicMinMax: VkBool32,
	pub shaderSharedFloat64AtomicMinMax: VkBool32,
	pub shaderImageFloat32AtomicMinMax: VkBool32,
	pub sparseImageFloat32AtomicMinMax: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub vertexAttributeInstanceRateDivisor: VkBool32,
	pub vertexAttributeInstanceRateZeroDivisor: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkQueueFamilyCheckpointPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub checkpointExecutionStageMask: VkPipelineStageFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCheckpointDataNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub stage: VkPipelineStageFlagBits,
	pub pCheckpointMarker: *mut c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDepthStencilResolveProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub supportedDepthResolveModes: VkResolveModeFlags,
	pub supportedStencilResolveModes: VkResolveModeFlags,
	pub independentResolveNone: VkBool32,
	pub independentResolve: VkBool32
}

pub type VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubpassDescriptionDepthStencilResolve
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub depthResolveMode: VkResolveModeFlagBits,
	pub stencilResolveMode: VkResolveModeFlagBits,
	pub pDepthStencilResolveAttachment: *const VkAttachmentReference2
}

pub type VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageViewASTCDecodeModeEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub decodeMode: VkFormat
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceASTCDecodeFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub decodeModeSharedExponent: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub transformFeedback: VkBool32,
	pub geometryStreams: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxTransformFeedbackStreams: u32,
	pub maxTransformFeedbackBuffers: u32,
	pub maxTransformFeedbackBufferSize: VkDeviceSize,
	pub maxTransformFeedbackStreamDataSize: u32,
	pub maxTransformFeedbackBufferDataSize: u32,
	pub maxTransformFeedbackBufferDataStride: u32,
	pub transformFeedbackQueries: VkBool32,
	pub transformFeedbackStreamsLinesTriangles: VkBool32,
	pub transformFeedbackRasterizationStreamSelect: VkBool32,
	pub transformFeedbackDraw: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineRasterizationStateStreamCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineRasterizationStateStreamCreateFlagsEXT,
	pub rasterizationStream: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub representativeFragmentTest: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub representativeFragmentTestEnable: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceExclusiveScissorFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub exclusiveScissor: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub exclusiveScissorCount: u32,
	pub pExclusiveScissors: *const VkRect2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceCornerSampledImageFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub cornerSampledImage: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub computeDerivativeGroupQuads: VkBool32,
	pub computeDerivativeGroupLinear: VkBool32
}

pub type VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub imageFootprint: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub dedicatedAllocationImageAliasing: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceCopyMemoryIndirectFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub indirectCopy: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceCopyMemoryIndirectPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub supportedQueues: VkQueueFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMemoryDecompressionFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub memoryDecompression: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMemoryDecompressionPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub decompressionMethods: VkMemoryDecompressionMethodFlagsNV,
	pub maxDecompressionIndirectCount: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkShadingRatePaletteNV
{
	pub shadingRatePaletteEntryCount: u32,
	pub pShadingRatePaletteEntries: *const VkShadingRatePaletteEntryNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineViewportShadingRateImageStateCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub shadingRateImageEnable: VkBool32,
	pub viewportCount: u32,
	pub pShadingRatePalettes: *const VkShadingRatePaletteNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShadingRateImageFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shadingRateImage: VkBool32,
	pub shadingRateCoarseSampleOrder: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShadingRateImagePropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shadingRateTexelSize: VkExtent2D,
	pub shadingRatePaletteSize: u32,
	pub shadingRateMaxCoarseSamples: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub invocationMask: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCoarseSampleLocationNV
{
	pub pixelX: u32,
	pub pixelY: u32,
	pub sample: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCoarseSampleOrderCustomNV
{
	pub shadingRate: VkShadingRatePaletteEntryNV,
	pub sampleCount: u32,
	pub sampleLocationCount: u32,
	pub pSampleLocations: *const VkCoarseSampleLocationNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub sampleOrderType: VkCoarseSampleOrderTypeNV,
	pub customSampleOrderCount: u32,
	pub pCustomSampleOrders: *const VkCoarseSampleOrderCustomNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMeshShaderFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub taskShader: VkBool32,
	pub meshShader: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMeshShaderPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxDrawMeshTasksCount: u32,
	pub maxTaskWorkGroupInvocations: u32,
	pub maxTaskWorkGroupSize: [u32; 3],
	pub maxTaskTotalMemorySize: u32,
	pub maxTaskOutputCount: u32,
	pub maxMeshWorkGroupInvocations: u32,
	pub maxMeshWorkGroupSize: [u32; 3],
	pub maxMeshTotalMemorySize: u32,
	pub maxMeshOutputVertices: u32,
	pub maxMeshOutputPrimitives: u32,
	pub maxMeshMultiviewViewCount: u32,
	pub meshOutputPerVertexGranularity: u32,
	pub meshOutputPerPrimitiveGranularity: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDrawMeshTasksIndirectCommandNV
{
	pub taskCount: u32,
	pub firstTask: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMeshShaderFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub taskShader: VkBool32,
	pub meshShader: VkBool32,
	pub multiviewMeshShader: VkBool32,
	pub primitiveFragmentShadingRateMeshShader: VkBool32,
	pub meshShaderQueries: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMeshShaderPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxTaskWorkGroupTotalCount: u32,
	pub maxTaskWorkGroupCount: [u32; 3],
	pub maxTaskWorkGroupInvocations: u32,
	pub maxTaskWorkGroupSize: [u32; 3],
	pub maxTaskPayloadSize: u32,
	pub maxTaskSharedMemorySize: u32,
	pub maxTaskPayloadAndSharedMemorySize: u32,
	pub maxMeshWorkGroupTotalCount: u32,
	pub maxMeshWorkGroupCount: [u32; 3],
	pub maxMeshWorkGroupInvocations: u32,
	pub maxMeshWorkGroupSize: [u32; 3],
	pub maxMeshSharedMemorySize: u32,
	pub maxMeshPayloadAndSharedMemorySize: u32,
	pub maxMeshOutputMemorySize: u32,
	pub maxMeshPayloadAndOutputMemorySize: u32,
	pub maxMeshOutputComponents: u32,
	pub maxMeshOutputVertices: u32,
	pub maxMeshOutputPrimitives: u32,
	pub maxMeshOutputLayers: u32,
	pub maxMeshMultiviewViewCount: u32,
	pub meshOutputPerVertexGranularity: u32,
	pub meshOutputPerPrimitiveGranularity: u32,
	pub maxPreferredTaskWorkGroupInvocations: u32,
	pub maxPreferredMeshWorkGroupInvocations: u32,
	pub prefersLocalInvocationVertexOutput: VkBool32,
	pub prefersLocalInvocationPrimitiveOutput: VkBool32,
	pub prefersCompactVertexOutput: VkBool32,
	pub prefersCompactPrimitiveOutput: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDrawMeshTasksIndirectCommandEXT
{
	pub groupCountX: u32,
	pub groupCountY: u32,
	pub groupCountZ: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRayTracingShaderGroupCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub kind: VkRayTracingShaderGroupTypeKHR,
	pub generalShader: u32,
	pub closestHitShader: u32,
	pub anyHitShader: u32,
	pub intersectionShader: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRayTracingShaderGroupCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub kind: VkRayTracingShaderGroupTypeKHR,
	pub generalShader: u32,
	pub closestHitShader: u32,
	pub anyHitShader: u32,
	pub intersectionShader: u32,
	pub pShaderGroupCaptureReplayHandle: *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRayTracingPipelineCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineCreateFlags,
	pub stageCount: u32,
	pub pStages: *const VkPipelineShaderStageCreateInfo,
	pub groupCount: u32,
	pub pGroups: *const VkRayTracingShaderGroupCreateInfoNV,
	pub maxRecursionDepth: u32,
	pub layout: VkPipelineLayout,
	pub basePipelineHandle: VkPipeline,
	pub basePipelineIndex: i32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRayTracingPipelineCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineCreateFlags,
	pub stageCount: u32,
	pub pStages: *const VkPipelineShaderStageCreateInfo,
	pub groupCount: u32,
	pub pGroups: *const VkRayTracingShaderGroupCreateInfoKHR,
	pub maxPipelineRayRecursionDepth: u32,
	pub pLibraryInfo: *const VkPipelineLibraryCreateInfoKHR,
	pub pLibraryInterface: *const VkRayTracingPipelineInterfaceCreateInfoKHR,
	pub pDynamicState: *const VkPipelineDynamicStateCreateInfo,
	pub layout: VkPipelineLayout,
	pub basePipelineHandle: VkPipeline,
	pub basePipelineIndex: i32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkGeometryTrianglesNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub vertexData: VkBuffer,
	pub vertexOffset: VkDeviceSize,
	pub vertexCount: u32,
	pub vertexStride: VkDeviceSize,
	pub vertexFormat: VkFormat,
	pub indexData: VkBuffer,
	pub indexOffset: VkDeviceSize,
	pub indexCount: u32,
	pub indexType: VkIndexType,
	pub transformData: VkBuffer,
	pub transformOffset: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkGeometryAABBNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub aabbData: VkBuffer,
	pub numAABBs: u32,
	pub stride: u32,
	pub offset: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkGeometryDataNV
{
	pub triangles: VkGeometryTrianglesNV,
	pub aabbs: VkGeometryAABBNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkGeometryNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub geometryType: VkGeometryTypeKHR,
	pub geometry: VkGeometryDataNV,
	pub flags: VkGeometryFlagsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub kind: VkAccelerationStructureTypeNV,
	pub flags: VkBuildAccelerationStructureFlagsNV,
	pub instanceCount: u32,
	pub geometryCount: u32,
	pub pGeometries: *const VkGeometryNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub compactedSize: VkDeviceSize,
	pub info: VkAccelerationStructureInfoNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindAccelerationStructureMemoryInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub accelerationStructure: VkAccelerationStructureNV,
	pub memory: VkDeviceMemory,
	pub memoryOffset: VkDeviceSize,
	pub deviceIndexCount: u32,
	pub pDeviceIndices: *const u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkWriteDescriptorSetAccelerationStructureKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub accelerationStructureCount: u32,
	pub pAccelerationStructures: *const VkAccelerationStructureKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkWriteDescriptorSetAccelerationStructureNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub accelerationStructureCount: u32,
	pub pAccelerationStructures: *const VkAccelerationStructureNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureMemoryRequirementsInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub kind: VkAccelerationStructureMemoryRequirementsTypeNV,
	pub accelerationStructure: VkAccelerationStructureNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceAccelerationStructureFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub accelerationStructure: VkBool32,
	pub accelerationStructureCaptureReplay: VkBool32,
	pub accelerationStructureIndirectBuild: VkBool32,
	pub accelerationStructureHostCommands: VkBool32,
	pub descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub rayTracingPipeline: VkBool32,
	pub rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32,
	pub rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32,
	pub rayTracingPipelineTraceRaysIndirect: VkBool32,
	pub rayTraversalPrimitiveCulling: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRayQueryFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub rayQuery: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceAccelerationStructurePropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxGeometryCount: uint64_t,
	pub maxInstanceCount: uint64_t,
	pub maxPrimitiveCount: uint64_t,
	pub maxPerStageDescriptorAccelerationStructures: u32,
	pub maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32,
	pub maxDescriptorSetAccelerationStructures: u32,
	pub maxDescriptorSetUpdateAfterBindAccelerationStructures: u32,
	pub minAccelerationStructureScratchOffsetAlignment: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderGroupHandleSize: u32,
	pub maxRayRecursionDepth: u32,
	pub maxShaderGroupStride: u32,
	pub shaderGroupBaseAlignment: u32,
	pub shaderGroupHandleCaptureReplaySize: u32,
	pub maxRayDispatchInvocationCount: u32,
	pub shaderGroupHandleAlignment: u32,
	pub maxRayHitAttributeSize: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRayTracingPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderGroupHandleSize: u32,
	pub maxRecursionDepth: u32,
	pub maxShaderGroupStride: u32,
	pub shaderGroupBaseAlignment: u32,
	pub maxGeometryCount: uint64_t,
	pub maxInstanceCount: uint64_t,
	pub maxTriangleCount: uint64_t,
	pub maxDescriptorSetAccelerationStructures: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkStridedDeviceAddressRegionKHR
{
	pub deviceAddress: VkDeviceAddress,
	pub stride: VkDeviceSize,
	pub size: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkTraceRaysIndirectCommandKHR
{
	pub width: u32,
	pub height: u32,
	pub depth: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkTraceRaysIndirectCommand2KHR
{
	pub raygenShaderRecordAddress: VkDeviceAddress,
	pub raygenShaderRecordSize: VkDeviceSize,
	pub missShaderBindingTableAddress: VkDeviceAddress,
	pub missShaderBindingTableSize: VkDeviceSize,
	pub missShaderBindingTableStride: VkDeviceSize,
	pub hitShaderBindingTableAddress: VkDeviceAddress,
	pub hitShaderBindingTableSize: VkDeviceSize,
	pub hitShaderBindingTableStride: VkDeviceSize,
	pub callableShaderBindingTableAddress: VkDeviceAddress,
	pub callableShaderBindingTableSize: VkDeviceSize,
	pub callableShaderBindingTableStride: VkDeviceSize,
	pub width: u32,
	pub height: u32,
	pub depth: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub rayTracingMaintenance1: VkBool32,
	pub rayTracingPipelineTraceRaysIndirect2: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDrmFormatModifierPropertiesListEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub drmFormatModifierCount: u32,
	pub pDrmFormatModifierProperties: *mut VkDrmFormatModifierPropertiesEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDrmFormatModifierPropertiesEXT
{
	pub drmFormatModifier: uint64_t,
	pub drmFormatModifierPlaneCount: u32,
	pub drmFormatModifierTilingFeatures: VkFormatFeatureFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub drmFormatModifier: uint64_t,
	pub sharingMode: VkSharingMode,
	pub queueFamilyIndexCount: u32,
	pub pQueueFamilyIndices: *const u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageDrmFormatModifierListCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub drmFormatModifierCount: u32,
	pub pDrmFormatModifiers: *const uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageDrmFormatModifierExplicitCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub drmFormatModifier: uint64_t,
	pub drmFormatModifierPlaneCount: u32,
	pub pPlaneLayouts: *const VkSubresourceLayout
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageDrmFormatModifierPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub drmFormatModifier: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageStencilUsageCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub stencilUsage: VkImageUsageFlags
}

pub type VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceMemoryOverallocationCreateInfoAMD
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub overallocationBehavior: VkMemoryOverallocationBehaviorAMD
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub fragmentDensityMap: VkBool32,
	pub fragmentDensityMapDynamic: VkBool32,
	pub fragmentDensityMapNonSubsampledImages: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub fragmentDensityMapDeferred: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub fragmentDensityMapOffset: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub minFragmentDensityTexelSize: VkExtent2D,
	pub maxFragmentDensityTexelSize: VkExtent2D,
	pub fragmentDensityInvocations: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub subsampledLoads: VkBool32,
	pub subsampledCoarseReconstructionEarlyAccess: VkBool32,
	pub maxSubsampledArrayLayers: u32,
	pub maxDescriptorSetSubsampledSamplers: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub fragmentDensityOffsetGranularity: VkExtent2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassFragmentDensityMapCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub fragmentDensityMapAttachment: VkAttachmentReference
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub fragmentDensityOffsetCount: u32,
	pub pFragmentDensityOffsets: *const VkOffset2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceScalarBlockLayoutFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub scalarBlockLayout: VkBool32
}

pub type VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSurfaceProtectedCapabilitiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub supportsProtected: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub uniformBufferStandardLayout: VkBool32
}

pub type VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub depthClipEnable: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
	pub depthClipEnable: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub heapBudget: [VkDeviceSize; VK_MAX_MEMORY_HEAPS],
	pub heapUsage: [VkDeviceSize; VK_MAX_MEMORY_HEAPS]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub memoryPriority: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryPriorityAllocateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub priority: f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub pageableDeviceLocalMemory: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub bufferDeviceAddress: VkBool32,
	pub bufferDeviceAddressCaptureReplay: VkBool32,
	pub bufferDeviceAddressMultiDevice: VkBool32
}

pub type VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub bufferDeviceAddress: VkBool32,
	pub bufferDeviceAddressCaptureReplay: VkBool32,
	pub bufferDeviceAddressMultiDevice: VkBool32
}

pub type VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferDeviceAddressInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub buffer: VkBuffer
}

pub type VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;

pub type VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferOpaqueCaptureAddressCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub opaqueCaptureAddress: uint64_t
}

pub type VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferDeviceAddressCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub deviceAddress: VkDeviceAddress
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceImageViewImageFormatInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub imageViewType: VkImageViewType
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFilterCubicImageViewImageFormatPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub filterCubic: VkBool32,
	pub filterCubicMinmax: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceImagelessFramebufferFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub imagelessFramebuffer: VkBool32
}

pub type VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFramebufferAttachmentsCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub attachmentImageInfoCount: u32,
	pub pAttachmentImageInfos: *const VkFramebufferAttachmentImageInfo
}

pub type VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFramebufferAttachmentImageInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkImageCreateFlags,
	pub usage: VkImageUsageFlags,
	pub width: u32,
	pub height: u32,
	pub layerCount: u32,
	pub viewFormatCount: u32,
	pub pViewFormats: *const VkFormat
}

pub type VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassAttachmentBeginInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub attachmentCount: u32,
	pub pAttachments: *const VkImageView
}

pub type VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub textureCompressionASTC_HDR: VkBool32
}

pub type VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = VkPhysicalDeviceTextureCompressionASTCHDRFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub cooperativeMatrix: VkBool32,
	pub cooperativeMatrixRobustBufferAccess: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub cooperativeMatrixSupportedStages: VkShaderStageFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCooperativeMatrixPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub MSize: u32,
	pub NSize: u32,
	pub KSize: u32,
	pub AType: VkComponentTypeNV,
	pub BType: VkComponentTypeNV,
	pub CType: VkComponentTypeNV,
	pub DType: VkComponentTypeNV,
	pub scope: VkScopeNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub ycbcrImageArrays: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageViewHandleInfoNVX
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub imageView: VkImageView,
	pub descriptorType: VkDescriptorType,
	pub sampler: VkSampler
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageViewAddressPropertiesNVX
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub deviceAddress: VkDeviceAddress,
	pub size: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPresentFrameTokenGGP
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub frameToken: GgpFrameToken
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineCreationFeedback
{
	pub flags: VkPipelineCreationFeedbackFlags,
	pub duration: uint64_t
}

pub type VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineCreationFeedbackCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pPipelineCreationFeedback: *mut VkPipelineCreationFeedback,
	pub pipelineStageCreationFeedbackCount: u32,
	pub pPipelineStageCreationFeedbacks: *mut VkPipelineCreationFeedback
}

pub type VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSurfaceFullScreenExclusiveInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub fullScreenExclusive: VkFullScreenExclusiveEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSurfaceFullScreenExclusiveWin32InfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub hmonitor: HMONITOR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSurfaceCapabilitiesFullScreenExclusiveEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub fullScreenExclusiveSupported: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePresentBarrierFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub presentBarrier: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSurfaceCapabilitiesPresentBarrierNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub presentBarrierSupported: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSwapchainPresentBarrierCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub presentBarrierEnable: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePerformanceQueryFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub performanceCounterQueryPools: VkBool32,
	pub performanceCounterMultipleQueryPools: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePerformanceQueryPropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub allowCommandBufferQueryCopies: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPerformanceCounterKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub unit: VkPerformanceCounterUnitKHR,
	pub scope: VkPerformanceCounterScopeKHR,
	pub storage: VkPerformanceCounterStorageKHR,
	pub uuid: [u8; VK_UUID_SIZE]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPerformanceCounterDescriptionKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub flags: VkPerformanceCounterDescriptionFlagsKHR,
	pub name: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub category: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub description: [i8; VK_MAX_DESCRIPTION_SIZE]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkQueryPoolPerformanceCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub queueFamilyIndex: u32,
	pub counterIndexCount: u32,
	pub pCounterIndices: *const u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAcquireProfilingLockInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkAcquireProfilingLockFlagsKHR,
	pub timeout: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPerformanceQuerySubmitInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub counterPassIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkHeadlessSurfaceCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkHeadlessSurfaceCreateFlagsEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub coverageReductionMode: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineCoverageReductionStateCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkPipelineCoverageReductionStateCreateFlagsNV,
	pub coverageReductionMode: VkCoverageReductionModeNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFramebufferMixedSamplesCombinationNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub coverageReductionMode: VkCoverageReductionModeNV,
	pub rasterizationSamples: VkSampleCountFlagBits,
	pub depthStencilSamples: VkSampleCountFlags,
	pub colorSamples: VkSampleCountFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderIntegerFunctions2: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPerformanceValueINTEL
{
	pub kind: VkPerformanceValueTypeINTEL,
	pub data: VkPerformanceValueDataINTEL
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkInitializePerformanceApiInfoINTEL
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pUserData: *mut c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkQueryPoolPerformanceQueryCreateInfoINTEL
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub performanceCountersSampling: VkQueryPoolSamplingModeINTEL
}

pub type VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPerformanceMarkerInfoINTEL
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub marker: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPerformanceStreamMarkerInfoINTEL
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub marker: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPerformanceOverrideInfoINTEL
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub kind: VkPerformanceOverrideTypeINTEL,
	pub enable: VkBool32,
	pub parameter: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPerformanceConfigurationAcquireInfoINTEL
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub kind: VkPerformanceConfigurationTypeINTEL
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderClockFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderSubgroupClock: VkBool32,
	pub shaderDeviceClock: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub indexTypeUint8: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderSMCount: u32,
	pub shaderWarpsPerSM: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderSMBuiltins: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub fragmentShaderSampleInterlock: VkBool32,
	pub fragmentShaderPixelInterlock: VkBool32,
	pub fragmentShaderShadingRateInterlock: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub separateDepthStencilLayouts: VkBool32
}

pub type VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAttachmentReferenceStencilLayout
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub stencilLayout: VkImageLayout
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub primitiveTopologyListRestart: VkBool32,
	pub primitiveTopologyPatchListRestart: VkBool32
}

pub type VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAttachmentDescriptionStencilLayout
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub stencilInitialLayout: VkImageLayout,
	pub stencilFinalLayout: VkImageLayout
}

pub type VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub pipelineExecutableInfo: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pipeline: VkPipeline
}

pub type VkPipelineInfoEXT = VkPipelineInfoKHR;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineExecutablePropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub stages: VkShaderStageFlags,
	pub name: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub description: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub subgroupSize: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineExecutableInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pipeline: VkPipeline,
	pub executableIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineExecutableStatisticKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub name: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub description: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub format: VkPipelineExecutableStatisticFormatKHR,
	pub value: VkPipelineExecutableStatisticValueKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineExecutableInternalRepresentationKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub name: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub description: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub isText: VkBool32,
	pub dataSize: usize,
	pub pData: *mut c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderDemoteToHelperInvocation: VkBool32
}

pub type VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub texelBufferAlignment: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceTexelBufferAlignmentProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
	pub storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
	pub uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
	pub uniformTexelBufferOffsetSingleTexelAlignment: VkBool32
}

pub type VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = VkPhysicalDeviceTexelBufferAlignmentProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSubgroupSizeControlFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub subgroupSizeControl: VkBool32,
	pub computeFullSubgroups: VkBool32
}

pub type VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = VkPhysicalDeviceSubgroupSizeControlFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSubgroupSizeControlProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub minSubgroupSize: u32,
	pub maxSubgroupSize: u32,
	pub maxComputeWorkgroupSubgroups: u32,
	pub requiredSubgroupSizeStages: VkShaderStageFlags
}

pub type VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = VkPhysicalDeviceSubgroupSizeControlProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub requiredSubgroupSize: u32
}

pub type VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubpassShadingPipelineCreateInfoHUAWEI
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub renderPass: VkRenderPass,
	pub subpass: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxSubpassShadingWorkgroupSizeAspectRatio: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryOpaqueCaptureAddressAllocateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub opaqueCaptureAddress: uint64_t
}

pub type VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceMemoryOpaqueCaptureAddressInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub memory: VkDeviceMemory
}

pub type VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceLineRasterizationFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub rectangularLines: VkBool32,
	pub bresenhamLines: VkBool32,
	pub smoothLines: VkBool32,
	pub stippledRectangularLines: VkBool32,
	pub stippledBresenhamLines: VkBool32,
	pub stippledSmoothLines: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceLineRasterizationPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub lineSubPixelPrecisionBits: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineRasterizationLineStateCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub lineRasterizationMode: VkLineRasterizationModeEXT,
	pub stippledLineEnable: VkBool32,
	pub lineStippleFactor: u32,
	pub lineStipplePattern: u16
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePipelineCreationCacheControlFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub pipelineCreationCacheControl: VkBool32
}

pub type VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = VkPhysicalDevicePipelineCreationCacheControlFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVulkan11Features
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub storageBuffer16BitAccess: VkBool32,
	pub uniformAndStorageBuffer16BitAccess: VkBool32,
	pub storagePushConstant16: VkBool32,
	pub storageInputOutput16: VkBool32,
	pub multiview: VkBool32,
	pub multiviewGeometryShader: VkBool32,
	pub multiviewTessellationShader: VkBool32,
	pub variablePointersStorageBuffer: VkBool32,
	pub variablePointers: VkBool32,
	pub protectedMemory: VkBool32,
	pub samplerYcbcrConversion: VkBool32,
	pub shaderDrawParameters: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVulkan11Properties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub deviceUUID: [u8; VK_UUID_SIZE],
	pub driverUUID: [u8; VK_UUID_SIZE],
	pub deviceLUID: [u8; VK_LUID_SIZE],
	pub deviceNodeMask: u32,
	pub deviceLUIDValid: VkBool32,
	pub subgroupSize: u32,
	pub subgroupSupportedStages: VkShaderStageFlags,
	pub subgroupSupportedOperations: VkSubgroupFeatureFlags,
	pub subgroupQuadOperationsInAllStages: VkBool32,
	pub pointClippingBehavior: VkPointClippingBehavior,
	pub maxMultiviewViewCount: u32,
	pub maxMultiviewInstanceIndex: u32,
	pub protectedNoFault: VkBool32,
	pub maxPerSetDescriptors: u32,
	pub maxMemoryAllocationSize: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVulkan12Features
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub samplerMirrorClampToEdge: VkBool32,
	pub drawIndirectCount: VkBool32,
	pub storageBuffer8BitAccess: VkBool32,
	pub uniformAndStorageBuffer8BitAccess: VkBool32,
	pub storagePushConstant8: VkBool32,
	pub shaderBufferInt64Atomics: VkBool32,
	pub shaderSharedInt64Atomics: VkBool32,
	pub shaderFloat16: VkBool32,
	pub shaderInt8: VkBool32,
	pub descriptorIndexing: VkBool32,
	pub shaderInputAttachmentArrayDynamicIndexing: VkBool32,
	pub shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
	pub shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
	pub shaderUniformBufferArrayNonUniformIndexing: VkBool32,
	pub shaderSampledImageArrayNonUniformIndexing: VkBool32,
	pub shaderStorageBufferArrayNonUniformIndexing: VkBool32,
	pub shaderStorageImageArrayNonUniformIndexing: VkBool32,
	pub shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
	pub shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
	pub shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
	pub descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
	pub descriptorBindingSampledImageUpdateAfterBind: VkBool32,
	pub descriptorBindingStorageImageUpdateAfterBind: VkBool32,
	pub descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
	pub descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
	pub descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
	pub descriptorBindingUpdateUnusedWhilePending: VkBool32,
	pub descriptorBindingPartiallyBound: VkBool32,
	pub descriptorBindingVariableDescriptorCount: VkBool32,
	pub runtimeDescriptorArray: VkBool32,
	pub samplerFilterMinmax: VkBool32,
	pub scalarBlockLayout: VkBool32,
	pub imagelessFramebuffer: VkBool32,
	pub uniformBufferStandardLayout: VkBool32,
	pub shaderSubgroupExtendedTypes: VkBool32,
	pub separateDepthStencilLayouts: VkBool32,
	pub hostQueryReset: VkBool32,
	pub timelineSemaphore: VkBool32,
	pub bufferDeviceAddress: VkBool32,
	pub bufferDeviceAddressCaptureReplay: VkBool32,
	pub bufferDeviceAddressMultiDevice: VkBool32,
	pub vulkanMemoryModel: VkBool32,
	pub vulkanMemoryModelDeviceScope: VkBool32,
	pub vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
	pub shaderOutputViewportIndex: VkBool32,
	pub shaderOutputLayer: VkBool32,
	pub subgroupBroadcastDynamicId: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVulkan12Properties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub driverID: VkDriverId,
	pub driverName: [i8; VK_MAX_DRIVER_NAME_SIZE],
	pub driverInfo: [i8; VK_MAX_DRIVER_INFO_SIZE],
	pub conformanceVersion: VkConformanceVersion,
	pub denormBehaviorIndependence: VkShaderFloatControlsIndependence,
	pub roundingModeIndependence: VkShaderFloatControlsIndependence,
	pub shaderSignedZeroInfNanPreserveFloat16: VkBool32,
	pub shaderSignedZeroInfNanPreserveFloat32: VkBool32,
	pub shaderSignedZeroInfNanPreserveFloat64: VkBool32,
	pub shaderDenormPreserveFloat16: VkBool32,
	pub shaderDenormPreserveFloat32: VkBool32,
	pub shaderDenormPreserveFloat64: VkBool32,
	pub shaderDenormFlushToZeroFloat16: VkBool32,
	pub shaderDenormFlushToZeroFloat32: VkBool32,
	pub shaderDenormFlushToZeroFloat64: VkBool32,
	pub shaderRoundingModeRTEFloat16: VkBool32,
	pub shaderRoundingModeRTEFloat32: VkBool32,
	pub shaderRoundingModeRTEFloat64: VkBool32,
	pub shaderRoundingModeRTZFloat16: VkBool32,
	pub shaderRoundingModeRTZFloat32: VkBool32,
	pub shaderRoundingModeRTZFloat64: VkBool32,
	pub maxUpdateAfterBindDescriptorsInAllPools: u32,
	pub shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
	pub shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
	pub shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
	pub shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
	pub shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
	pub robustBufferAccessUpdateAfterBind: VkBool32,
	pub quadDivergentImplicitLod: VkBool32,
	pub maxPerStageDescriptorUpdateAfterBindSamplers: u32,
	pub maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
	pub maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
	pub maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
	pub maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
	pub maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
	pub maxPerStageUpdateAfterBindResources: u32,
	pub maxDescriptorSetUpdateAfterBindSamplers: u32,
	pub maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
	pub maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
	pub maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
	pub maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
	pub maxDescriptorSetUpdateAfterBindSampledImages: u32,
	pub maxDescriptorSetUpdateAfterBindStorageImages: u32,
	pub maxDescriptorSetUpdateAfterBindInputAttachments: u32,
	pub supportedDepthResolveModes: VkResolveModeFlags,
	pub supportedStencilResolveModes: VkResolveModeFlags,
	pub independentResolveNone: VkBool32,
	pub independentResolve: VkBool32,
	pub filterMinmaxSingleComponentFormats: VkBool32,
	pub filterMinmaxImageComponentMapping: VkBool32,
	pub maxTimelineSemaphoreValueDifference: uint64_t,
	pub framebufferIntegerColorSampleCounts: VkSampleCountFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVulkan13Features
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub robustImageAccess: VkBool32,
	pub inlineUniformBlock: VkBool32,
	pub descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
	pub pipelineCreationCacheControl: VkBool32,
	pub privateData: VkBool32,
	pub shaderDemoteToHelperInvocation: VkBool32,
	pub shaderTerminateInvocation: VkBool32,
	pub subgroupSizeControl: VkBool32,
	pub computeFullSubgroups: VkBool32,
	pub synchronization2: VkBool32,
	pub textureCompressionASTC_HDR: VkBool32,
	pub shaderZeroInitializeWorkgroupMemory: VkBool32,
	pub dynamicRendering: VkBool32,
	pub shaderIntegerDotProduct: VkBool32,
	pub maintenance4: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVulkan13Properties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub minSubgroupSize: u32,
	pub maxSubgroupSize: u32,
	pub maxComputeWorkgroupSubgroups: u32,
	pub requiredSubgroupSizeStages: VkShaderStageFlags,
	pub maxInlineUniformBlockSize: u32,
	pub maxPerStageDescriptorInlineUniformBlocks: u32,
	pub maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
	pub maxDescriptorSetInlineUniformBlocks: u32,
	pub maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
	pub maxInlineUniformTotalSize: u32,
	pub integerDotProduct8BitUnsignedAccelerated: VkBool32,
	pub integerDotProduct8BitSignedAccelerated: VkBool32,
	pub integerDotProduct8BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32,
	pub integerDotProduct4x8BitPackedSignedAccelerated: VkBool32,
	pub integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32,
	pub integerDotProduct16BitUnsignedAccelerated: VkBool32,
	pub integerDotProduct16BitSignedAccelerated: VkBool32,
	pub integerDotProduct16BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProduct32BitUnsignedAccelerated: VkBool32,
	pub integerDotProduct32BitSignedAccelerated: VkBool32,
	pub integerDotProduct32BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProduct64BitUnsignedAccelerated: VkBool32,
	pub integerDotProduct64BitSignedAccelerated: VkBool32,
	pub integerDotProduct64BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32,
	pub storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
	pub storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
	pub uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
	pub uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
	pub maxBufferSize: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineCompilerControlCreateInfoAMD
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub compilerControlFlags: VkPipelineCompilerControlFlagsAMD
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub deviceCoherentMemory: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceToolProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub name: [i8; VK_MAX_EXTENSION_NAME_SIZE],
	pub version: [i8; VK_MAX_EXTENSION_NAME_SIZE],
	pub purposes: VkToolPurposeFlags,
	pub description: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub layer: [i8; VK_MAX_EXTENSION_NAME_SIZE]
}

pub type VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSamplerCustomBorderColorCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub customBorderColor: VkClearColorValue,
	pub format: VkFormat
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceCustomBorderColorPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxCustomBorderColorSamplers: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceCustomBorderColorFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub customBorderColors: VkBool32,
	pub customBorderColorWithoutFormat: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSamplerBorderColorComponentMappingCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub components: VkComponentMapping,
	pub srgb: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub borderColorSwizzle: VkBool32,
	pub borderColorSwizzleFromImage: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureGeometryTrianglesDataKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub vertexFormat: VkFormat,
	pub vertexData: VkDeviceOrHostAddressConstKHR,
	pub vertexStride: VkDeviceSize,
	pub maxVertex: u32,
	pub indexType: VkIndexType,
	pub indexData: VkDeviceOrHostAddressConstKHR,
	pub transformData: VkDeviceOrHostAddressConstKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureGeometryAabbsDataKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub data: VkDeviceOrHostAddressConstKHR,
	pub stride: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureGeometryInstancesDataKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub arrayOfPointers: VkBool32,
	pub data: VkDeviceOrHostAddressConstKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureGeometryKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub geometryType: VkGeometryTypeKHR,
	pub geometry: VkAccelerationStructureGeometryDataKHR,
	pub flags: VkGeometryFlagsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureBuildGeometryInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub kind: VkAccelerationStructureTypeKHR,
	pub flags: VkBuildAccelerationStructureFlagsKHR,
	pub mode: VkBuildAccelerationStructureModeKHR,
	pub srcAccelerationStructure: VkAccelerationStructureKHR,
	pub dstAccelerationStructure: VkAccelerationStructureKHR,
	pub geometryCount: u32,
	pub pGeometries: *const VkAccelerationStructureGeometryKHR,
	pub ppGeometries: *const *const VkAccelerationStructureGeometryKHR,
	pub scratchData: VkDeviceOrHostAddressKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureBuildRangeInfoKHR
{
	pub primitiveCount: u32,
	pub primitiveOffset: u32,
	pub firstVertex: u32,
	pub transformOffset: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub createFlags: VkAccelerationStructureCreateFlagsKHR,
	pub buffer: VkBuffer,
	pub offset: VkDeviceSize,
	pub size: VkDeviceSize,
	pub kind: VkAccelerationStructureTypeKHR,
	pub deviceAddress: VkDeviceAddress
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAabbPositionsKHR
{
	pub minX: f32,
	pub minY: f32,
	pub minZ: f32,
	pub maxX: f32,
	pub maxY: f32,
	pub maxZ: f32
}

pub type VkAabbPositionsNV = VkAabbPositionsKHR;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkTransformMatrixKHR
{
	pub matrix: [f32; 34]
}

pub type VkTransformMatrixNV = VkTransformMatrixKHR;

pub type VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureDeviceAddressInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub accelerationStructure: VkAccelerationStructureKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureVersionInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pVersionData: *const u8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyAccelerationStructureInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub src: VkAccelerationStructureKHR,
	pub dst: VkAccelerationStructureKHR,
	pub mode: VkCopyAccelerationStructureModeKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyAccelerationStructureToMemoryInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub src: VkAccelerationStructureKHR,
	pub dst: VkDeviceOrHostAddressKHR,
	pub mode: VkCopyAccelerationStructureModeKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyMemoryToAccelerationStructureInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub src: VkDeviceOrHostAddressConstKHR,
	pub dst: VkAccelerationStructureKHR,
	pub mode: VkCopyAccelerationStructureModeKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRayTracingPipelineInterfaceCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub maxPipelineRayPayloadSize: u32,
	pub maxPipelineRayHitAttributeSize: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineLibraryCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub libraryCount: u32,
	pub pLibraries: *const VkPipeline
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub extendedDynamicState: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub extendedDynamicState2: VkBool32,
	pub extendedDynamicState2LogicOp: VkBool32,
	pub extendedDynamicState2PatchControlPoints: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceExtendedDynamicState3FeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub extendedDynamicState3TessellationDomainOrigin: VkBool32,
	pub extendedDynamicState3DepthClampEnable: VkBool32,
	pub extendedDynamicState3PolygonMode: VkBool32,
	pub extendedDynamicState3RasterizationSamples: VkBool32,
	pub extendedDynamicState3SampleMask: VkBool32,
	pub extendedDynamicState3AlphaToCoverageEnable: VkBool32,
	pub extendedDynamicState3AlphaToOneEnable: VkBool32,
	pub extendedDynamicState3LogicOpEnable: VkBool32,
	pub extendedDynamicState3ColorBlendEnable: VkBool32,
	pub extendedDynamicState3ColorBlendEquation: VkBool32,
	pub extendedDynamicState3ColorWriteMask: VkBool32,
	pub extendedDynamicState3RasterizationStream: VkBool32,
	pub extendedDynamicState3ConservativeRasterizationMode: VkBool32,
	pub extendedDynamicState3ExtraPrimitiveOverestimationSize: VkBool32,
	pub extendedDynamicState3DepthClipEnable: VkBool32,
	pub extendedDynamicState3SampleLocationsEnable: VkBool32,
	pub extendedDynamicState3ColorBlendAdvanced: VkBool32,
	pub extendedDynamicState3ProvokingVertexMode: VkBool32,
	pub extendedDynamicState3LineRasterizationMode: VkBool32,
	pub extendedDynamicState3LineStippleEnable: VkBool32,
	pub extendedDynamicState3DepthClipNegativeOneToOne: VkBool32,
	pub extendedDynamicState3ViewportWScalingEnable: VkBool32,
	pub extendedDynamicState3ViewportSwizzle: VkBool32,
	pub extendedDynamicState3CoverageToColorEnable: VkBool32,
	pub extendedDynamicState3CoverageToColorLocation: VkBool32,
	pub extendedDynamicState3CoverageModulationMode: VkBool32,
	pub extendedDynamicState3CoverageModulationTableEnable: VkBool32,
	pub extendedDynamicState3CoverageModulationTable: VkBool32,
	pub extendedDynamicState3CoverageReductionMode: VkBool32,
	pub extendedDynamicState3RepresentativeFragmentTestEnable: VkBool32,
	pub extendedDynamicState3ShadingRateImageEnable: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceExtendedDynamicState3PropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub dynamicPrimitiveTopologyUnrestricted: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkColorBlendEquationEXT
{
	pub srcColorBlendFactor: VkBlendFactor,
	pub dstColorBlendFactor: VkBlendFactor,
	pub colorBlendOp: VkBlendOp,
	pub srcAlphaBlendFactor: VkBlendFactor,
	pub dstAlphaBlendFactor: VkBlendFactor,
	pub alphaBlendOp: VkBlendOp
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkColorBlendAdvancedEXT
{
	pub advancedBlendOp: VkBlendOp,
	pub srcPremultiplied: VkBool32,
	pub dstPremultiplied: VkBool32,
	pub blendOverlap: VkBlendOverlapEXT,
	pub clampResults: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassTransformBeginInfoQCOM
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub transform: VkSurfaceTransformFlagBitsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyCommandTransformInfoQCOM
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub transform: VkSurfaceTransformFlagBitsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub transform: VkSurfaceTransformFlagBitsKHR,
	pub renderArea: VkRect2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub diagnosticsConfig: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceDiagnosticsConfigCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkDeviceDiagnosticsConfigFlagsNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderZeroInitializeWorkgroupMemory: VkBool32
}

pub type VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderSubgroupUniformControlFlow: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRobustness2FeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub robustBufferAccess2: VkBool32,
	pub robustImageAccess2: VkBool32,
	pub nullDescriptor: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRobustness2PropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub robustStorageBufferAccessSizeAlignment: VkDeviceSize,
	pub robustUniformBufferAccessSizeAlignment: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceImageRobustnessFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub robustImageAccess: VkBool32
}

pub type VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub workgroupMemoryExplicitLayout: VkBool32,
	pub workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32,
	pub workgroupMemoryExplicitLayout8BitAccess: VkBool32,
	pub workgroupMemoryExplicitLayout16BitAccess: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePortabilitySubsetFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub constantAlphaColorBlendFactors: VkBool32,
	pub events: VkBool32,
	pub imageViewFormatReinterpretation: VkBool32,
	pub imageViewFormatSwizzle: VkBool32,
	pub imageView2DOn3DImage: VkBool32,
	pub multisampleArrayImage: VkBool32,
	pub mutableComparisonSamplers: VkBool32,
	pub pointPolygons: VkBool32,
	pub samplerMipLodBias: VkBool32,
	pub separateStencilMaskRef: VkBool32,
	pub shaderSampleRateInterpolationFunctions: VkBool32,
	pub tessellationIsolines: VkBool32,
	pub tessellationPointMode: VkBool32,
	pub triangleFans: VkBool32,
	pub vertexAttributeAccessBeyondStride: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePortabilitySubsetPropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub minVertexInputBindingStrideAlignment: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevice4444FormatsFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub formatA4R4G4B4: VkBool32,
	pub formatA4B4G4R4: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub subpassShading: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferCopy2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcOffset: VkDeviceSize,
	pub dstOffset: VkDeviceSize,
	pub size: VkDeviceSize
}

pub type VkBufferCopy2KHR = VkBufferCopy2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageCopy2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcSubresource: VkImageSubresourceLayers,
	pub srcOffset: VkOffset3D,
	pub dstSubresource: VkImageSubresourceLayers,
	pub dstOffset: VkOffset3D,
	pub extent: VkExtent3D
}

pub type VkImageCopy2KHR = VkImageCopy2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageBlit2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcSubresource: VkImageSubresourceLayers,
	pub srcOffsets: [VkOffset3D; 2],
	pub dstSubresource: VkImageSubresourceLayers,
	pub dstOffsets: [VkOffset3D; 2]
}

pub type VkImageBlit2KHR = VkImageBlit2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferImageCopy2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub bufferOffset: VkDeviceSize,
	pub bufferRowLength: u32,
	pub bufferImageHeight: u32,
	pub imageSubresource: VkImageSubresourceLayers,
	pub imageOffset: VkOffset3D,
	pub imageExtent: VkExtent3D
}

pub type VkBufferImageCopy2KHR = VkBufferImageCopy2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageResolve2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcSubresource: VkImageSubresourceLayers,
	pub srcOffset: VkOffset3D,
	pub dstSubresource: VkImageSubresourceLayers,
	pub dstOffset: VkOffset3D,
	pub extent: VkExtent3D
}

pub type VkImageResolve2KHR = VkImageResolve2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyBufferInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcBuffer: VkBuffer,
	pub dstBuffer: VkBuffer,
	pub regionCount: u32,
	pub pRegions: *const VkBufferCopy2
}

pub type VkCopyBufferInfo2KHR = VkCopyBufferInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyImageInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcImage: VkImage,
	pub srcImageLayout: VkImageLayout,
	pub dstImage: VkImage,
	pub dstImageLayout: VkImageLayout,
	pub regionCount: u32,
	pub pRegions: *const VkImageCopy2
}

pub type VkCopyImageInfo2KHR = VkCopyImageInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBlitImageInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcImage: VkImage,
	pub srcImageLayout: VkImageLayout,
	pub dstImage: VkImage,
	pub dstImageLayout: VkImageLayout,
	pub regionCount: u32,
	pub pRegions: *const VkImageBlit2,
	pub filter: VkFilter
}

pub type VkBlitImageInfo2KHR = VkBlitImageInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyBufferToImageInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcBuffer: VkBuffer,
	pub dstImage: VkImage,
	pub dstImageLayout: VkImageLayout,
	pub regionCount: u32,
	pub pRegions: *const VkBufferImageCopy2
}

pub type VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyImageToBufferInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcImage: VkImage,
	pub srcImageLayout: VkImageLayout,
	pub dstBuffer: VkBuffer,
	pub regionCount: u32,
	pub pRegions: *const VkBufferImageCopy2
}

pub type VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkResolveImageInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcImage: VkImage,
	pub srcImageLayout: VkImageLayout,
	pub dstImage: VkImage,
	pub dstImageLayout: VkImageLayout,
	pub regionCount: u32,
	pub pRegions: *const VkImageResolve2
}

pub type VkResolveImageInfo2KHR = VkResolveImageInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderImageInt64Atomics: VkBool32,
	pub sparseImageInt64Atomics: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFragmentShadingRateAttachmentInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pFragmentShadingRateAttachment: *const VkAttachmentReference2,
	pub shadingRateAttachmentTexelSize: VkExtent2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineFragmentShadingRateStateCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub fragmentSize: VkExtent2D,
	pub combinerOps: [VkFragmentShadingRateCombinerOpKHR; 2]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub pipelineFragmentShadingRate: VkBool32,
	pub primitiveFragmentShadingRate: VkBool32,
	pub attachmentFragmentShadingRate: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub minFragmentShadingRateAttachmentTexelSize: VkExtent2D,
	pub maxFragmentShadingRateAttachmentTexelSize: VkExtent2D,
	pub maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32,
	pub primitiveFragmentShadingRateWithMultipleViewports: VkBool32,
	pub layeredShadingRateAttachments: VkBool32,
	pub fragmentShadingRateNonTrivialCombinerOps: VkBool32,
	pub maxFragmentSize: VkExtent2D,
	pub maxFragmentSizeAspectRatio: u32,
	pub maxFragmentShadingRateCoverageSamples: u32,
	pub maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits,
	pub fragmentShadingRateWithShaderDepthStencilWrites: VkBool32,
	pub fragmentShadingRateWithSampleMask: VkBool32,
	pub fragmentShadingRateWithShaderSampleMask: VkBool32,
	pub fragmentShadingRateWithConservativeRasterization: VkBool32,
	pub fragmentShadingRateWithFragmentShaderInterlock: VkBool32,
	pub fragmentShadingRateWithCustomSampleLocations: VkBool32,
	pub fragmentShadingRateStrictMultiplyCombiner: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentShadingRateKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub sampleCounts: VkSampleCountFlags,
	pub fragmentSize: VkExtent2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderTerminateInvocationFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderTerminateInvocation: VkBool32
}

pub type VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = VkPhysicalDeviceShaderTerminateInvocationFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub fragmentShadingRateEnums: VkBool32,
	pub supersampleFragmentShadingRates: VkBool32,
	pub noInvocationFragmentShadingRates: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub shadingRateType: VkFragmentShadingRateTypeNV,
	pub shadingRate: VkFragmentShadingRateNV,
	pub combinerOps: [VkFragmentShadingRateCombinerOpKHR; 2]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureBuildSizesInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub accelerationStructureSize: VkDeviceSize,
	pub updateScratchSize: VkDeviceSize,
	pub buildScratchSize: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceImage2DViewOf3DFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub image2DViewOf3D: VkBool32,
	pub sampler2DViewOf3D: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub mutableDescriptorType: VkBool32
}

pub type VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE = VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMutableDescriptorTypeListEXT
{
	pub descriptorTypeCount: u32,
	pub pDescriptorTypes: *const VkDescriptorType
}

pub type VkMutableDescriptorTypeListVALVE = VkMutableDescriptorTypeListEXT;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMutableDescriptorTypeCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub mutableDescriptorTypeListCount: u32,
	pub pMutableDescriptorTypeLists: *const VkMutableDescriptorTypeListEXT
}

pub type VkMutableDescriptorTypeCreateInfoVALVE = VkMutableDescriptorTypeCreateInfoEXT;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDepthClipControlFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub depthClipControl: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineViewportDepthClipControlCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub negativeOneToOne: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub vertexInputDynamicState: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub externalMemoryRDMA: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVertexInputBindingDescription2EXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub binding: u32,
	pub stride: u32,
	pub inputRate: VkVertexInputRate,
	pub divisor: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVertexInputAttributeDescription2EXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub location: u32,
	pub binding: u32,
	pub format: VkFormat,
	pub offset: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceColorWriteEnableFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub colorWriteEnable: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineColorWriteCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub attachmentCount: u32,
	pub pColorWriteEnables: *const VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryBarrier2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcStageMask: VkPipelineStageFlags2,
	pub srcAccessMask: VkAccessFlags2,
	pub dstStageMask: VkPipelineStageFlags2,
	pub dstAccessMask: VkAccessFlags2
}

pub type VkMemoryBarrier2KHR = VkMemoryBarrier2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageMemoryBarrier2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcStageMask: VkPipelineStageFlags2,
	pub srcAccessMask: VkAccessFlags2,
	pub dstStageMask: VkPipelineStageFlags2,
	pub dstAccessMask: VkAccessFlags2,
	pub oldLayout: VkImageLayout,
	pub newLayout: VkImageLayout,
	pub srcQueueFamilyIndex: u32,
	pub dstQueueFamilyIndex: u32,
	pub image: VkImage,
	pub subresourceRange: VkImageSubresourceRange
}

pub type VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferMemoryBarrier2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub srcStageMask: VkPipelineStageFlags2,
	pub srcAccessMask: VkAccessFlags2,
	pub dstStageMask: VkPipelineStageFlags2,
	pub dstAccessMask: VkAccessFlags2,
	pub srcQueueFamilyIndex: u32,
	pub dstQueueFamilyIndex: u32,
	pub buffer: VkBuffer,
	pub offset: VkDeviceSize,
	pub size: VkDeviceSize
}

pub type VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDependencyInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub dependencyFlags: VkDependencyFlags,
	pub memoryBarrierCount: u32,
	pub pMemoryBarriers: *const VkMemoryBarrier2,
	pub bufferMemoryBarrierCount: u32,
	pub pBufferMemoryBarriers: *const VkBufferMemoryBarrier2,
	pub imageMemoryBarrierCount: u32,
	pub pImageMemoryBarriers: *const VkImageMemoryBarrier2
}

pub type VkDependencyInfoKHR = VkDependencyInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSemaphoreSubmitInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub semaphore: VkSemaphore,
	pub value: uint64_t,
	pub stageMask: VkPipelineStageFlags2,
	pub deviceIndex: u32
}

pub type VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCommandBufferSubmitInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub commandBuffer: VkCommandBuffer,
	pub deviceMask: u32
}

pub type VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubmitInfo2
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkSubmitFlags,
	pub waitSemaphoreInfoCount: u32,
	pub pWaitSemaphoreInfos: *const VkSemaphoreSubmitInfo,
	pub commandBufferInfoCount: u32,
	pub pCommandBufferInfos: *const VkCommandBufferSubmitInfo,
	pub signalSemaphoreInfoCount: u32,
	pub pSignalSemaphoreInfos: *const VkSemaphoreSubmitInfo
}

pub type VkSubmitInfo2KHR = VkSubmitInfo2;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkQueueFamilyCheckpointProperties2NV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub checkpointExecutionStageMask: VkPipelineStageFlags2
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCheckpointData2NV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub stage: VkPipelineStageFlags2,
	pub pCheckpointMarker: *mut c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSynchronization2Features
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub synchronization2: VkBool32
}

pub type VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub primitivesGeneratedQuery: VkBool32,
	pub primitivesGeneratedQueryWithRasterizerDiscard: VkBool32,
	pub primitivesGeneratedQueryWithNonZeroStreams: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceLegacyDitheringFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub legacyDithering: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub multisampledRenderToSingleSampled: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubpassResolvePerformanceQueryEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub optimal: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMultisampledRenderToSingleSampledInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub multisampledRenderToSingleSampledEnable: VkBool32,
	pub rasterizationSamples: VkSampleCountFlagBits
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePipelineProtectedAccessFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub pipelineProtectedAccess: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkQueueFamilyVideoPropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub videoCodecOperations: VkVideoCodecOperationFlagsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkQueueFamilyQueryResultStatusPropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub queryResultStatusSupport: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoProfileListInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub profileCount: u32,
	pub pProfiles: *const VkVideoProfileInfoKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceVideoFormatInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub imageUsage: VkImageUsageFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoFormatPropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub format: VkFormat,
	pub componentMapping: VkComponentMapping,
	pub imageCreateFlags: VkImageCreateFlags,
	pub imageType: VkImageType,
	pub imageTiling: VkImageTiling,
	pub imageUsageFlags: VkImageUsageFlags
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoProfileInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub videoCodecOperation: VkVideoCodecOperationFlagBitsKHR,
	pub chromaSubsampling: VkVideoChromaSubsamplingFlagsKHR,
	pub lumaBitDepth: VkVideoComponentBitDepthFlagsKHR,
	pub chromaBitDepth: VkVideoComponentBitDepthFlagsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoCapabilitiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub flags: VkVideoCapabilityFlagsKHR,
	pub minBitstreamBufferOffsetAlignment: VkDeviceSize,
	pub minBitstreamBufferSizeAlignment: VkDeviceSize,
	pub pictureAccessGranularity: VkExtent2D,
	pub minCodedExtent: VkExtent2D,
	pub maxCodedExtent: VkExtent2D,
	pub maxDpbSlots: u32,
	pub maxActiveReferencePictures: u32,
	pub stdHeaderVersion: VkExtensionProperties
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoSessionMemoryRequirementsKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub memoryBindIndex: u32,
	pub memoryRequirements: VkMemoryRequirements
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBindVideoSessionMemoryInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub memoryBindIndex: u32,
	pub memory: VkDeviceMemory,
	pub memoryOffset: VkDeviceSize,
	pub memorySize: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoPictureResourceInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub codedOffset: VkOffset2D,
	pub codedExtent: VkExtent2D,
	pub baseArrayLayer: u32,
	pub imageViewBinding: VkImageView
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoReferenceSlotInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub slotIndex: i32,
	pub pPictureResource: *const VkVideoPictureResourceInfoKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeCapabilitiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub flags: VkVideoDecodeCapabilityFlagsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeUsageInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub videoUsageHints: VkVideoDecodeUsageFlagsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkVideoDecodeFlagsKHR,
	pub srcBuffer: VkBuffer,
	pub srcBufferOffset: VkDeviceSize,
	pub srcBufferRange: VkDeviceSize,
	pub dstPictureResource: VkVideoPictureResourceInfoKHR,
	pub pSetupReferenceSlot: *const VkVideoReferenceSlotInfoKHR,
	pub referenceSlotCount: u32,
	pub pReferenceSlots: *const VkVideoReferenceSlotInfoKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH264ProfileInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub stdProfileIdc: StdVideoH264ProfileIdc,
	pub pictureLayout: VkVideoDecodeH264PictureLayoutFlagBitsEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH264CapabilitiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxLevelIdc: StdVideoH264LevelIdc,
	pub fieldOffsetGranularity: VkOffset2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH264SessionParametersAddInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub stdSPSCount: u32,
	pub pStdSPSs: *const StdVideoH264SequenceParameterSet,
	pub stdPPSCount: u32,
	pub pStdPPSs: *const StdVideoH264PictureParameterSet
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH264SessionParametersCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub maxStdSPSCount: u32,
	pub maxStdPPSCount: u32,
	pub pParametersAddInfo: *const VkVideoDecodeH264SessionParametersAddInfoEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH264PictureInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pStdPictureInfo: *const StdVideoDecodeH264PictureInfo,
	pub sliceCount: u32,
	pub pSliceOffsets: *const u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH264DpbSlotInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pStdReferenceInfo: *const StdVideoDecodeH264ReferenceInfo
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH265ProfileInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub stdProfileIdc: StdVideoH265ProfileIdc
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH265CapabilitiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxLevelIdc: StdVideoH265LevelIdc
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH265SessionParametersAddInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub stdVPSCount: u32,
	pub pStdVPSs: *const StdVideoH265VideoParameterSet,
	pub stdSPSCount: u32,
	pub pStdSPSs: *const StdVideoH265SequenceParameterSet,
	pub stdPPSCount: u32,
	pub pStdPPSs: *const StdVideoH265PictureParameterSet
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH265SessionParametersCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub maxStdVPSCount: u32,
	pub maxStdSPSCount: u32,
	pub maxStdPPSCount: u32,
	pub pParametersAddInfo: *const VkVideoDecodeH265SessionParametersAddInfoEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH265PictureInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pStdPictureInfo: *mut StdVideoDecodeH265PictureInfo,
	pub sliceCount: u32,
	pub pSliceOffsets: *const u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoDecodeH265DpbSlotInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pStdReferenceInfo: *const StdVideoDecodeH265ReferenceInfo
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoSessionCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub queueFamilyIndex: u32,
	pub flags: VkVideoSessionCreateFlagsKHR,
	pub pVideoProfile: *const VkVideoProfileInfoKHR,
	pub pictureFormat: VkFormat,
	pub maxCodedExtent: VkExtent2D,
	pub referencePictureFormat: VkFormat,
	pub maxDpbSlots: u32,
	pub maxActiveReferencePictures: u32,
	pub pStdHeaderVersion: *const VkExtensionProperties
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoSessionParametersCreateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkVideoSessionParametersCreateFlagsKHR,
	pub videoSessionParametersTemplate: VkVideoSessionParametersKHR,
	pub videoSession: VkVideoSessionKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoSessionParametersUpdateInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub updateSequenceCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoBeginCodingInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkVideoBeginCodingFlagsKHR,
	pub videoSession: VkVideoSessionKHR,
	pub videoSessionParameters: VkVideoSessionParametersKHR,
	pub referenceSlotCount: u32,
	pub pReferenceSlots: *const VkVideoReferenceSlotInfoKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEndCodingInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkVideoEndCodingFlagsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoCodingControlInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkVideoCodingControlFlagsKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeUsageInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub videoUsageHints: VkVideoEncodeUsageFlagsKHR,
	pub videoContentHints: VkVideoEncodeContentFlagsKHR,
	pub tuningMode: VkVideoEncodeTuningModeKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkVideoEncodeFlagsKHR,
	pub qualityLevel: u32,
	pub dstBitstreamBuffer: VkBuffer,
	pub dstBitstreamBufferOffset: VkDeviceSize,
	pub dstBitstreamBufferMaxRange: VkDeviceSize,
	pub srcPictureResource: VkVideoPictureResourceInfoKHR,
	pub pSetupReferenceSlot: *const VkVideoReferenceSlotInfoKHR,
	pub referenceSlotCount: u32,
	pub pReferenceSlots: *const VkVideoReferenceSlotInfoKHR,
	pub precedingExternallyEncodedBytes: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeRateControlInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkVideoEncodeRateControlFlagsKHR,
	pub rateControlMode: VkVideoEncodeRateControlModeFlagBitsKHR,
	pub layerCount: u8,
	pub pLayerConfigs: *const VkVideoEncodeRateControlLayerInfoKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeRateControlLayerInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub averageBitrate: u32,
	pub maxBitrate: u32,
	pub frameRateNumerator: u32,
	pub frameRateDenominator: u32,
	pub virtualBufferSizeInMs: u32,
	pub initialVirtualBufferSizeInMs: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeCapabilitiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub flags: VkVideoEncodeCapabilityFlagsKHR,
	pub rateControlModes: VkVideoEncodeRateControlModeFlagsKHR,
	pub rateControlLayerCount: u8,
	pub qualityLevelCount: u8,
	pub inputImageDataFillAlignment: VkExtent2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264CapabilitiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub flags: VkVideoEncodeH264CapabilityFlagsEXT,
	pub inputModeFlags: VkVideoEncodeH264InputModeFlagsEXT,
	pub outputModeFlags: VkVideoEncodeH264OutputModeFlagsEXT,
	pub maxPPictureL0ReferenceCount: u8,
	pub maxBPictureL0ReferenceCount: u8,
	pub maxL1ReferenceCount: u8,
	pub motionVectorsOverPicBoundariesFlag: VkBool32,
	pub maxBytesPerPicDenom: u32,
	pub maxBitsPerMbDenom: u32,
	pub log2MaxMvLengthHorizontal: u32,
	pub log2MaxMvLengthVertical: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264SessionParametersAddInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub stdSPSCount: u32,
	pub pStdSPSs: *const StdVideoH264SequenceParameterSet,
	pub stdPPSCount: u32,
	pub pStdPPSs: *const StdVideoH264PictureParameterSet
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264SessionParametersCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub maxStdSPSCount: u32,
	pub maxStdPPSCount: u32,
	pub pParametersAddInfo: *const VkVideoEncodeH264SessionParametersAddInfoEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264DpbSlotInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub slotIndex: i8,
	pub pStdReferenceInfo: *const StdVideoEncodeH264ReferenceInfo
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264VclFrameInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pReferenceFinalLists: *const VkVideoEncodeH264ReferenceListsInfoEXT,
	pub naluSliceEntryCount: u32,
	pub pNaluSliceEntries: *const VkVideoEncodeH264NaluSliceInfoEXT,
	pub pCurrentPictureInfo: *const StdVideoEncodeH264PictureInfo
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264ReferenceListsInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub referenceList0EntryCount: u8,
	pub pReferenceList0Entries: *const VkVideoEncodeH264DpbSlotInfoEXT,
	pub referenceList1EntryCount: u8,
	pub pReferenceList1Entries: *const VkVideoEncodeH264DpbSlotInfoEXT,
	pub pMemMgmtCtrlOperations: *const StdVideoEncodeH264RefMemMgmtCtrlOperations
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264EmitPictureParametersInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub spsId: u8,
	pub emitSpsEnable: VkBool32,
	pub ppsIdEntryCount: u32,
	pub ppsIdEntries: *const u8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264ProfileInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub stdProfileIdc: StdVideoH264ProfileIdc
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264NaluSliceInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub mbCount: u32,
	pub pReferenceFinalLists: *const VkVideoEncodeH264ReferenceListsInfoEXT,
	pub pSliceHeaderStd: *const StdVideoEncodeH264SliceHeader
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264RateControlInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub gopFrameCount: u32,
	pub idrPeriod: u32,
	pub consecutiveBFrameCount: u32,
	pub rateControlStructure: VkVideoEncodeH264RateControlStructureEXT,
	pub temporalLayerCount: u8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264QpEXT
{
	pub qpI: i32,
	pub qpP: i32,
	pub qpB: i32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264FrameSizeEXT
{
	pub frameISize: u32,
	pub framePSize: u32,
	pub frameBSize: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH264RateControlLayerInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub temporalLayerId: u8,
	pub useInitialRcQp: VkBool32,
	pub initialRcQp: VkVideoEncodeH264QpEXT,
	pub useMinQp: VkBool32,
	pub minQp: VkVideoEncodeH264QpEXT,
	pub useMaxQp: VkBool32,
	pub maxQp: VkVideoEncodeH264QpEXT,
	pub useMaxFrameSize: VkBool32,
	pub maxFrameSize: VkVideoEncodeH264FrameSizeEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265CapabilitiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub flags: VkVideoEncodeH265CapabilityFlagsEXT,
	pub inputModeFlags: VkVideoEncodeH265InputModeFlagsEXT,
	pub outputModeFlags: VkVideoEncodeH265OutputModeFlagsEXT,
	pub ctbSizes: VkVideoEncodeH265CtbSizeFlagsEXT,
	pub transformBlockSizes: VkVideoEncodeH265TransformBlockSizeFlagsEXT,
	pub maxPPictureL0ReferenceCount: u8,
	pub maxBPictureL0ReferenceCount: u8,
	pub maxL1ReferenceCount: u8,
	pub maxSubLayersCount: u8,
	pub minLog2MinLumaCodingBlockSizeMinus3: u8,
	pub maxLog2MinLumaCodingBlockSizeMinus3: u8,
	pub minLog2MinLumaTransformBlockSizeMinus2: u8,
	pub maxLog2MinLumaTransformBlockSizeMinus2: u8,
	pub minMaxTransformHierarchyDepthInter: u8,
	pub maxMaxTransformHierarchyDepthInter: u8,
	pub minMaxTransformHierarchyDepthIntra: u8,
	pub maxMaxTransformHierarchyDepthIntra: u8,
	pub maxDiffCuQpDeltaDepth: u8,
	pub minMaxNumMergeCand: u8,
	pub maxMaxNumMergeCand: u8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265SessionParametersAddInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub stdVPSCount: u32,
	pub pStdVPSs: *const StdVideoH265VideoParameterSet,
	pub stdSPSCount: u32,
	pub pStdSPSs: *const StdVideoH265SequenceParameterSet,
	pub stdPPSCount: u32,
	pub pStdPPSs: *const StdVideoH265PictureParameterSet
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265SessionParametersCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub maxStdVPSCount: u32,
	pub maxStdSPSCount: u32,
	pub maxStdPPSCount: u32,
	pub pParametersAddInfo: *const VkVideoEncodeH265SessionParametersAddInfoEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265VclFrameInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pReferenceFinalLists: *const VkVideoEncodeH265ReferenceListsInfoEXT,
	pub naluSliceSegmentEntryCount: u32,
	pub pNaluSliceSegmentEntries: *const VkVideoEncodeH265NaluSliceSegmentInfoEXT,
	pub pCurrentPictureInfo: *const StdVideoEncodeH265PictureInfo
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265EmitPictureParametersInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub vpsId: u8,
	pub spsId: u8,
	pub emitVpsEnable: VkBool32,
	pub emitSpsEnable: VkBool32,
	pub ppsIdEntryCount: u32,
	pub ppsIdEntries: *const u8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265NaluSliceSegmentInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub ctbCount: u32,
	pub pReferenceFinalLists: *const VkVideoEncodeH265ReferenceListsInfoEXT,
	pub pSliceSegmentHeaderStd: *const StdVideoEncodeH265SliceSegmentHeader
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265RateControlInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub gopFrameCount: u32,
	pub idrPeriod: u32,
	pub consecutiveBFrameCount: u32,
	pub rateControlStructure: VkVideoEncodeH265RateControlStructureEXT,
	pub subLayerCount: u8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265QpEXT
{
	pub qpI: i32,
	pub qpP: i32,
	pub qpB: i32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265FrameSizeEXT
{
	pub frameISize: u32,
	pub framePSize: u32,
	pub frameBSize: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265RateControlLayerInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub temporalId: u8,
	pub useInitialRcQp: VkBool32,
	pub initialRcQp: VkVideoEncodeH265QpEXT,
	pub useMinQp: VkBool32,
	pub minQp: VkVideoEncodeH265QpEXT,
	pub useMaxQp: VkBool32,
	pub maxQp: VkVideoEncodeH265QpEXT,
	pub useMaxFrameSize: VkBool32,
	pub maxFrameSize: VkVideoEncodeH265FrameSizeEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265ProfileInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub stdProfileIdc: StdVideoH265ProfileIdc
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265DpbSlotInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub slotIndex: i8,
	pub pStdReferenceInfo: *const StdVideoEncodeH265ReferenceInfo
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkVideoEncodeH265ReferenceListsInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub referenceList0EntryCount: u8,
	pub pReferenceList0Entries: *const VkVideoEncodeH265DpbSlotInfoEXT,
	pub referenceList1EntryCount: u8,
	pub pReferenceList1Entries: *const VkVideoEncodeH265DpbSlotInfoEXT,
	pub pReferenceModifications: *const StdVideoEncodeH265ReferenceModifications
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub inheritedViewportScissor2D: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCommandBufferInheritanceViewportScissorInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub viewportScissor2D: VkBool32,
	pub viewportDepthCount: u32,
	pub pViewportDepths: *const VkViewport
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub ycbcr2plane444Formats: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceProvokingVertexFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub provokingVertexLast: VkBool32,
	pub transformFeedbackPreservesProvokingVertex: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceProvokingVertexPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub provokingVertexModePerPipeline: VkBool32,
	pub transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub provokingVertexMode: VkProvokingVertexModeEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCuModuleCreateInfoNVX
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub dataSize: usize,
	pub pData: *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCuFunctionCreateInfoNVX
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub module: VkCuModuleNVX,
	pub pName: *const i8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCuLaunchInfoNVX
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub function: VkCuFunctionNVX,
	pub gridDimX: u32,
	pub gridDimY: u32,
	pub gridDimZ: u32,
	pub blockDimX: u32,
	pub blockDimY: u32,
	pub blockDimZ: u32,
	pub sharedMemBytes: u32,
	pub paramCount: usize,
	pub pParams: *const *const c_void,
	pub extraCount: usize,
	pub pExtras: *const *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderIntegerDotProductFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderIntegerDotProduct: VkBool32
}

pub type VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR = VkPhysicalDeviceShaderIntegerDotProductFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderIntegerDotProductProperties
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub integerDotProduct8BitUnsignedAccelerated: VkBool32,
	pub integerDotProduct8BitSignedAccelerated: VkBool32,
	pub integerDotProduct8BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32,
	pub integerDotProduct4x8BitPackedSignedAccelerated: VkBool32,
	pub integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32,
	pub integerDotProduct16BitUnsignedAccelerated: VkBool32,
	pub integerDotProduct16BitSignedAccelerated: VkBool32,
	pub integerDotProduct16BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProduct32BitUnsignedAccelerated: VkBool32,
	pub integerDotProduct32BitSignedAccelerated: VkBool32,
	pub integerDotProduct32BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProduct64BitUnsignedAccelerated: VkBool32,
	pub integerDotProduct64BitSignedAccelerated: VkBool32,
	pub integerDotProduct64BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32,
	pub integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32
}

pub type VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR = VkPhysicalDeviceShaderIntegerDotProductProperties;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDrmPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub hasPrimary: VkBool32,
	pub hasRender: VkBool32,
	pub primaryMajor: int64_t,
	pub primaryMinor: int64_t,
	pub renderMajor: int64_t,
	pub renderMinor: int64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub fragmentShaderBarycentric: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub triStripVertexOrderIndependentOfProvokingVertex: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub rayTracingMotionBlur: VkBool32,
	pub rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureGeometryMotionTrianglesDataNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub vertexData: VkDeviceOrHostAddressConstKHR
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureMotionInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub maxInstances: u32,
	pub flags: VkAccelerationStructureMotionInfoFlagsNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSRTDataNV
{
	pub sx: f32,
	pub a: f32,
	pub b: f32,
	pub pvx: f32,
	pub sy: f32,
	pub c: f32,
	pub pvy: f32,
	pub sz: f32,
	pub pvz: f32,
	pub qx: f32,
	pub qy: f32,
	pub qz: f32,
	pub qw: f32,
	pub tx: f32,
	pub ty: f32,
	pub tz: f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureMotionInstanceNV
{
	pub kind: VkAccelerationStructureMotionInstanceTypeNV,
	pub flags: VkAccelerationStructureMotionInstanceFlagsNV,
	pub data: VkAccelerationStructureMotionInstanceDataNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMemoryGetRemoteAddressInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub memory: VkDeviceMemory,
	pub handleType: VkExternalMemoryHandleTypeFlagBits
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportMemoryBufferCollectionFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub collection: VkBufferCollectionFUCHSIA,
	pub index: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferCollectionImageCreateInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub collection: VkBufferCollectionFUCHSIA,
	pub index: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferCollectionBufferCreateInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub collection: VkBufferCollectionFUCHSIA,
	pub index: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferCollectionCreateInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub collectionToken: zx_handle_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferCollectionPropertiesFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub memoryTypeBits: u32,
	pub bufferCount: u32,
	pub createInfoIndex: u32,
	pub sysmemPixelFormat: uint64_t,
	pub formatFeatures: VkFormatFeatureFlags,
	pub sysmemColorSpaceIndex: VkSysmemColorSpaceFUCHSIA,
	pub samplerYcbcrConversionComponents: VkComponentMapping,
	pub suggestedYcbcrModel: VkSamplerYcbcrModelConversion,
	pub suggestedYcbcrRange: VkSamplerYcbcrRange,
	pub suggestedXChromaOffset: VkChromaLocation,
	pub suggestedYChromaOffset: VkChromaLocation
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferConstraintsInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub createInfo: VkBufferCreateInfo,
	pub requiredFormatFeatures: VkFormatFeatureFlags,
	pub bufferCollectionConstraints: VkBufferCollectionConstraintsInfoFUCHSIA
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSysmemColorSpaceFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub colorSpace: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageFormatConstraintsInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub imageCreateInfo: VkImageCreateInfo,
	pub requiredFormatFeatures: VkFormatFeatureFlags,
	pub flags: VkImageFormatConstraintsFlagsFUCHSIA,
	pub sysmemPixelFormat: uint64_t,
	pub colorSpaceCount: u32,
	pub pColorSpaces: *const VkSysmemColorSpaceFUCHSIA
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageConstraintsInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub formatConstraintsCount: u32,
	pub pFormatConstraints: *const VkImageFormatConstraintsInfoFUCHSIA,
	pub bufferCollectionConstraints: VkBufferCollectionConstraintsInfoFUCHSIA,
	pub flags: VkImageConstraintsInfoFlagsFUCHSIA
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkBufferCollectionConstraintsInfoFUCHSIA
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub minBufferCount: u32,
	pub maxBufferCount: u32,
	pub minBufferCountForCamping: u32,
	pub minBufferCountForDedicatedSlack: u32,
	pub minBufferCountForSharedSlack: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub formatRgba10x6WithoutYCbCrSampler: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkFormatProperties3
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub linearTilingFeatures: VkFormatFeatureFlags2,
	pub optimalTilingFeatures: VkFormatFeatureFlags2,
	pub bufferFeatures: VkFormatFeatureFlags2
}

pub type VkFormatProperties3KHR = VkFormatProperties3;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDrmFormatModifierPropertiesList2EXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub drmFormatModifierCount: u32,
	pub pDrmFormatModifierProperties: *mut VkDrmFormatModifierProperties2EXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDrmFormatModifierProperties2EXT
{
	pub drmFormatModifier: uint64_t,
	pub drmFormatModifierPlaneCount: u32,
	pub drmFormatModifierTilingFeatures: VkFormatFeatureFlags2
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAndroidHardwareBufferFormatProperties2ANDROID
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub format: VkFormat,
	pub externalFormat: uint64_t,
	pub formatFeatures: VkFormatFeatureFlags2,
	pub samplerYcbcrConversionComponents: VkComponentMapping,
	pub suggestedYcbcrModel: VkSamplerYcbcrModelConversion,
	pub suggestedYcbcrRange: VkSamplerYcbcrRange,
	pub suggestedXChromaOffset: VkChromaLocation,
	pub suggestedYChromaOffset: VkChromaLocation
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineRenderingCreateInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub viewMask: u32,
	pub colorAttachmentCount: u32,
	pub pColorAttachmentFormats: *const VkFormat,
	pub depthAttachmentFormat: VkFormat,
	pub stencilAttachmentFormat: VkFormat
}

pub type VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderingInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkRenderingFlags,
	pub renderArea: VkRect2D,
	pub layerCount: u32,
	pub viewMask: u32,
	pub colorAttachmentCount: u32,
	pub pColorAttachments: *const VkRenderingAttachmentInfo,
	pub pDepthAttachment: *const VkRenderingAttachmentInfo,
	pub pStencilAttachment: *const VkRenderingAttachmentInfo
}

pub type VkRenderingInfoKHR = VkRenderingInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderingAttachmentInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub imageView: VkImageView,
	pub imageLayout: VkImageLayout,
	pub resolveMode: VkResolveModeFlagBits,
	pub resolveImageView: VkImageView,
	pub resolveImageLayout: VkImageLayout,
	pub loadOp: VkAttachmentLoadOp,
	pub storeOp: VkAttachmentStoreOp,
	pub clearValue: VkClearValue
}

pub type VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderingFragmentShadingRateAttachmentInfoKHR
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub imageView: VkImageView,
	pub imageLayout: VkImageLayout,
	pub shadingRateAttachmentTexelSize: VkExtent2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderingFragmentDensityMapAttachmentInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub imageView: VkImageView,
	pub imageLayout: VkImageLayout
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDynamicRenderingFeatures
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub dynamicRendering: VkBool32
}

pub type VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCommandBufferInheritanceRenderingInfo
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkRenderingFlags,
	pub viewMask: u32,
	pub colorAttachmentCount: u32,
	pub pColorAttachmentFormats: *const VkFormat,
	pub depthAttachmentFormat: VkFormat,
	pub stencilAttachmentFormat: VkFormat,
	pub rasterizationSamples: VkSampleCountFlagBits
}

pub type VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAttachmentSampleCountInfoAMD
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub colorAttachmentCount: u32,
	pub pColorAttachmentSamples: *const VkSampleCountFlagBits,
	pub depthStencilAttachmentSamples: VkSampleCountFlagBits
}

pub type VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMultiviewPerViewAttributesInfoNVX
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub perViewAttributes: VkBool32,
	pub perViewAttributesPositionXOnly: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceImageViewMinLodFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub minLod: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageViewMinLodCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub minLod: f32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub rasterizationOrderColorAttachmentAccess: VkBool32,
	pub rasterizationOrderDepthAttachmentAccess: VkBool32,
	pub rasterizationOrderStencilAttachmentAccess: VkBool32
}

pub type VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT;

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub linearColorAttachment: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub graphicsPipelineLibrary: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub graphicsPipelineLibraryFastLinking: VkBool32,
	pub graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkGraphicsPipelineLibraryCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub flags: VkGraphicsPipelineLibraryFlagsEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub descriptorSetHostMapping: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorSetBindingReferenceVALVE
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub descriptorSetLayout: VkDescriptorSetLayout,
	pub binding: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDescriptorSetLayoutHostMappingInfoVALVE
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub descriptorOffset: usize,
	pub descriptorSize: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderModuleIdentifier: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderModuleIdentifierAlgorithmUUID: [u8; VK_UUID_SIZE]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineShaderStageModuleIdentifierCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub identifierSize: u32,
	pub pIdentifier: *const u8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkShaderModuleIdentifierEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub identifierSize: u32,
	pub identifier: [u8; VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageCompressionControlEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub flags: VkImageCompressionFlagsEXT,
	pub compressionControlPlaneCount: u32,
	pub pFixedRateFlags: *mut VkImageCompressionFixedRateFlagsEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceImageCompressionControlFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub imageCompressionControl: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageCompressionPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub imageCompressionFlags: VkImageCompressionFlagsEXT,
	pub imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub imageCompressionControlSwapchain: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageSubresource2EXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub imageSubresource: VkImageSubresource
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkSubresourceLayout2EXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub subresourceLayout: VkSubresourceLayout
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassCreationControlEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub disallowMerging: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassCreationFeedbackInfoEXT
{
	pub postMergeSubpassCount: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassCreationFeedbackCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pRenderPassFeedback: *mut VkRenderPassCreationFeedbackInfoEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassSubpassFeedbackInfoEXT
{
	pub subpassMergeStatus: VkSubpassMergeStatusEXT,
	pub description: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub postMergeIndex: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkRenderPassSubpassFeedbackCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pSubpassFeedback: *mut VkRenderPassSubpassFeedbackInfoEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub subpassMergeFeedback: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMicromapBuildInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub kind: VkMicromapTypeEXT,
	pub flags: VkBuildMicromapFlagsEXT,
	pub mode: VkBuildMicromapModeEXT,
	pub dstMicromap: VkMicromapEXT,
	pub usageCountsCount: u32,
	pub pUsageCounts: *const VkMicromapUsageEXT,
	pub ppUsageCounts: *const *const VkMicromapUsageEXT,
	pub data: VkDeviceOrHostAddressConstKHR,
	pub scratchData: VkDeviceOrHostAddressKHR,
	pub triangleArray: VkDeviceOrHostAddressConstKHR,
	pub triangleArrayStride: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMicromapCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub createFlags: VkMicromapCreateFlagsEXT,
	pub buffer: VkBuffer,
	pub offset: VkDeviceSize,
	pub size: VkDeviceSize,
	pub kind: VkMicromapTypeEXT,
	pub deviceAddress: VkDeviceAddress
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMicromapVersionInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub pVersionData: *const u8
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyMicromapInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub src: VkMicromapEXT,
	pub dst: VkMicromapEXT,
	pub mode: VkCopyMicromapModeEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyMicromapToMemoryInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub src: VkMicromapEXT,
	pub dst: VkDeviceOrHostAddressKHR,
	pub mode: VkCopyMicromapModeEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkCopyMemoryToMicromapInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub src: VkDeviceOrHostAddressConstKHR,
	pub dst: VkMicromapEXT,
	pub mode: VkCopyMicromapModeEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMicromapBuildSizesInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub micromapSize: VkDeviceSize,
	pub buildScratchSize: VkDeviceSize,
	pub discardable: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMicromapUsageEXT
{
	pub count: u32,
	pub subdivisionLevel: u32,
	pub format: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkMicromapTriangleEXT
{
	pub dataOffset: u32,
	pub subdivisionLevel: u16,
	pub format: u16
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceOpacityMicromapFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub micromap: VkBool32,
	pub micromapCaptureReplay: VkBool32,
	pub micromapHostCommands: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceOpacityMicromapPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxOpacity2StateSubdivisionLevel: u32,
	pub maxOpacity4StateSubdivisionLevel: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAccelerationStructureTrianglesOpacityMicromapEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub indexType: VkIndexType,
	pub indexBuffer: VkDeviceOrHostAddressConstKHR,
	pub indexStride: VkDeviceSize,
	pub baseTriangle: u32,
	pub usageCountsCount: u32,
	pub pUsageCounts: *const VkMicromapUsageEXT,
	pub ppUsageCounts: *const *const VkMicromapUsageEXT,
	pub micromap: VkMicromapEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelinePropertiesIdentifierEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub pipelineIdentifier: [u8; VK_UUID_SIZE]
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePipelinePropertiesFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub pipelinePropertiesIdentifier: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderEarlyAndLateFragmentTests: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMetalObjectCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub exportObjectType: VkExportMetalObjectTypeFlagBitsEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMetalObjectsInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMetalDeviceInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub mtlDevice: MTLDevice_id
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMetalCommandQueueInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub queue: VkQueue,
	pub mtlCommandQueue: MTLCommandQueue_id
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMetalBufferInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub memory: VkDeviceMemory,
	pub mtlBuffer: MTLBuffer_id
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportMetalBufferInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub mtlBuffer: MTLBuffer_id
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMetalTextureInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub image: VkImage,
	pub imageView: VkImageView,
	pub bufferView: VkBufferView,
	pub plane: VkImageAspectFlagBits,
	pub mtlTexture: MTLTexture_id
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportMetalTextureInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub plane: VkImageAspectFlagBits,
	pub mtlTexture: MTLTexture_id
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMetalIOSurfaceInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub image: VkImage,
	pub ioSurface: IOSurfaceRef
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportMetalIOSurfaceInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub ioSurface: IOSurfaceRef
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkExportMetalSharedEventInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub semaphore: VkSemaphore,
	pub event: VkEvent,
	pub mtlSharedEvent: MTLSharedEvent_id
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImportMetalSharedEventInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub mtlSharedEvent: MTLSharedEvent_id
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub nonSeamlessCubeMap: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePipelineRobustnessFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub pipelineRobustness: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPipelineRobustnessCreateInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub storageBuffers: VkPipelineRobustnessBufferBehaviorEXT,
	pub uniformBuffers: VkPipelineRobustnessBufferBehaviorEXT,
	pub vertexInputs: VkPipelineRobustnessBufferBehaviorEXT,
	pub images: VkPipelineRobustnessImageBehaviorEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDevicePipelineRobustnessPropertiesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehaviorEXT,
	pub defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehaviorEXT,
	pub defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehaviorEXT,
	pub defaultRobustnessImages: VkPipelineRobustnessImageBehaviorEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkImageViewSampleWeightCreateInfoQCOM
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub filterCenter: VkOffset2D,
	pub filterSize: VkExtent2D,
	pub numPhases: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceImageProcessingFeaturesQCOM
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub textureSampleWeighted: VkBool32,
	pub textureBoxFilter: VkBool32,
	pub textureBlockMatch: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceImageProcessingPropertiesQCOM
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub maxWeightFilterPhases: u32,
	pub maxWeightFilterDimension: VkExtent2D,
	pub maxBlockMatchRegion: VkExtent2D,
	pub maxBoxFilterBlockSize: VkExtent2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceTilePropertiesFeaturesQCOM
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub tileProperties: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkTilePropertiesQCOM
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub tileSize: VkExtent3D,
	pub apronSize: VkExtent2D,
	pub origin: VkOffset2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceAmigoProfilingFeaturesSEC
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub amigoProfiling: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkAmigoProfilingSubmitInfoSEC
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub firstDrawTimestamp: uint64_t,
	pub swapBufferTimestamp: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub attachmentFeedbackLoopLayout: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceDepthClampZeroOneFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub depthClampZeroOne: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceAddressBindingReportFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub reportAddressBinding: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceAddressBindingCallbackDataEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub flags: VkDeviceAddressBindingFlagsEXT,
	pub baseAddress: VkDeviceAddress,
	pub size: VkDeviceSize,
	pub bindingType: VkDeviceAddressBindingTypeEXT
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceOpticalFlowFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub opticalFlow: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceOpticalFlowPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub supportedOutputGridSizes: VkOpticalFlowGridSizeFlagsNV,
	pub supportedHintGridSizes: VkOpticalFlowGridSizeFlagsNV,
	pub hintSupported: VkBool32,
	pub costSupported: VkBool32,
	pub bidirectionalFlowSupported: VkBool32,
	pub globalFlowSupported: VkBool32,
	pub minWidth: u32,
	pub minHeight: u32,
	pub maxWidth: u32,
	pub maxHeight: u32,
	pub maxNumRegionsOfInterest: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkOpticalFlowImageFormatInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub usage: VkOpticalFlowUsageFlagsNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkOpticalFlowImageFormatPropertiesNV
{
	pub sType: VkStructureType,
	pub pNext: *const c_void,
	pub format: VkFormat
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkOpticalFlowSessionCreateInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub width: u32,
	pub height: u32,
	pub imageFormat: VkFormat,
	pub flowVectorFormat: VkFormat,
	pub costFormat: VkFormat,
	pub outputGridSize: VkOpticalFlowGridSizeFlagsNV,
	pub hintGridSize: VkOpticalFlowGridSizeFlagsNV,
	pub performanceLevel: VkOpticalFlowPerformanceLevelNV,
	pub flags: VkOpticalFlowSessionCreateFlagsNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkOpticalFlowSessionCreatePrivateDataInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub id: u32,
	pub size: u32,
	pub pPrivateData: *const c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkOpticalFlowExecuteInfoNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub flags: VkOpticalFlowExecuteFlagsNV,
	pub regionCount: u32,
	pub pRegions: *const VkRect2D
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceFaultFeaturesEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub deviceFault: VkBool32,
	pub deviceFaultVendorBinary: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceFaultAddressInfoEXT
{
	pub addressType: VkDeviceFaultAddressTypeEXT,
	pub reportedAddress: VkDeviceAddress,
	pub addressPrecision: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceFaultVendorInfoEXT
{
	pub description: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub vendorFaultCode: uint64_t,
	pub vendorFaultData: uint64_t
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceFaultCountsEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub addressInfoCount: u32,
	pub vendorInfoCount: u32,
	pub vendorBinarySize: VkDeviceSize
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceFaultInfoEXT
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub description: [i8; VK_MAX_DESCRIPTION_SIZE],
	pub pAddressInfos: *mut VkDeviceFaultAddressInfoEXT,
	pub pVendorInfos: *mut VkDeviceFaultVendorInfoEXT,
	pub pVendorBinaryData: *mut c_void
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDeviceFaultVendorBinaryHeaderVersionOneEXT
{
	pub headerSize: u32,
	pub headerVersion: VkDeviceFaultVendorBinaryHeaderVersionEXT,
	pub vendorID: u32,
	pub deviceID: u32,
	pub driverVersion: u32,
	pub pipelineCacheUUID: [u8; VK_UUID_SIZE],
	pub applicationNameOffset: u32,
	pub applicationVersion: u32,
	pub engineNameOffset: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkDecompressMemoryRegionNV
{
	pub srcAddress: VkDeviceAddress,
	pub dstAddress: VkDeviceAddress,
	pub compressedSize: VkDeviceSize,
	pub decompressedSize: VkDeviceSize,
	pub decompressionMethod: VkMemoryDecompressionMethodFlagsNV
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderCoreBuiltinsPropertiesARM
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderCoreMask: uint64_t,
	pub shaderCoreCount: u32,
	pub shaderWarpsPerCore: u32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub shaderCoreBuiltins: VkBool32
}

#[derive(Clone, Copy, Debug)]
#[repr(C)]
pub struct VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV
{
	pub sType: VkStructureType,
	pub pNext: *mut c_void,
	pub rayTracingInvocationReorder: VkBool32
}

pub type PFN_vkCreateInstance = unsafe extern "system" fn(
	pCreateInfo: *mut VkInstanceCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pInstance: *mut VkInstance
) -> VkResult;

pub type PFN_vkDestroyInstance = unsafe extern "system" fn(
	instance: VkInstance,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkEnumeratePhysicalDevices = unsafe extern "system" fn(
	instance: VkInstance,
	pPhysicalDeviceCount: *mut u32,
	pPhysicalDevices: *mut VkPhysicalDevice
) -> VkResult;

pub type PFN_vkGetDeviceProcAddr = unsafe extern "system" fn(
	device: VkDevice,
	pName: *mut char
) -> VkResult;

pub type PFN_vkGetInstanceProcAddr = unsafe extern "system" fn(
	instance: VkInstance,
	pName: *mut char
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pProperties: *mut VkPhysicalDeviceProperties
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pQueueFamilyPropertyCount: *mut u32,
	pQueueFamilyProperties: *mut VkQueueFamilyProperties
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceMemoryProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceFeatures = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pFeatures: *mut VkPhysicalDeviceFeatures
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceFormatProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	format: VkFormat,
	pFormatProperties: *mut VkFormatProperties
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceImageFormatProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	format: VkFormat,
	imageType: VkImageType,
	tiling: VkImageTiling,
	usage: VkImageUsageFlags,
	flags: VkImageCreateFlags,
	pImageFormatProperties: *mut VkImageFormatProperties
) -> VkResult;

pub type PFN_vkCreateDevice = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pCreateInfo: *mut VkDeviceCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pDevice: *mut VkDevice
) -> VkResult;

pub type PFN_vkDestroyDevice = unsafe extern "system" fn(
	device: VkDevice,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkEnumerateInstanceVersion = unsafe extern "system" fn(
	pApiVersion: *mut u32
) -> VkResult;

pub type PFN_vkEnumerateInstanceLayerProperties = unsafe extern "system" fn(
	pPropertyCount: *mut u32,
	pProperties: *mut VkLayerProperties
) -> VkResult;

pub type PFN_vkEnumerateInstanceExtensionProperties = unsafe extern "system" fn(
	pLayerName: *mut char,
	pPropertyCount: *mut u32,
	pProperties: *mut VkExtensionProperties
) -> VkResult;

pub type PFN_vkEnumerateDeviceLayerProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pPropertyCount: *mut u32,
	pProperties: *mut VkLayerProperties
) -> VkResult;

pub type PFN_vkEnumerateDeviceExtensionProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pLayerName: *mut char,
	pPropertyCount: *mut u32,
	pProperties: *mut VkExtensionProperties
) -> VkResult;

pub type PFN_vkGetDeviceQueue = unsafe extern "system" fn(
	device: VkDevice,
	queueFamilyIndex: u32,
	queueIndex: u32,
	pQueue: *mut VkQueue
) -> VkResult;

pub type PFN_vkQueueSubmit = unsafe extern "system" fn(
	queue: VkQueue,
	submitCount: u32,
	pSubmits: *mut VkSubmitInfo,
	fence: VkFence
) -> VkResult;

pub type PFN_vkQueueWaitIdle = unsafe extern "system" fn(
	queue: VkQueue
) -> VkResult;

pub type PFN_vkDeviceWaitIdle = unsafe extern "system" fn(
	device: VkDevice
) -> VkResult;

pub type PFN_vkAllocateMemory = unsafe extern "system" fn(
	device: VkDevice,
	pAllocateInfo: *mut VkMemoryAllocateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pMemory: *mut VkDeviceMemory
) -> VkResult;

pub type PFN_vkFreeMemory = unsafe extern "system" fn(
	device: VkDevice,
	memory: VkDeviceMemory,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkMapMemory = unsafe extern "system" fn(
	device: VkDevice,
	memory: VkDeviceMemory,
	offset: VkDeviceSize,
	size: VkDeviceSize,
	flags: VkMemoryMapFlags,
	ppData: *mut *mut c_void
) -> VkResult;

pub type PFN_vkUnmapMemory = unsafe extern "system" fn(
	device: VkDevice,
	memory: VkDeviceMemory
) -> VkResult;

pub type PFN_vkFlushMappedMemoryRanges = unsafe extern "system" fn(
	device: VkDevice,
	memoryRangeCount: u32,
	pMemoryRanges: *mut VkMappedMemoryRange
) -> VkResult;

pub type PFN_vkInvalidateMappedMemoryRanges = unsafe extern "system" fn(
	device: VkDevice,
	memoryRangeCount: u32,
	pMemoryRanges: *mut VkMappedMemoryRange
) -> VkResult;

pub type PFN_vkGetDeviceMemoryCommitment = unsafe extern "system" fn(
	device: VkDevice,
	memory: VkDeviceMemory,
	pCommittedMemoryInBytes: *mut VkDeviceSize
) -> VkResult;

pub type PFN_vkGetBufferMemoryRequirements = unsafe extern "system" fn(
	device: VkDevice,
	buffer: VkBuffer,
	pMemoryRequirements: *mut VkMemoryRequirements
) -> VkResult;

pub type PFN_vkBindBufferMemory = unsafe extern "system" fn(
	device: VkDevice,
	buffer: VkBuffer,
	memory: VkDeviceMemory,
	memoryOffset: VkDeviceSize
) -> VkResult;

pub type PFN_vkGetImageMemoryRequirements = unsafe extern "system" fn(
	device: VkDevice,
	image: VkImage,
	pMemoryRequirements: *mut VkMemoryRequirements
) -> VkResult;

pub type PFN_vkBindImageMemory = unsafe extern "system" fn(
	device: VkDevice,
	image: VkImage,
	memory: VkDeviceMemory,
	memoryOffset: VkDeviceSize
) -> VkResult;

pub type PFN_vkGetImageSparseMemoryRequirements = unsafe extern "system" fn(
	device: VkDevice,
	image: VkImage,
	pSparseMemoryRequirementCount: *mut u32,
	pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	format: VkFormat,
	imageType: VkImageType,
	samples: VkSampleCountFlagBits,
	usage: VkImageUsageFlags,
	tiling: VkImageTiling,
	pPropertyCount: *mut u32,
	pProperties: *mut VkSparseImageFormatProperties
) -> VkResult;

pub type PFN_vkQueueBindSparse = unsafe extern "system" fn(
	queue: VkQueue,
	bindInfoCount: u32,
	pBindInfo: *mut VkBindSparseInfo,
	fence: VkFence
) -> VkResult;

pub type PFN_vkCreateFence = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkFenceCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pFence: *mut VkFence
) -> VkResult;

pub type PFN_vkDestroyFence = unsafe extern "system" fn(
	device: VkDevice,
	fence: VkFence,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkResetFences = unsafe extern "system" fn(
	device: VkDevice,
	fenceCount: u32,
	pFences: *mut VkFence
) -> VkResult;

pub type PFN_vkGetFenceStatus = unsafe extern "system" fn(
	device: VkDevice,
	fence: VkFence
) -> VkResult;

pub type PFN_vkWaitForFences = unsafe extern "system" fn(
	device: VkDevice,
	fenceCount: u32,
	pFences: *mut VkFence,
	waitAll: VkBool32,
	timeout: uint64_t
) -> VkResult;

pub type PFN_vkCreateSemaphore = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkSemaphoreCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pSemaphore: *mut VkSemaphore
) -> VkResult;

pub type PFN_vkDestroySemaphore = unsafe extern "system" fn(
	device: VkDevice,
	semaphore: VkSemaphore,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCreateEvent = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkEventCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pEvent: *mut VkEvent
) -> VkResult;

pub type PFN_vkDestroyEvent = unsafe extern "system" fn(
	device: VkDevice,
	event: VkEvent,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetEventStatus = unsafe extern "system" fn(
	device: VkDevice,
	event: VkEvent
) -> VkResult;

pub type PFN_vkSetEvent = unsafe extern "system" fn(
	device: VkDevice,
	event: VkEvent
) -> VkResult;

pub type PFN_vkResetEvent = unsafe extern "system" fn(
	device: VkDevice,
	event: VkEvent
) -> VkResult;

pub type PFN_vkCreateQueryPool = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkQueryPoolCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pQueryPool: *mut VkQueryPool
) -> VkResult;

pub type PFN_vkDestroyQueryPool = unsafe extern "system" fn(
	device: VkDevice,
	queryPool: VkQueryPool,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetQueryPoolResults = unsafe extern "system" fn(
	device: VkDevice,
	queryPool: VkQueryPool,
	firstQuery: u32,
	queryCount: u32,
	dataSize: size_t,
	pData: *mut c_void,
	stride: VkDeviceSize,
	flags: VkQueryResultFlags
) -> VkResult;

pub type PFN_vkResetQueryPool = unsafe extern "system" fn(
	device: VkDevice,
	queryPool: VkQueryPool,
	firstQuery: u32,
	queryCount: u32
) -> VkResult;

pub type PFN_vkCreateBuffer = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkBufferCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pBuffer: *mut VkBuffer
) -> VkResult;

pub type PFN_vkDestroyBuffer = unsafe extern "system" fn(
	device: VkDevice,
	buffer: VkBuffer,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCreateBufferView = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkBufferViewCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pView: *mut VkBufferView
) -> VkResult;

pub type PFN_vkDestroyBufferView = unsafe extern "system" fn(
	device: VkDevice,
	bufferView: VkBufferView,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCreateImage = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkImageCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pImage: *mut VkImage
) -> VkResult;

pub type PFN_vkDestroyImage = unsafe extern "system" fn(
	device: VkDevice,
	image: VkImage,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetImageSubresourceLayout = unsafe extern "system" fn(
	device: VkDevice,
	image: VkImage,
	pSubresource: *mut VkImageSubresource,
	pLayout: *mut VkSubresourceLayout
) -> VkResult;

pub type PFN_vkCreateImageView = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkImageViewCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pView: *mut VkImageView
) -> VkResult;

pub type PFN_vkDestroyImageView = unsafe extern "system" fn(
	device: VkDevice,
	imageView: VkImageView,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCreateShaderModule = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkShaderModuleCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pShaderModule: *mut VkShaderModule
) -> VkResult;

pub type PFN_vkDestroyShaderModule = unsafe extern "system" fn(
	device: VkDevice,
	shaderModule: VkShaderModule,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCreatePipelineCache = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkPipelineCacheCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pPipelineCache: *mut VkPipelineCache
) -> VkResult;

pub type PFN_vkDestroyPipelineCache = unsafe extern "system" fn(
	device: VkDevice,
	pipelineCache: VkPipelineCache,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetPipelineCacheData = unsafe extern "system" fn(
	device: VkDevice,
	pipelineCache: VkPipelineCache,
	pDataSize: *mut size_t,
	pData: *mut c_void
) -> VkResult;

pub type PFN_vkMergePipelineCaches = unsafe extern "system" fn(
	device: VkDevice,
	dstCache: VkPipelineCache,
	srcCacheCount: u32,
	pSrcCaches: *mut VkPipelineCache
) -> VkResult;

pub type PFN_vkCreateGraphicsPipelines = unsafe extern "system" fn(
	device: VkDevice,
	pipelineCache: VkPipelineCache,
	createInfoCount: u32,
	pCreateInfos: *mut VkGraphicsPipelineCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pPipelines: *mut VkPipeline
) -> VkResult;

pub type PFN_vkCreateComputePipelines = unsafe extern "system" fn(
	device: VkDevice,
	pipelineCache: VkPipelineCache,
	createInfoCount: u32,
	pCreateInfos: *mut VkComputePipelineCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pPipelines: *mut VkPipeline
) -> VkResult;

pub type PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = unsafe extern "system" fn(
	device: VkDevice,
	renderpass: VkRenderPass,
	pMaxWorkgroupSize: *mut VkExtent2D
) -> VkResult;

pub type PFN_vkDestroyPipeline = unsafe extern "system" fn(
	device: VkDevice,
	pipeline: VkPipeline,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCreatePipelineLayout = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkPipelineLayoutCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pPipelineLayout: *mut VkPipelineLayout
) -> VkResult;

pub type PFN_vkDestroyPipelineLayout = unsafe extern "system" fn(
	device: VkDevice,
	pipelineLayout: VkPipelineLayout,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCreateSampler = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkSamplerCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pSampler: *mut VkSampler
) -> VkResult;

pub type PFN_vkDestroySampler = unsafe extern "system" fn(
	device: VkDevice,
	sampler: VkSampler,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCreateDescriptorSetLayout = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkDescriptorSetLayoutCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pSetLayout: *mut VkDescriptorSetLayout
) -> VkResult;

pub type PFN_vkDestroyDescriptorSetLayout = unsafe extern "system" fn(
	device: VkDevice,
	descriptorSetLayout: VkDescriptorSetLayout,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCreateDescriptorPool = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkDescriptorPoolCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pDescriptorPool: *mut VkDescriptorPool
) -> VkResult;

pub type PFN_vkDestroyDescriptorPool = unsafe extern "system" fn(
	device: VkDevice,
	descriptorPool: VkDescriptorPool,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkResetDescriptorPool = unsafe extern "system" fn(
	device: VkDevice,
	descriptorPool: VkDescriptorPool,
	flags: VkDescriptorPoolResetFlags
) -> VkResult;

pub type PFN_vkAllocateDescriptorSets = unsafe extern "system" fn(
	device: VkDevice,
	pAllocateInfo: *mut VkDescriptorSetAllocateInfo,
	pDescriptorSets: *mut VkDescriptorSet
) -> VkResult;

pub type PFN_vkFreeDescriptorSets = unsafe extern "system" fn(
	device: VkDevice,
	descriptorPool: VkDescriptorPool,
	descriptorSetCount: u32,
	pDescriptorSets: *mut VkDescriptorSet
) -> VkResult;

pub type PFN_vkUpdateDescriptorSets = unsafe extern "system" fn(
	device: VkDevice,
	descriptorWriteCount: u32,
	pDescriptorWrites: *mut VkWriteDescriptorSet,
	descriptorCopyCount: u32,
	pDescriptorCopies: *mut VkCopyDescriptorSet
) -> VkResult;

pub type PFN_vkCreateFramebuffer = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkFramebufferCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pFramebuffer: *mut VkFramebuffer
) -> VkResult;

pub type PFN_vkDestroyFramebuffer = unsafe extern "system" fn(
	device: VkDevice,
	framebuffer: VkFramebuffer,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCreateRenderPass = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkRenderPassCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pRenderPass: *mut VkRenderPass
) -> VkResult;

pub type PFN_vkDestroyRenderPass = unsafe extern "system" fn(
	device: VkDevice,
	renderPass: VkRenderPass,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetRenderAreaGranularity = unsafe extern "system" fn(
	device: VkDevice,
	renderPass: VkRenderPass,
	pGranularity: *mut VkExtent2D
) -> VkResult;

pub type PFN_vkCreateCommandPool = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkCommandPoolCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pCommandPool: *mut VkCommandPool
) -> VkResult;

pub type PFN_vkDestroyCommandPool = unsafe extern "system" fn(
	device: VkDevice,
	commandPool: VkCommandPool,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkResetCommandPool = unsafe extern "system" fn(
	device: VkDevice,
	commandPool: VkCommandPool,
	flags: VkCommandPoolResetFlags
) -> VkResult;

pub type PFN_vkAllocateCommandBuffers = unsafe extern "system" fn(
	device: VkDevice,
	pAllocateInfo: *mut VkCommandBufferAllocateInfo,
	pCommandBuffers: *mut VkCommandBuffer
) -> VkResult;

pub type PFN_vkFreeCommandBuffers = unsafe extern "system" fn(
	device: VkDevice,
	commandPool: VkCommandPool,
	commandBufferCount: u32,
	pCommandBuffers: *mut VkCommandBuffer
) -> VkResult;

pub type PFN_vkBeginCommandBuffer = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pBeginInfo: *mut VkCommandBufferBeginInfo
) -> VkResult;

pub type PFN_vkEndCommandBuffer = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer
) -> VkResult;

pub type PFN_vkResetCommandBuffer = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	flags: VkCommandBufferResetFlags
) -> VkResult;

pub type PFN_vkCmdBindPipeline = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pipelineBindPoint: VkPipelineBindPoint,
	pipeline: VkPipeline
) -> VkResult;

pub type PFN_vkCmdSetViewport = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstViewport: u32,
	viewportCount: u32,
	pViewports: *mut VkViewport
) -> VkResult;

pub type PFN_vkCmdSetScissor = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstScissor: u32,
	scissorCount: u32,
	pScissors: *mut VkRect2D
) -> VkResult;

pub type PFN_vkCmdSetLineWidth = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	lineWidth: float
) -> VkResult;

pub type PFN_vkCmdSetDepthBias = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	depthBiasConstantFactor: float,
	depthBiasClamp: float,
	depthBiasSlopeFactor: float
) -> VkResult;

pub type PFN_vkCmdSetBlendConstants = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	blendConstants: [float; 4]
) -> VkResult;

pub type PFN_vkCmdSetDepthBounds = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	minDepthBounds: float,
	maxDepthBounds: float
) -> VkResult;

pub type PFN_vkCmdSetStencilCompareMask = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	faceMask: VkStencilFaceFlags,
	compareMask: u32
) -> VkResult;

pub type PFN_vkCmdSetStencilWriteMask = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	faceMask: VkStencilFaceFlags,
	writeMask: u32
) -> VkResult;

pub type PFN_vkCmdSetStencilReference = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	faceMask: VkStencilFaceFlags,
	reference: u32
) -> VkResult;

pub type PFN_vkCmdBindDescriptorSets = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pipelineBindPoint: VkPipelineBindPoint,
	layout: VkPipelineLayout,
	firstSet: u32,
	descriptorSetCount: u32,
	pDescriptorSets: *mut VkDescriptorSet,
	dynamicOffsetCount: u32,
	pDynamicOffsets: *mut u32
) -> VkResult;

pub type PFN_vkCmdBindIndexBuffer = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	buffer: VkBuffer,
	offset: VkDeviceSize,
	indexType: VkIndexType
) -> VkResult;

pub type PFN_vkCmdBindVertexBuffers = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstBinding: u32,
	bindingCount: u32,
	pBuffers: *mut VkBuffer,
	pOffsets: *mut VkDeviceSize
) -> VkResult;

pub type PFN_vkCmdDraw = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	vertexCount: u32,
	instanceCount: u32,
	firstVertex: u32,
	firstInstance: u32
) -> VkResult;

pub type PFN_vkCmdDrawIndexed = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	indexCount: u32,
	instanceCount: u32,
	firstIndex: u32,
	vertexOffset: int32_t,
	firstInstance: u32
) -> VkResult;

pub type PFN_vkCmdDrawMultiEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	drawCount: u32,
	pVertexInfo: *mut VkMultiDrawInfoEXT,
	instanceCount: u32,
	firstInstance: u32,
	stride: u32
) -> VkResult;

pub type PFN_vkCmdDrawMultiIndexedEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	drawCount: u32,
	pIndexInfo: *mut VkMultiDrawIndexedInfoEXT,
	instanceCount: u32,
	firstInstance: u32,
	stride: u32,
	pVertexOffset: *mut int32_t
) -> VkResult;

pub type PFN_vkCmdDrawIndirect = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	buffer: VkBuffer,
	offset: VkDeviceSize,
	drawCount: u32,
	stride: u32
) -> VkResult;

pub type PFN_vkCmdDrawIndexedIndirect = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	buffer: VkBuffer,
	offset: VkDeviceSize,
	drawCount: u32,
	stride: u32
) -> VkResult;

pub type PFN_vkCmdDispatch = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	groupCountX: u32,
	groupCountY: u32,
	groupCountZ: u32
) -> VkResult;

pub type PFN_vkCmdDispatchIndirect = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	buffer: VkBuffer,
	offset: VkDeviceSize
) -> VkResult;

pub type PFN_vkCmdSubpassShadingHUAWEI = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer
) -> VkResult;

pub type PFN_vkCmdCopyBuffer = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	srcBuffer: VkBuffer,
	dstBuffer: VkBuffer,
	regionCount: u32,
	pRegions: *mut VkBufferCopy
) -> VkResult;

pub type PFN_vkCmdCopyImage = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	srcImage: VkImage,
	srcImageLayout: VkImageLayout,
	dstImage: VkImage,
	dstImageLayout: VkImageLayout,
	regionCount: u32,
	pRegions: *mut VkImageCopy
) -> VkResult;

pub type PFN_vkCmdBlitImage = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	srcImage: VkImage,
	srcImageLayout: VkImageLayout,
	dstImage: VkImage,
	dstImageLayout: VkImageLayout,
	regionCount: u32,
	pRegions: *mut VkImageBlit,
	filter: VkFilter
) -> VkResult;

pub type PFN_vkCmdCopyBufferToImage = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	srcBuffer: VkBuffer,
	dstImage: VkImage,
	dstImageLayout: VkImageLayout,
	regionCount: u32,
	pRegions: *mut VkBufferImageCopy
) -> VkResult;

pub type PFN_vkCmdCopyImageToBuffer = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	srcImage: VkImage,
	srcImageLayout: VkImageLayout,
	dstBuffer: VkBuffer,
	regionCount: u32,
	pRegions: *mut VkBufferImageCopy
) -> VkResult;

pub type PFN_vkCmdCopyMemoryIndirectNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	copyBufferAddress: VkDeviceAddress,
	copyCount: u32,
	stride: u32
) -> VkResult;

pub type PFN_vkCmdCopyMemoryToImageIndirectNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	copyBufferAddress: VkDeviceAddress,
	copyCount: u32,
	stride: u32,
	dstImage: VkImage,
	dstImageLayout: VkImageLayout,
	pImageSubresources: *mut VkImageSubresourceLayers
) -> VkResult;

pub type PFN_vkCmdUpdateBuffer = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	dstBuffer: VkBuffer,
	dstOffset: VkDeviceSize,
	dataSize: VkDeviceSize,
	pData: *mut c_void
) -> VkResult;

pub type PFN_vkCmdFillBuffer = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	dstBuffer: VkBuffer,
	dstOffset: VkDeviceSize,
	size: VkDeviceSize,
	data: u32
) -> VkResult;

pub type PFN_vkCmdClearColorImage = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	image: VkImage,
	imageLayout: VkImageLayout,
	pColor: *mut VkClearColorValue,
	rangeCount: u32,
	pRanges: *mut VkImageSubresourceRange
) -> VkResult;

pub type PFN_vkCmdClearDepthStencilImage = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	image: VkImage,
	imageLayout: VkImageLayout,
	pDepthStencil: *mut VkClearDepthStencilValue,
	rangeCount: u32,
	pRanges: *mut VkImageSubresourceRange
) -> VkResult;

pub type PFN_vkCmdClearAttachments = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	attachmentCount: u32,
	pAttachments: *mut VkClearAttachment,
	rectCount: u32,
	pRects: *mut VkClearRect
) -> VkResult;

pub type PFN_vkCmdResolveImage = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	srcImage: VkImage,
	srcImageLayout: VkImageLayout,
	dstImage: VkImage,
	dstImageLayout: VkImageLayout,
	regionCount: u32,
	pRegions: *mut VkImageResolve
) -> VkResult;

pub type PFN_vkCmdSetEvent = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	event: VkEvent,
	stageMask: VkPipelineStageFlags
) -> VkResult;

pub type PFN_vkCmdResetEvent = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	event: VkEvent,
	stageMask: VkPipelineStageFlags
) -> VkResult;

pub type PFN_vkCmdWaitEvents = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	eventCount: u32,
	pEvents: *mut VkEvent,
	srcStageMask: VkPipelineStageFlags,
	dstStageMask: VkPipelineStageFlags,
	memoryBarrierCount: u32,
	pMemoryBarriers: *mut VkMemoryBarrier,
	bufferMemoryBarrierCount: u32,
	pBufferMemoryBarriers: *mut VkBufferMemoryBarrier,
	imageMemoryBarrierCount: u32,
	pImageMemoryBarriers: *mut VkImageMemoryBarrier
) -> VkResult;

pub type PFN_vkCmdPipelineBarrier = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	srcStageMask: VkPipelineStageFlags,
	dstStageMask: VkPipelineStageFlags,
	dependencyFlags: VkDependencyFlags,
	memoryBarrierCount: u32,
	pMemoryBarriers: *mut VkMemoryBarrier,
	bufferMemoryBarrierCount: u32,
	pBufferMemoryBarriers: *mut VkBufferMemoryBarrier,
	imageMemoryBarrierCount: u32,
	pImageMemoryBarriers: *mut VkImageMemoryBarrier
) -> VkResult;

pub type PFN_vkCmdBeginQuery = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	queryPool: VkQueryPool,
	query: u32,
	flags: VkQueryControlFlags
) -> VkResult;

pub type PFN_vkCmdEndQuery = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	queryPool: VkQueryPool,
	query: u32
) -> VkResult;

pub type PFN_vkCmdBeginConditionalRenderingEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pConditionalRenderingBegin: *mut VkConditionalRenderingBeginInfoEXT
) -> VkResult;

pub type PFN_vkCmdEndConditionalRenderingEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer
) -> VkResult;

pub type PFN_vkCmdResetQueryPool = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	queryPool: VkQueryPool,
	firstQuery: u32,
	queryCount: u32
) -> VkResult;

pub type PFN_vkCmdWriteTimestamp = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pipelineStage: VkPipelineStageFlagBits,
	queryPool: VkQueryPool,
	query: u32
) -> VkResult;

pub type PFN_vkCmdCopyQueryPoolResults = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	queryPool: VkQueryPool,
	firstQuery: u32,
	queryCount: u32,
	dstBuffer: VkBuffer,
	dstOffset: VkDeviceSize,
	stride: VkDeviceSize,
	flags: VkQueryResultFlags
) -> VkResult;

pub type PFN_vkCmdPushConstants = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	layout: VkPipelineLayout,
	stageFlags: VkShaderStageFlags,
	offset: u32,
	size: u32,
	pValues: *mut c_void
) -> VkResult;

pub type PFN_vkCmdBeginRenderPass = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pRenderPassBegin: *mut VkRenderPassBeginInfo,
	contents: VkSubpassContents
) -> VkResult;

pub type PFN_vkCmdNextSubpass = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	contents: VkSubpassContents
) -> VkResult;

pub type PFN_vkCmdEndRenderPass = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer
) -> VkResult;

pub type PFN_vkCmdExecuteCommands = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	commandBufferCount: u32,
	pCommandBuffers: *mut VkCommandBuffer
) -> VkResult;

pub type PFN_vkCreateAndroidSurfaceKHR = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkAndroidSurfaceCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pPropertyCount: *mut u32,
	pProperties: *mut VkDisplayPropertiesKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pPropertyCount: *mut u32,
	pProperties: *mut VkDisplayPlanePropertiesKHR
) -> VkResult;

pub type PFN_vkGetDisplayPlaneSupportedDisplaysKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	planeIndex: u32,
	pDisplayCount: *mut u32,
	pDisplays: *mut VkDisplayKHR
) -> VkResult;

pub type PFN_vkGetDisplayModePropertiesKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	display: VkDisplayKHR,
	pPropertyCount: *mut u32,
	pProperties: *mut VkDisplayModePropertiesKHR
) -> VkResult;

pub type PFN_vkCreateDisplayModeKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	display: VkDisplayKHR,
	pCreateInfo: *mut VkDisplayModeCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pMode: *mut VkDisplayModeKHR
) -> VkResult;

pub type PFN_vkGetDisplayPlaneCapabilitiesKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	mode: VkDisplayModeKHR,
	planeIndex: u32,
	pCapabilities: *mut VkDisplayPlaneCapabilitiesKHR
) -> VkResult;

pub type PFN_vkCreateDisplayPlaneSurfaceKHR = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkDisplaySurfaceCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkCreateSharedSwapchainsKHR = unsafe extern "system" fn(
	device: VkDevice,
	swapchainCount: u32,
	pCreateInfos: *mut VkSwapchainCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pSwapchains: *mut VkSwapchainKHR
) -> VkResult;

pub type PFN_vkDestroySurfaceKHR = unsafe extern "system" fn(
	instance: VkInstance,
	surface: VkSurfaceKHR,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceSurfaceSupportKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	queueFamilyIndex: u32,
	surface: VkSurfaceKHR,
	pSupported: *mut VkBool32
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	surface: VkSurfaceKHR,
	pSurfaceCapabilities: *mut VkSurfaceCapabilitiesKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	surface: VkSurfaceKHR,
	pSurfaceFormatCount: *mut u32,
	pSurfaceFormats: *mut VkSurfaceFormatKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	surface: VkSurfaceKHR,
	pPresentModeCount: *mut u32,
	pPresentModes: *mut VkPresentModeKHR
) -> VkResult;

pub type PFN_vkCreateSwapchainKHR = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkSwapchainCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pSwapchain: *mut VkSwapchainKHR
) -> VkResult;

pub type PFN_vkDestroySwapchainKHR = unsafe extern "system" fn(
	device: VkDevice,
	swapchain: VkSwapchainKHR,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetSwapchainImagesKHR = unsafe extern "system" fn(
	device: VkDevice,
	swapchain: VkSwapchainKHR,
	pSwapchainImageCount: *mut u32,
	pSwapchainImages: *mut VkImage
) -> VkResult;

pub type PFN_vkAcquireNextImageKHR = unsafe extern "system" fn(
	device: VkDevice,
	swapchain: VkSwapchainKHR,
	timeout: uint64_t,
	semaphore: VkSemaphore,
	fence: VkFence,
	pImageIndex: *mut u32
) -> VkResult;

pub type PFN_vkQueuePresentKHR = unsafe extern "system" fn(
	queue: VkQueue,
	pPresentInfo: *mut VkPresentInfoKHR
) -> VkResult;

pub type PFN_vkCreateViSurfaceNN = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkViSurfaceCreateInfoNN,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkCreateWaylandSurfaceKHR = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkWaylandSurfaceCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	queueFamilyIndex: u32,
	display: *mut wl_display
) -> VkResult;

pub type PFN_vkCreateWin32SurfaceKHR = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkWin32SurfaceCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	queueFamilyIndex: u32
) -> VkResult;

pub type PFN_vkCreateXlibSurfaceKHR = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkXlibSurfaceCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	queueFamilyIndex: u32,
	dpy: *mut Display,
	visualID: VisualID
) -> VkResult;

pub type PFN_vkCreateXcbSurfaceKHR = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkXcbSurfaceCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	queueFamilyIndex: u32,
	connection: *mut xcb_connection_t,
	visual_id: xcb_visualid_t
) -> VkResult;

pub type PFN_vkCreateDirectFBSurfaceEXT = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkDirectFBSurfaceCreateInfoEXT,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	queueFamilyIndex: u32,
	dfb: *mut IDirectFB
) -> VkResult;

pub type PFN_vkCreateImagePipeSurfaceFUCHSIA = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkImagePipeSurfaceCreateInfoFUCHSIA,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkCreateStreamDescriptorSurfaceGGP = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkStreamDescriptorSurfaceCreateInfoGGP,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkCreateScreenSurfaceQNX = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkScreenSurfaceCreateInfoQNX,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	queueFamilyIndex: u32,
	window: *mut _screen_window
) -> VkResult;

pub type PFN_vkCreateDebugReportCallbackEXT = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkDebugReportCallbackCreateInfoEXT,
	pAllocator: *mut VkAllocationCallbacks,
	pCallback: *mut VkDebugReportCallbackEXT
) -> VkResult;

pub type PFN_vkDestroyDebugReportCallbackEXT = unsafe extern "system" fn(
	instance: VkInstance,
	callback: VkDebugReportCallbackEXT,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkDebugReportMessageEXT = unsafe extern "system" fn(
	instance: VkInstance,
	flags: VkDebugReportFlagsEXT,
	objectType: VkDebugReportObjectTypeEXT,
	object: uint64_t,
	location: size_t,
	messageCode: int32_t,
	pLayerPrefix: *mut char,
	pMessage: *mut char
) -> VkResult;

pub type PFN_vkDebugMarkerSetObjectNameEXT = unsafe extern "system" fn(
	device: VkDevice,
	pNameInfo: *mut VkDebugMarkerObjectNameInfoEXT
) -> VkResult;

pub type PFN_vkDebugMarkerSetObjectTagEXT = unsafe extern "system" fn(
	device: VkDevice,
	pTagInfo: *mut VkDebugMarkerObjectTagInfoEXT
) -> VkResult;

pub type PFN_vkCmdDebugMarkerBeginEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pMarkerInfo: *mut VkDebugMarkerMarkerInfoEXT
) -> VkResult;

pub type PFN_vkCmdDebugMarkerEndEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer
) -> VkResult;

pub type PFN_vkCmdDebugMarkerInsertEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pMarkerInfo: *mut VkDebugMarkerMarkerInfoEXT
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	format: VkFormat,
	imageType: VkImageType,
	tiling: VkImageTiling,
	usage: VkImageUsageFlags,
	flags: VkImageCreateFlags,
	externalHandleType: VkExternalMemoryHandleTypeFlagsNV,
	pExternalImageFormatProperties: *mut VkExternalImageFormatPropertiesNV
) -> VkResult;

pub type PFN_vkGetMemoryWin32HandleNV = unsafe extern "system" fn(
	device: VkDevice,
	memory: VkDeviceMemory,
	handleType: VkExternalMemoryHandleTypeFlagsNV,
	pHandle: *mut HANDLE
) -> VkResult;

pub type PFN_vkCmdExecuteGeneratedCommandsNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	isPreprocessed: VkBool32,
	pGeneratedCommandsInfo: *mut VkGeneratedCommandsInfoNV
) -> VkResult;

pub type PFN_vkCmdPreprocessGeneratedCommandsNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pGeneratedCommandsInfo: *mut VkGeneratedCommandsInfoNV
) -> VkResult;

pub type PFN_vkCmdBindPipelineShaderGroupNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pipelineBindPoint: VkPipelineBindPoint,
	pipeline: VkPipeline,
	groupIndex: u32
) -> VkResult;

pub type PFN_vkGetGeneratedCommandsMemoryRequirementsNV = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkGeneratedCommandsMemoryRequirementsInfoNV,
	pMemoryRequirements: *mut VkMemoryRequirements2
) -> VkResult;

pub type PFN_vkCreateIndirectCommandsLayoutNV = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkIndirectCommandsLayoutCreateInfoNV,
	pAllocator: *mut VkAllocationCallbacks,
	pIndirectCommandsLayout: *mut VkIndirectCommandsLayoutNV
) -> VkResult;

pub type PFN_vkDestroyIndirectCommandsLayoutNV = unsafe extern "system" fn(
	device: VkDevice,
	indirectCommandsLayout: VkIndirectCommandsLayoutNV,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceFeatures2 = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pFeatures: *mut VkPhysicalDeviceFeatures2
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceProperties2 = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pProperties: *mut VkPhysicalDeviceProperties2
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceFormatProperties2 = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	format: VkFormat,
	pFormatProperties: *mut VkFormatProperties2
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceImageFormatProperties2 = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pImageFormatInfo: *mut VkPhysicalDeviceImageFormatInfo2,
	pImageFormatProperties: *mut VkImageFormatProperties2
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pQueueFamilyPropertyCount: *mut u32,
	pQueueFamilyProperties: *mut VkQueueFamilyProperties2
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceMemoryProperties2 = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pMemoryProperties: *mut VkPhysicalDeviceMemoryProperties2
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pFormatInfo: *mut VkPhysicalDeviceSparseImageFormatInfo2,
	pPropertyCount: *mut u32,
	pProperties: *mut VkSparseImageFormatProperties2
) -> VkResult;

pub type PFN_vkCmdPushDescriptorSetKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pipelineBindPoint: VkPipelineBindPoint,
	layout: VkPipelineLayout,
	set: u32,
	descriptorWriteCount: u32,
	pDescriptorWrites: *mut VkWriteDescriptorSet
) -> VkResult;

pub type PFN_vkTrimCommandPool = unsafe extern "system" fn(
	device: VkDevice,
	commandPool: VkCommandPool,
	flags: VkCommandPoolTrimFlags
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceExternalBufferProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pExternalBufferInfo: *mut VkPhysicalDeviceExternalBufferInfo,
	pExternalBufferProperties: *mut VkExternalBufferProperties
) -> VkResult;

pub type PFN_vkGetMemoryWin32HandleKHR = unsafe extern "system" fn(
	device: VkDevice,
	pGetWin32HandleInfo: *mut VkMemoryGetWin32HandleInfoKHR,
	pHandle: *mut HANDLE
) -> VkResult;

pub type PFN_vkGetMemoryWin32HandlePropertiesKHR = unsafe extern "system" fn(
	device: VkDevice,
	handleType: VkExternalMemoryHandleTypeFlagBits,
	handle: HANDLE,
	pMemoryWin32HandleProperties: *mut VkMemoryWin32HandlePropertiesKHR
) -> VkResult;

pub type PFN_vkGetMemoryFdKHR = unsafe extern "system" fn(
	device: VkDevice,
	pGetFdInfo: *mut VkMemoryGetFdInfoKHR,
	pFd: *mut int
) -> VkResult;

pub type PFN_vkGetMemoryFdPropertiesKHR = unsafe extern "system" fn(
	device: VkDevice,
	handleType: VkExternalMemoryHandleTypeFlagBits,
	fd: int,
	pMemoryFdProperties: *mut VkMemoryFdPropertiesKHR
) -> VkResult;

pub type PFN_vkGetMemoryZirconHandleFUCHSIA = unsafe extern "system" fn(
	device: VkDevice,
	pGetZirconHandleInfo: *mut VkMemoryGetZirconHandleInfoFUCHSIA,
	pZirconHandle: *mut zx_handle_t
) -> VkResult;

pub type PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA = unsafe extern "system" fn(
	device: VkDevice,
	handleType: VkExternalMemoryHandleTypeFlagBits,
	zirconHandle: zx_handle_t,
	pMemoryZirconHandleProperties: *mut VkMemoryZirconHandlePropertiesFUCHSIA
) -> VkResult;

pub type PFN_vkGetMemoryRemoteAddressNV = unsafe extern "system" fn(
	device: VkDevice,
	pMemoryGetRemoteAddressInfo: *mut VkMemoryGetRemoteAddressInfoNV,
	pAddress: *mut VkRemoteAddressNV
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pExternalSemaphoreInfo: *mut VkPhysicalDeviceExternalSemaphoreInfo,
	pExternalSemaphoreProperties: *mut VkExternalSemaphoreProperties
) -> VkResult;

pub type PFN_vkGetSemaphoreWin32HandleKHR = unsafe extern "system" fn(
	device: VkDevice,
	pGetWin32HandleInfo: *mut VkSemaphoreGetWin32HandleInfoKHR,
	pHandle: *mut HANDLE
) -> VkResult;

pub type PFN_vkImportSemaphoreWin32HandleKHR = unsafe extern "system" fn(
	device: VkDevice,
	pImportSemaphoreWin32HandleInfo: *mut VkImportSemaphoreWin32HandleInfoKHR
) -> VkResult;

pub type PFN_vkGetSemaphoreFdKHR = unsafe extern "system" fn(
	device: VkDevice,
	pGetFdInfo: *mut VkSemaphoreGetFdInfoKHR,
	pFd: *mut int
) -> VkResult;

pub type PFN_vkImportSemaphoreFdKHR = unsafe extern "system" fn(
	device: VkDevice,
	pImportSemaphoreFdInfo: *mut VkImportSemaphoreFdInfoKHR
) -> VkResult;

pub type PFN_vkGetSemaphoreZirconHandleFUCHSIA = unsafe extern "system" fn(
	device: VkDevice,
	pGetZirconHandleInfo: *mut VkSemaphoreGetZirconHandleInfoFUCHSIA,
	pZirconHandle: *mut zx_handle_t
) -> VkResult;

pub type PFN_vkImportSemaphoreZirconHandleFUCHSIA = unsafe extern "system" fn(
	device: VkDevice,
	pImportSemaphoreZirconHandleInfo: *mut VkImportSemaphoreZirconHandleInfoFUCHSIA
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceExternalFenceProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pExternalFenceInfo: *mut VkPhysicalDeviceExternalFenceInfo,
	pExternalFenceProperties: *mut VkExternalFenceProperties
) -> VkResult;

pub type PFN_vkGetFenceWin32HandleKHR = unsafe extern "system" fn(
	device: VkDevice,
	pGetWin32HandleInfo: *mut VkFenceGetWin32HandleInfoKHR,
	pHandle: *mut HANDLE
) -> VkResult;

pub type PFN_vkImportFenceWin32HandleKHR = unsafe extern "system" fn(
	device: VkDevice,
	pImportFenceWin32HandleInfo: *mut VkImportFenceWin32HandleInfoKHR
) -> VkResult;

pub type PFN_vkGetFenceFdKHR = unsafe extern "system" fn(
	device: VkDevice,
	pGetFdInfo: *mut VkFenceGetFdInfoKHR,
	pFd: *mut int
) -> VkResult;

pub type PFN_vkImportFenceFdKHR = unsafe extern "system" fn(
	device: VkDevice,
	pImportFenceFdInfo: *mut VkImportFenceFdInfoKHR
) -> VkResult;

pub type PFN_vkReleaseDisplayEXT = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	display: VkDisplayKHR
) -> VkResult;

pub type PFN_vkAcquireXlibDisplayEXT = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	dpy: *mut Display,
	display: VkDisplayKHR
) -> VkResult;

pub type PFN_vkGetRandROutputDisplayEXT = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	dpy: *mut Display,
	rrOutput: RROutput,
	pDisplay: *mut VkDisplayKHR
) -> VkResult;

pub type PFN_vkAcquireWinrtDisplayNV = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	display: VkDisplayKHR
) -> VkResult;

pub type PFN_vkGetWinrtDisplayNV = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	deviceRelativeId: u32,
	pDisplay: *mut VkDisplayKHR
) -> VkResult;

pub type PFN_vkDisplayPowerControlEXT = unsafe extern "system" fn(
	device: VkDevice,
	display: VkDisplayKHR,
	pDisplayPowerInfo: *mut VkDisplayPowerInfoEXT
) -> VkResult;

pub type PFN_vkRegisterDeviceEventEXT = unsafe extern "system" fn(
	device: VkDevice,
	pDeviceEventInfo: *mut VkDeviceEventInfoEXT,
	pAllocator: *mut VkAllocationCallbacks,
	pFence: *mut VkFence
) -> VkResult;

pub type PFN_vkRegisterDisplayEventEXT = unsafe extern "system" fn(
	device: VkDevice,
	display: VkDisplayKHR,
	pDisplayEventInfo: *mut VkDisplayEventInfoEXT,
	pAllocator: *mut VkAllocationCallbacks,
	pFence: *mut VkFence
) -> VkResult;

pub type PFN_vkGetSwapchainCounterEXT = unsafe extern "system" fn(
	device: VkDevice,
	swapchain: VkSwapchainKHR,
	counter: VkSurfaceCounterFlagBitsEXT,
	pCounterValue: *mut uint64_t
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	surface: VkSurfaceKHR,
	pSurfaceCapabilities: *mut VkSurfaceCapabilities2EXT
) -> VkResult;

pub type PFN_vkEnumeratePhysicalDeviceGroups = unsafe extern "system" fn(
	instance: VkInstance,
	pPhysicalDeviceGroupCount: *mut u32,
	pPhysicalDeviceGroupProperties: *mut VkPhysicalDeviceGroupProperties
) -> VkResult;

pub type PFN_vkGetDeviceGroupPeerMemoryFeatures = unsafe extern "system" fn(
	device: VkDevice,
	heapIndex: u32,
	localDeviceIndex: u32,
	remoteDeviceIndex: u32,
	pPeerMemoryFeatures: *mut VkPeerMemoryFeatureFlags
) -> VkResult;

pub type PFN_vkBindBufferMemory2 = unsafe extern "system" fn(
	device: VkDevice,
	bindInfoCount: u32,
	pBindInfos: *mut VkBindBufferMemoryInfo
) -> VkResult;

pub type PFN_vkBindImageMemory2 = unsafe extern "system" fn(
	device: VkDevice,
	bindInfoCount: u32,
	pBindInfos: *mut VkBindImageMemoryInfo
) -> VkResult;

pub type PFN_vkCmdSetDeviceMask = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	deviceMask: u32
) -> VkResult;

pub type PFN_vkGetDeviceGroupPresentCapabilitiesKHR = unsafe extern "system" fn(
	device: VkDevice,
	pDeviceGroupPresentCapabilities: *mut VkDeviceGroupPresentCapabilitiesKHR
) -> VkResult;

pub type PFN_vkGetDeviceGroupSurfacePresentModesKHR = unsafe extern "system" fn(
	device: VkDevice,
	surface: VkSurfaceKHR,
	pModes: *mut VkDeviceGroupPresentModeFlagsKHR
) -> VkResult;

pub type PFN_vkAcquireNextImage2KHR = unsafe extern "system" fn(
	device: VkDevice,
	pAcquireInfo: *mut VkAcquireNextImageInfoKHR,
	pImageIndex: *mut u32
) -> VkResult;

pub type PFN_vkCmdDispatchBase = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	baseGroupX: u32,
	baseGroupY: u32,
	baseGroupZ: u32,
	groupCountX: u32,
	groupCountY: u32,
	groupCountZ: u32
) -> VkResult;

pub type PFN_vkGetPhysicalDevicePresentRectanglesKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	surface: VkSurfaceKHR,
	pRectCount: *mut u32,
	pRects: *mut VkRect2D
) -> VkResult;

pub type PFN_vkCreateDescriptorUpdateTemplate = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkDescriptorUpdateTemplateCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pDescriptorUpdateTemplate: *mut VkDescriptorUpdateTemplate
) -> VkResult;

pub type PFN_vkDestroyDescriptorUpdateTemplate = unsafe extern "system" fn(
	device: VkDevice,
	descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkUpdateDescriptorSetWithTemplate = unsafe extern "system" fn(
	device: VkDevice,
	descriptorSet: VkDescriptorSet,
	descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
	pData: *mut c_void
) -> VkResult;

pub type PFN_vkCmdPushDescriptorSetWithTemplateKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	descriptorUpdateTemplate: VkDescriptorUpdateTemplate,
	layout: VkPipelineLayout,
	set: u32,
	pData: *mut c_void
) -> VkResult;

pub type PFN_vkSetHdrMetadataEXT = unsafe extern "system" fn(
	device: VkDevice,
	swapchainCount: u32,
	pSwapchains: *mut VkSwapchainKHR,
	pMetadata: *mut VkHdrMetadataEXT
) -> VkResult;

pub type PFN_vkGetSwapchainStatusKHR = unsafe extern "system" fn(
	device: VkDevice,
	swapchain: VkSwapchainKHR
) -> VkResult;

pub type PFN_vkGetRefreshCycleDurationGOOGLE = unsafe extern "system" fn(
	device: VkDevice,
	swapchain: VkSwapchainKHR,
	pDisplayTimingProperties: *mut VkRefreshCycleDurationGOOGLE
) -> VkResult;

pub type PFN_vkGetPastPresentationTimingGOOGLE = unsafe extern "system" fn(
	device: VkDevice,
	swapchain: VkSwapchainKHR,
	pPresentationTimingCount: *mut u32,
	pPresentationTimings: *mut VkPastPresentationTimingGOOGLE
) -> VkResult;

pub type PFN_vkCreateIOSSurfaceMVK = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkIOSSurfaceCreateInfoMVK,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkCreateMacOSSurfaceMVK = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkMacOSSurfaceCreateInfoMVK,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkCreateMetalSurfaceEXT = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkMetalSurfaceCreateInfoEXT,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkCmdSetViewportWScalingNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstViewport: u32,
	viewportCount: u32,
	pViewportWScalings: *mut VkViewportWScalingNV
) -> VkResult;

pub type PFN_vkCmdSetDiscardRectangleEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstDiscardRectangle: u32,
	discardRectangleCount: u32,
	pDiscardRectangles: *mut VkRect2D
) -> VkResult;

pub type PFN_vkCmdSetSampleLocationsEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pSampleLocationsInfo: *mut VkSampleLocationsInfoEXT
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	samples: VkSampleCountFlagBits,
	pMultisampleProperties: *mut VkMultisamplePropertiesEXT
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pSurfaceInfo: *mut VkPhysicalDeviceSurfaceInfo2KHR,
	pSurfaceCapabilities: *mut VkSurfaceCapabilities2KHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pSurfaceInfo: *mut VkPhysicalDeviceSurfaceInfo2KHR,
	pSurfaceFormatCount: *mut u32,
	pSurfaceFormats: *mut VkSurfaceFormat2KHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceDisplayProperties2KHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pPropertyCount: *mut u32,
	pProperties: *mut VkDisplayProperties2KHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pPropertyCount: *mut u32,
	pProperties: *mut VkDisplayPlaneProperties2KHR
) -> VkResult;

pub type PFN_vkGetDisplayModeProperties2KHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	display: VkDisplayKHR,
	pPropertyCount: *mut u32,
	pProperties: *mut VkDisplayModeProperties2KHR
) -> VkResult;

pub type PFN_vkGetDisplayPlaneCapabilities2KHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pDisplayPlaneInfo: *mut VkDisplayPlaneInfo2KHR,
	pCapabilities: *mut VkDisplayPlaneCapabilities2KHR
) -> VkResult;

pub type PFN_vkGetBufferMemoryRequirements2 = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkBufferMemoryRequirementsInfo2,
	pMemoryRequirements: *mut VkMemoryRequirements2
) -> VkResult;

pub type PFN_vkGetImageMemoryRequirements2 = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkImageMemoryRequirementsInfo2,
	pMemoryRequirements: *mut VkMemoryRequirements2
) -> VkResult;

pub type PFN_vkGetImageSparseMemoryRequirements2 = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkImageSparseMemoryRequirementsInfo2,
	pSparseMemoryRequirementCount: *mut u32,
	pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2
) -> VkResult;

pub type PFN_vkGetDeviceBufferMemoryRequirements = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkDeviceBufferMemoryRequirements,
	pMemoryRequirements: *mut VkMemoryRequirements2
) -> VkResult;

pub type PFN_vkGetDeviceImageMemoryRequirements = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkDeviceImageMemoryRequirements,
	pMemoryRequirements: *mut VkMemoryRequirements2
) -> VkResult;

pub type PFN_vkGetDeviceImageSparseMemoryRequirements = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkDeviceImageMemoryRequirements,
	pSparseMemoryRequirementCount: *mut u32,
	pSparseMemoryRequirements: *mut VkSparseImageMemoryRequirements2
) -> VkResult;

pub type PFN_vkCreateSamplerYcbcrConversion = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkSamplerYcbcrConversionCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pYcbcrConversion: *mut VkSamplerYcbcrConversion
) -> VkResult;

pub type PFN_vkDestroySamplerYcbcrConversion = unsafe extern "system" fn(
	device: VkDevice,
	ycbcrConversion: VkSamplerYcbcrConversion,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetDeviceQueue2 = unsafe extern "system" fn(
	device: VkDevice,
	pQueueInfo: *mut VkDeviceQueueInfo2,
	pQueue: *mut VkQueue
) -> VkResult;

pub type PFN_vkCreateValidationCacheEXT = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkValidationCacheCreateInfoEXT,
	pAllocator: *mut VkAllocationCallbacks,
	pValidationCache: *mut VkValidationCacheEXT
) -> VkResult;

pub type PFN_vkDestroyValidationCacheEXT = unsafe extern "system" fn(
	device: VkDevice,
	validationCache: VkValidationCacheEXT,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetValidationCacheDataEXT = unsafe extern "system" fn(
	device: VkDevice,
	validationCache: VkValidationCacheEXT,
	pDataSize: *mut size_t,
	pData: *mut c_void
) -> VkResult;

pub type PFN_vkMergeValidationCachesEXT = unsafe extern "system" fn(
	device: VkDevice,
	dstCache: VkValidationCacheEXT,
	srcCacheCount: u32,
	pSrcCaches: *mut VkValidationCacheEXT
) -> VkResult;

pub type PFN_vkGetDescriptorSetLayoutSupport = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkDescriptorSetLayoutCreateInfo,
	pSupport: *mut VkDescriptorSetLayoutSupport
) -> VkResult;

pub type PFN_vkGetSwapchainGrallocUsageANDROID = unsafe extern "system" fn(
	device: VkDevice,
	format: VkFormat,
	imageUsage: VkImageUsageFlags,
	grallocUsage: *mut int
) -> VkResult;

pub type PFN_vkGetSwapchainGrallocUsage2ANDROID = unsafe extern "system" fn(
	device: VkDevice,
	format: VkFormat,
	imageUsage: VkImageUsageFlags,
	swapchainImageUsage: VkSwapchainImageUsageFlagsANDROID,
	grallocConsumerUsage: *mut uint64_t,
	grallocProducerUsage: *mut uint64_t
) -> VkResult;

pub type PFN_vkAcquireImageANDROID = unsafe extern "system" fn(
	device: VkDevice,
	image: VkImage,
	nativeFenceFd: int,
	semaphore: VkSemaphore,
	fence: VkFence
) -> VkResult;

pub type PFN_vkQueueSignalReleaseImageANDROID = unsafe extern "system" fn(
	queue: VkQueue,
	waitSemaphoreCount: u32,
	pWaitSemaphores: *mut VkSemaphore,
	image: VkImage,
	pNativeFenceFd: *mut int
) -> VkResult;

pub type PFN_vkGetShaderInfoAMD = unsafe extern "system" fn(
	device: VkDevice,
	pipeline: VkPipeline,
	shaderStage: VkShaderStageFlagBits,
	infoType: VkShaderInfoTypeAMD,
	pInfoSize: *mut size_t,
	pInfo: *mut c_void
) -> VkResult;

pub type PFN_vkSetLocalDimmingAMD = unsafe extern "system" fn(
	device: VkDevice,
	swapChain: VkSwapchainKHR,
	localDimmingEnable: VkBool32
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pTimeDomainCount: *mut u32,
	pTimeDomains: *mut VkTimeDomainEXT
) -> VkResult;

pub type PFN_vkGetCalibratedTimestampsEXT = unsafe extern "system" fn(
	device: VkDevice,
	timestampCount: u32,
	pTimestampInfos: *mut VkCalibratedTimestampInfoEXT,
	pTimestamps: *mut uint64_t,
	pMaxDeviation: *mut uint64_t
) -> VkResult;

pub type PFN_vkSetDebugUtilsObjectNameEXT = unsafe extern "system" fn(
	device: VkDevice,
	pNameInfo: *mut VkDebugUtilsObjectNameInfoEXT
) -> VkResult;

pub type PFN_vkSetDebugUtilsObjectTagEXT = unsafe extern "system" fn(
	device: VkDevice,
	pTagInfo: *mut VkDebugUtilsObjectTagInfoEXT
) -> VkResult;

pub type PFN_vkQueueBeginDebugUtilsLabelEXT = unsafe extern "system" fn(
	queue: VkQueue,
	pLabelInfo: *mut VkDebugUtilsLabelEXT
) -> VkResult;

pub type PFN_vkQueueEndDebugUtilsLabelEXT = unsafe extern "system" fn(
	queue: VkQueue
) -> VkResult;

pub type PFN_vkQueueInsertDebugUtilsLabelEXT = unsafe extern "system" fn(
	queue: VkQueue,
	pLabelInfo: *mut VkDebugUtilsLabelEXT
) -> VkResult;

pub type PFN_vkCmdBeginDebugUtilsLabelEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pLabelInfo: *mut VkDebugUtilsLabelEXT
) -> VkResult;

pub type PFN_vkCmdEndDebugUtilsLabelEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer
) -> VkResult;

pub type PFN_vkCmdInsertDebugUtilsLabelEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pLabelInfo: *mut VkDebugUtilsLabelEXT
) -> VkResult;

pub type PFN_vkCreateDebugUtilsMessengerEXT = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkDebugUtilsMessengerCreateInfoEXT,
	pAllocator: *mut VkAllocationCallbacks,
	pMessenger: *mut VkDebugUtilsMessengerEXT
) -> VkResult;

pub type PFN_vkDestroyDebugUtilsMessengerEXT = unsafe extern "system" fn(
	instance: VkInstance,
	messenger: VkDebugUtilsMessengerEXT,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkSubmitDebugUtilsMessageEXT = unsafe extern "system" fn(
	instance: VkInstance,
	messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT,
	messageTypes: VkDebugUtilsMessageTypeFlagsEXT,
	pCallbackData: *mut VkDebugUtilsMessengerCallbackDataEXT
) -> VkResult;

pub type PFN_vkGetMemoryHostPointerPropertiesEXT = unsafe extern "system" fn(
	device: VkDevice,
	handleType: VkExternalMemoryHandleTypeFlagBits,
	pHostPointer: *mut c_void,
	pMemoryHostPointerProperties: *mut VkMemoryHostPointerPropertiesEXT
) -> VkResult;

pub type PFN_vkCmdWriteBufferMarkerAMD = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pipelineStage: VkPipelineStageFlagBits,
	dstBuffer: VkBuffer,
	dstOffset: VkDeviceSize,
	marker: u32
) -> VkResult;

pub type PFN_vkCreateRenderPass2 = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkRenderPassCreateInfo2,
	pAllocator: *mut VkAllocationCallbacks,
	pRenderPass: *mut VkRenderPass
) -> VkResult;

pub type PFN_vkCmdBeginRenderPass2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pRenderPassBegin: *mut VkRenderPassBeginInfo,
	pSubpassBeginInfo: *mut VkSubpassBeginInfo
) -> VkResult;

pub type PFN_vkCmdNextSubpass2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pSubpassBeginInfo: *mut VkSubpassBeginInfo,
	pSubpassEndInfo: *mut VkSubpassEndInfo
) -> VkResult;

pub type PFN_vkCmdEndRenderPass2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pSubpassEndInfo: *mut VkSubpassEndInfo
) -> VkResult;

pub type PFN_vkGetSemaphoreCounterValue = unsafe extern "system" fn(
	device: VkDevice,
	semaphore: VkSemaphore,
	pValue: *mut uint64_t
) -> VkResult;

pub type PFN_vkWaitSemaphores = unsafe extern "system" fn(
	device: VkDevice,
	pWaitInfo: *mut VkSemaphoreWaitInfo,
	timeout: uint64_t
) -> VkResult;

pub type PFN_vkSignalSemaphore = unsafe extern "system" fn(
	device: VkDevice,
	pSignalInfo: *mut VkSemaphoreSignalInfo
) -> VkResult;

pub type PFN_vkGetAndroidHardwareBufferPropertiesANDROID = unsafe extern "system" fn(
	device: VkDevice,
	buffer: *const AHardwareBuffer,
	pProperties: *mut VkAndroidHardwareBufferPropertiesANDROID
) -> VkResult;

pub type PFN_vkGetMemoryAndroidHardwareBufferANDROID = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkMemoryGetAndroidHardwareBufferInfoANDROID,
	pBuffer: *mut *mut AHardwareBuffer
) -> VkResult;

pub type PFN_vkCmdDrawIndirectCount = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	buffer: VkBuffer,
	offset: VkDeviceSize,
	countBuffer: VkBuffer,
	countBufferOffset: VkDeviceSize,
	maxDrawCount: u32,
	stride: u32
) -> VkResult;

pub type PFN_vkCmdDrawIndexedIndirectCount = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	buffer: VkBuffer,
	offset: VkDeviceSize,
	countBuffer: VkBuffer,
	countBufferOffset: VkDeviceSize,
	maxDrawCount: u32,
	stride: u32
) -> VkResult;

pub type PFN_vkCmdSetCheckpointNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pCheckpointMarker: *mut c_void
) -> VkResult;

pub type PFN_vkGetQueueCheckpointDataNV = unsafe extern "system" fn(
	queue: VkQueue,
	pCheckpointDataCount: *mut u32,
	pCheckpointData: *mut VkCheckpointDataNV
) -> VkResult;

pub type PFN_vkCmdBindTransformFeedbackBuffersEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstBinding: u32,
	bindingCount: u32,
	pBuffers: *mut VkBuffer,
	pOffsets: *mut VkDeviceSize,
	pSizes: *mut VkDeviceSize
) -> VkResult;

pub type PFN_vkCmdBeginTransformFeedbackEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstCounterBuffer: u32,
	counterBufferCount: u32,
	pCounterBuffers: *mut VkBuffer,
	pCounterBufferOffsets: *mut VkDeviceSize
) -> VkResult;

pub type PFN_vkCmdEndTransformFeedbackEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstCounterBuffer: u32,
	counterBufferCount: u32,
	pCounterBuffers: *mut VkBuffer,
	pCounterBufferOffsets: *mut VkDeviceSize
) -> VkResult;

pub type PFN_vkCmdBeginQueryIndexedEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	queryPool: VkQueryPool,
	query: u32,
	flags: VkQueryControlFlags,
	index: u32
) -> VkResult;

pub type PFN_vkCmdEndQueryIndexedEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	queryPool: VkQueryPool,
	query: u32,
	index: u32
) -> VkResult;

pub type PFN_vkCmdDrawIndirectByteCountEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	instanceCount: u32,
	firstInstance: u32,
	counterBuffer: VkBuffer,
	counterBufferOffset: VkDeviceSize,
	counterOffset: u32,
	vertexStride: u32
) -> VkResult;

pub type PFN_vkCmdSetExclusiveScissorNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstExclusiveScissor: u32,
	exclusiveScissorCount: u32,
	pExclusiveScissors: *mut VkRect2D
) -> VkResult;

pub type PFN_vkCmdBindShadingRateImageNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	imageView: VkImageView,
	imageLayout: VkImageLayout
) -> VkResult;

pub type PFN_vkCmdSetViewportShadingRatePaletteNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstViewport: u32,
	viewportCount: u32,
	pShadingRatePalettes: *mut VkShadingRatePaletteNV
) -> VkResult;

pub type PFN_vkCmdSetCoarseSampleOrderNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	sampleOrderType: VkCoarseSampleOrderTypeNV,
	customSampleOrderCount: u32,
	pCustomSampleOrders: *mut VkCoarseSampleOrderCustomNV
) -> VkResult;

pub type PFN_vkCmdDrawMeshTasksNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	taskCount: u32,
	firstTask: u32
) -> VkResult;

pub type PFN_vkCmdDrawMeshTasksIndirectNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	buffer: VkBuffer,
	offset: VkDeviceSize,
	drawCount: u32,
	stride: u32
) -> VkResult;

pub type PFN_vkCmdDrawMeshTasksIndirectCountNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	buffer: VkBuffer,
	offset: VkDeviceSize,
	countBuffer: VkBuffer,
	countBufferOffset: VkDeviceSize,
	maxDrawCount: u32,
	stride: u32
) -> VkResult;

pub type PFN_vkCmdDrawMeshTasksEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	groupCountX: u32,
	groupCountY: u32,
	groupCountZ: u32
) -> VkResult;

pub type PFN_vkCmdDrawMeshTasksIndirectEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	buffer: VkBuffer,
	offset: VkDeviceSize,
	drawCount: u32,
	stride: u32
) -> VkResult;

pub type PFN_vkCmdDrawMeshTasksIndirectCountEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	buffer: VkBuffer,
	offset: VkDeviceSize,
	countBuffer: VkBuffer,
	countBufferOffset: VkDeviceSize,
	maxDrawCount: u32,
	stride: u32
) -> VkResult;

pub type PFN_vkCompileDeferredNV = unsafe extern "system" fn(
	device: VkDevice,
	pipeline: VkPipeline,
	shader: u32
) -> VkResult;

pub type PFN_vkCreateAccelerationStructureNV = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkAccelerationStructureCreateInfoNV,
	pAllocator: *mut VkAllocationCallbacks,
	pAccelerationStructure: *mut VkAccelerationStructureNV
) -> VkResult;

pub type PFN_vkCmdBindInvocationMaskHUAWEI = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	imageView: VkImageView,
	imageLayout: VkImageLayout
) -> VkResult;

pub type PFN_vkDestroyAccelerationStructureKHR = unsafe extern "system" fn(
	device: VkDevice,
	accelerationStructure: VkAccelerationStructureKHR,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkDestroyAccelerationStructureNV = unsafe extern "system" fn(
	device: VkDevice,
	accelerationStructure: VkAccelerationStructureNV,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetAccelerationStructureMemoryRequirementsNV = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkAccelerationStructureMemoryRequirementsInfoNV,
	pMemoryRequirements: *mut VkMemoryRequirements2KHR
) -> VkResult;

pub type PFN_vkBindAccelerationStructureMemoryNV = unsafe extern "system" fn(
	device: VkDevice,
	bindInfoCount: u32,
	pBindInfos: *mut VkBindAccelerationStructureMemoryInfoNV
) -> VkResult;

pub type PFN_vkCmdCopyAccelerationStructureNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	dst: VkAccelerationStructureNV,
	src: VkAccelerationStructureNV,
	mode: VkCopyAccelerationStructureModeKHR
) -> VkResult;

pub type PFN_vkCmdCopyAccelerationStructureKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pInfo: *mut VkCopyAccelerationStructureInfoKHR
) -> VkResult;

pub type PFN_vkCopyAccelerationStructureKHR = unsafe extern "system" fn(
	device: VkDevice,
	deferredOperation: VkDeferredOperationKHR,
	pInfo: *mut VkCopyAccelerationStructureInfoKHR
) -> VkResult;

pub type PFN_vkCmdCopyAccelerationStructureToMemoryKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pInfo: *mut VkCopyAccelerationStructureToMemoryInfoKHR
) -> VkResult;

pub type PFN_vkCopyAccelerationStructureToMemoryKHR = unsafe extern "system" fn(
	device: VkDevice,
	deferredOperation: VkDeferredOperationKHR,
	pInfo: *mut VkCopyAccelerationStructureToMemoryInfoKHR
) -> VkResult;

pub type PFN_vkCmdCopyMemoryToAccelerationStructureKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pInfo: *mut VkCopyMemoryToAccelerationStructureInfoKHR
) -> VkResult;

pub type PFN_vkCopyMemoryToAccelerationStructureKHR = unsafe extern "system" fn(
	device: VkDevice,
	deferredOperation: VkDeferredOperationKHR,
	pInfo: *mut VkCopyMemoryToAccelerationStructureInfoKHR
) -> VkResult;

pub type PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	accelerationStructureCount: u32,
	pAccelerationStructures: *mut VkAccelerationStructureKHR,
	queryType: VkQueryType,
	queryPool: VkQueryPool,
	firstQuery: u32
) -> VkResult;

pub type PFN_vkCmdWriteAccelerationStructuresPropertiesNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	accelerationStructureCount: u32,
	pAccelerationStructures: *mut VkAccelerationStructureNV,
	queryType: VkQueryType,
	queryPool: VkQueryPool,
	firstQuery: u32
) -> VkResult;

pub type PFN_vkCmdBuildAccelerationStructureNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pInfo: *mut VkAccelerationStructureInfoNV,
	instanceData: VkBuffer,
	instanceOffset: VkDeviceSize,
	update: VkBool32,
	dst: VkAccelerationStructureNV,
	src: VkAccelerationStructureNV,
	scratch: VkBuffer,
	scratchOffset: VkDeviceSize
) -> VkResult;

pub type PFN_vkWriteAccelerationStructuresPropertiesKHR = unsafe extern "system" fn(
	device: VkDevice,
	accelerationStructureCount: u32,
	pAccelerationStructures: *mut VkAccelerationStructureKHR,
	queryType: VkQueryType,
	dataSize: size_t,
	pData: *mut c_void,
	stride: size_t
) -> VkResult;

pub type PFN_vkCmdTraceRaysKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pRaygenShaderBindingTable: *mut VkStridedDeviceAddressRegionKHR,
	pMissShaderBindingTable: *mut VkStridedDeviceAddressRegionKHR,
	pHitShaderBindingTable: *mut VkStridedDeviceAddressRegionKHR,
	pCallableShaderBindingTable: *mut VkStridedDeviceAddressRegionKHR,
	width: u32,
	height: u32,
	depth: u32
) -> VkResult;

pub type PFN_vkCmdTraceRaysNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	raygenShaderBindingTableBuffer: VkBuffer,
	raygenShaderBindingOffset: VkDeviceSize,
	missShaderBindingTableBuffer: VkBuffer,
	missShaderBindingOffset: VkDeviceSize,
	missShaderBindingStride: VkDeviceSize,
	hitShaderBindingTableBuffer: VkBuffer,
	hitShaderBindingOffset: VkDeviceSize,
	hitShaderBindingStride: VkDeviceSize,
	callableShaderBindingTableBuffer: VkBuffer,
	callableShaderBindingOffset: VkDeviceSize,
	callableShaderBindingStride: VkDeviceSize,
	width: u32,
	height: u32,
	depth: u32
) -> VkResult;

pub type PFN_vkGetRayTracingShaderGroupHandlesKHR = unsafe extern "system" fn(
	device: VkDevice,
	pipeline: VkPipeline,
	firstGroup: u32,
	groupCount: u32,
	dataSize: size_t,
	pData: *mut c_void
) -> VkResult;

pub type PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = unsafe extern "system" fn(
	device: VkDevice,
	pipeline: VkPipeline,
	firstGroup: u32,
	groupCount: u32,
	dataSize: size_t,
	pData: *mut c_void
) -> VkResult;

pub type PFN_vkGetAccelerationStructureHandleNV = unsafe extern "system" fn(
	device: VkDevice,
	accelerationStructure: VkAccelerationStructureNV,
	dataSize: size_t,
	pData: *mut c_void
) -> VkResult;

pub type PFN_vkCreateRayTracingPipelinesNV = unsafe extern "system" fn(
	device: VkDevice,
	pipelineCache: VkPipelineCache,
	createInfoCount: u32,
	pCreateInfos: *mut VkRayTracingPipelineCreateInfoNV,
	pAllocator: *mut VkAllocationCallbacks,
	pPipelines: *mut VkPipeline
) -> VkResult;

pub type PFN_vkCreateRayTracingPipelinesKHR = unsafe extern "system" fn(
	device: VkDevice,
	deferredOperation: VkDeferredOperationKHR,
	pipelineCache: VkPipelineCache,
	createInfoCount: u32,
	pCreateInfos: *mut VkRayTracingPipelineCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pPipelines: *mut VkPipeline
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pPropertyCount: *mut u32,
	pProperties: *mut VkCooperativeMatrixPropertiesNV
) -> VkResult;

pub type PFN_vkCmdTraceRaysIndirectKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pRaygenShaderBindingTable: *mut VkStridedDeviceAddressRegionKHR,
	pMissShaderBindingTable: *mut VkStridedDeviceAddressRegionKHR,
	pHitShaderBindingTable: *mut VkStridedDeviceAddressRegionKHR,
	pCallableShaderBindingTable: *mut VkStridedDeviceAddressRegionKHR,
	indirectDeviceAddress: VkDeviceAddress
) -> VkResult;

pub type PFN_vkCmdTraceRaysIndirect2KHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	indirectDeviceAddress: VkDeviceAddress
) -> VkResult;

pub type PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = unsafe extern "system" fn(
	device: VkDevice,
	pVersionInfo: *mut VkAccelerationStructureVersionInfoKHR,
	pCompatibility: *mut VkAccelerationStructureCompatibilityKHR
) -> VkResult;

pub type PFN_vkGetRayTracingShaderGroupStackSizeKHR = unsafe extern "system" fn(
	device: VkDevice,
	pipeline: VkPipeline,
	group: u32,
	groupShader: VkShaderGroupShaderKHR
) -> VkResult;

pub type PFN_vkCmdSetRayTracingPipelineStackSizeKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pipelineStackSize: u32
) -> VkResult;

pub type PFN_vkGetImageViewHandleNVX = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkImageViewHandleInfoNVX
) -> VkResult;

pub type PFN_vkGetImageViewAddressNVX = unsafe extern "system" fn(
	device: VkDevice,
	imageView: VkImageView,
	pProperties: *mut VkImageViewAddressPropertiesNVX
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pSurfaceInfo: *mut VkPhysicalDeviceSurfaceInfo2KHR,
	pPresentModeCount: *mut u32,
	pPresentModes: *mut VkPresentModeKHR
) -> VkResult;

pub type PFN_vkGetDeviceGroupSurfacePresentModes2EXT = unsafe extern "system" fn(
	device: VkDevice,
	pSurfaceInfo: *mut VkPhysicalDeviceSurfaceInfo2KHR,
	pModes: *mut VkDeviceGroupPresentModeFlagsKHR
) -> VkResult;

pub type PFN_vkAcquireFullScreenExclusiveModeEXT = unsafe extern "system" fn(
	device: VkDevice,
	swapchain: VkSwapchainKHR
) -> VkResult;

pub type PFN_vkReleaseFullScreenExclusiveModeEXT = unsafe extern "system" fn(
	device: VkDevice,
	swapchain: VkSwapchainKHR
) -> VkResult;

pub type PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	queueFamilyIndex: u32,
	pCounterCount: *mut u32,
	pCounters: *mut VkPerformanceCounterKHR,
	pCounterDescriptions: *mut VkPerformanceCounterDescriptionKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pPerformanceQueryCreateInfo: *mut VkQueryPoolPerformanceCreateInfoKHR,
	pNumPasses: *mut u32
) -> VkResult;

pub type PFN_vkAcquireProfilingLockKHR = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkAcquireProfilingLockInfoKHR
) -> VkResult;

pub type PFN_vkReleaseProfilingLockKHR = unsafe extern "system" fn(
	device: VkDevice
) -> VkResult;

pub type PFN_vkGetImageDrmFormatModifierPropertiesEXT = unsafe extern "system" fn(
	device: VkDevice,
	image: VkImage,
	pProperties: *mut VkImageDrmFormatModifierPropertiesEXT
) -> VkResult;

pub type PFN_vkGetBufferOpaqueCaptureAddress = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkBufferDeviceAddressInfo
) -> VkResult;

pub type PFN_vkGetBufferDeviceAddress = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkBufferDeviceAddressInfo
) -> VkResult;

pub type PFN_vkCreateHeadlessSurfaceEXT = unsafe extern "system" fn(
	instance: VkInstance,
	pCreateInfo: *mut VkHeadlessSurfaceCreateInfoEXT,
	pAllocator: *mut VkAllocationCallbacks,
	pSurface: *mut VkSurfaceKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pCombinationCount: *mut u32,
	pCombinations: *mut VkFramebufferMixedSamplesCombinationNV
) -> VkResult;

pub type PFN_vkInitializePerformanceApiINTEL = unsafe extern "system" fn(
	device: VkDevice,
	pInitializeInfo: *mut VkInitializePerformanceApiInfoINTEL
) -> VkResult;

pub type PFN_vkUninitializePerformanceApiINTEL = unsafe extern "system" fn(
	device: VkDevice
) -> VkResult;

pub type PFN_vkCmdSetPerformanceMarkerINTEL = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pMarkerInfo: *mut VkPerformanceMarkerInfoINTEL
) -> VkResult;

pub type PFN_vkCmdSetPerformanceStreamMarkerINTEL = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pMarkerInfo: *mut VkPerformanceStreamMarkerInfoINTEL
) -> VkResult;

pub type PFN_vkCmdSetPerformanceOverrideINTEL = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pOverrideInfo: *mut VkPerformanceOverrideInfoINTEL
) -> VkResult;

pub type PFN_vkAcquirePerformanceConfigurationINTEL = unsafe extern "system" fn(
	device: VkDevice,
	pAcquireInfo: *mut VkPerformanceConfigurationAcquireInfoINTEL,
	pConfiguration: *mut VkPerformanceConfigurationINTEL
) -> VkResult;

pub type PFN_vkReleasePerformanceConfigurationINTEL = unsafe extern "system" fn(
	device: VkDevice,
	configuration: VkPerformanceConfigurationINTEL
) -> VkResult;

pub type PFN_vkQueueSetPerformanceConfigurationINTEL = unsafe extern "system" fn(
	queue: VkQueue,
	configuration: VkPerformanceConfigurationINTEL
) -> VkResult;

pub type PFN_vkGetPerformanceParameterINTEL = unsafe extern "system" fn(
	device: VkDevice,
	parameter: VkPerformanceParameterTypeINTEL,
	pValue: *mut VkPerformanceValueINTEL
) -> VkResult;

pub type PFN_vkGetDeviceMemoryOpaqueCaptureAddress = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkDeviceMemoryOpaqueCaptureAddressInfo
) -> VkResult;

pub type PFN_vkGetPipelineExecutablePropertiesKHR = unsafe extern "system" fn(
	device: VkDevice,
	pPipelineInfo: *mut VkPipelineInfoKHR,
	pExecutableCount: *mut u32,
	pProperties: *mut VkPipelineExecutablePropertiesKHR
) -> VkResult;

pub type PFN_vkGetPipelineExecutableStatisticsKHR = unsafe extern "system" fn(
	device: VkDevice,
	pExecutableInfo: *mut VkPipelineExecutableInfoKHR,
	pStatisticCount: *mut u32,
	pStatistics: *mut VkPipelineExecutableStatisticKHR
) -> VkResult;

pub type PFN_vkGetPipelineExecutableInternalRepresentationsKHR = unsafe extern "system" fn(
	device: VkDevice,
	pExecutableInfo: *mut VkPipelineExecutableInfoKHR,
	pInternalRepresentationCount: *mut u32,
	pInternalRepresentations: *mut VkPipelineExecutableInternalRepresentationKHR
) -> VkResult;

pub type PFN_vkCmdSetLineStippleEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	lineStippleFactor: u32,
	lineStipplePattern: uint16_t
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceToolProperties = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pToolCount: *mut u32,
	pToolProperties: *mut VkPhysicalDeviceToolProperties
) -> VkResult;

pub type PFN_vkCreateAccelerationStructureKHR = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkAccelerationStructureCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pAccelerationStructure: *mut VkAccelerationStructureKHR
) -> VkResult;

pub type PFN_vkCmdBuildAccelerationStructuresKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	infoCount: u32,
	pInfos: *mut VkAccelerationStructureBuildGeometryInfoKHR,
	ppBuildRangeInfos: *mut *mut VkAccelerationStructureBuildRangeInfoKHR
) -> VkResult;

pub type PFN_vkCmdBuildAccelerationStructuresIndirectKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	infoCount: u32,
	pInfos: *mut VkAccelerationStructureBuildGeometryInfoKHR,
	pIndirectDeviceAddresses: *mut VkDeviceAddress,
	pIndirectStrides: *mut u32,
	ppMaxPrimitiveCounts: *mut *mut u32
) -> VkResult;

pub type PFN_vkBuildAccelerationStructuresKHR = unsafe extern "system" fn(
	device: VkDevice,
	deferredOperation: VkDeferredOperationKHR,
	infoCount: u32,
	pInfos: *mut VkAccelerationStructureBuildGeometryInfoKHR,
	ppBuildRangeInfos: *mut *mut VkAccelerationStructureBuildRangeInfoKHR
) -> VkResult;

pub type PFN_vkGetAccelerationStructureDeviceAddressKHR = unsafe extern "system" fn(
	device: VkDevice,
	pInfo: *mut VkAccelerationStructureDeviceAddressInfoKHR
) -> VkResult;

pub type PFN_vkCreateDeferredOperationKHR = unsafe extern "system" fn(
	device: VkDevice,
	pAllocator: *mut VkAllocationCallbacks,
	pDeferredOperation: *mut VkDeferredOperationKHR
) -> VkResult;

pub type PFN_vkDestroyDeferredOperationKHR = unsafe extern "system" fn(
	device: VkDevice,
	operation: VkDeferredOperationKHR,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetDeferredOperationMaxConcurrencyKHR = unsafe extern "system" fn(
	device: VkDevice,
	operation: VkDeferredOperationKHR
) -> VkResult;

pub type PFN_vkGetDeferredOperationResultKHR = unsafe extern "system" fn(
	device: VkDevice,
	operation: VkDeferredOperationKHR
) -> VkResult;

pub type PFN_vkDeferredOperationJoinKHR = unsafe extern "system" fn(
	device: VkDevice,
	operation: VkDeferredOperationKHR
) -> VkResult;

pub type PFN_vkCmdSetCullMode = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	cullMode: VkCullModeFlags
) -> VkResult;

pub type PFN_vkCmdSetFrontFace = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	frontFace: VkFrontFace
) -> VkResult;

pub type PFN_vkCmdSetPrimitiveTopology = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	primitiveTopology: VkPrimitiveTopology
) -> VkResult;

pub type PFN_vkCmdSetViewportWithCount = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	viewportCount: u32,
	pViewports: *mut VkViewport
) -> VkResult;

pub type PFN_vkCmdSetScissorWithCount = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	scissorCount: u32,
	pScissors: *mut VkRect2D
) -> VkResult;

pub type PFN_vkCmdBindVertexBuffers2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstBinding: u32,
	bindingCount: u32,
	pBuffers: *mut VkBuffer,
	pOffsets: *mut VkDeviceSize,
	pSizes: *mut VkDeviceSize,
	pStrides: *mut VkDeviceSize
) -> VkResult;

pub type PFN_vkCmdSetDepthTestEnable = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	depthTestEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetDepthWriteEnable = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	depthWriteEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetDepthCompareOp = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	depthCompareOp: VkCompareOp
) -> VkResult;

pub type PFN_vkCmdSetDepthBoundsTestEnable = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	depthBoundsTestEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetStencilTestEnable = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	stencilTestEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetStencilOp = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	faceMask: VkStencilFaceFlags,
	failOp: VkStencilOp,
	passOp: VkStencilOp,
	depthFailOp: VkStencilOp,
	compareOp: VkCompareOp
) -> VkResult;

pub type PFN_vkCmdSetPatchControlPointsEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	patchControlPoints: u32
) -> VkResult;

pub type PFN_vkCmdSetRasterizerDiscardEnable = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	rasterizerDiscardEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetDepthBiasEnable = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	depthBiasEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetLogicOpEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	logicOp: VkLogicOp
) -> VkResult;

pub type PFN_vkCmdSetPrimitiveRestartEnable = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	primitiveRestartEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetTessellationDomainOriginEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	domainOrigin: VkTessellationDomainOrigin
) -> VkResult;

pub type PFN_vkCmdSetDepthClampEnableEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	depthClampEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetPolygonModeEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	polygonMode: VkPolygonMode
) -> VkResult;

pub type PFN_vkCmdSetRasterizationSamplesEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	rasterizationSamples: VkSampleCountFlagBits
) -> VkResult;

pub type PFN_vkCmdSetSampleMaskEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	samples: VkSampleCountFlagBits,
	pSampleMask: *mut VkSampleMask
) -> VkResult;

pub type PFN_vkCmdSetAlphaToCoverageEnableEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	alphaToCoverageEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetAlphaToOneEnableEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	alphaToOneEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetLogicOpEnableEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	logicOpEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetColorBlendEnableEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstAttachment: u32,
	attachmentCount: u32,
	pColorBlendEnables: *mut VkBool32
) -> VkResult;

pub type PFN_vkCmdSetColorBlendEquationEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstAttachment: u32,
	attachmentCount: u32,
	pColorBlendEquations: *mut VkColorBlendEquationEXT
) -> VkResult;

pub type PFN_vkCmdSetColorWriteMaskEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstAttachment: u32,
	attachmentCount: u32,
	pColorWriteMasks: *mut VkColorComponentFlags
) -> VkResult;

pub type PFN_vkCmdSetRasterizationStreamEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	rasterizationStream: u32
) -> VkResult;

pub type PFN_vkCmdSetConservativeRasterizationModeEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	conservativeRasterizationMode: VkConservativeRasterizationModeEXT
) -> VkResult;

pub type PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	extraPrimitiveOverestimationSize: float
) -> VkResult;

pub type PFN_vkCmdSetDepthClipEnableEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	depthClipEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetSampleLocationsEnableEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	sampleLocationsEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetColorBlendAdvancedEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstAttachment: u32,
	attachmentCount: u32,
	pColorBlendAdvanced: *mut VkColorBlendAdvancedEXT
) -> VkResult;

pub type PFN_vkCmdSetProvokingVertexModeEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	provokingVertexMode: VkProvokingVertexModeEXT
) -> VkResult;

pub type PFN_vkCmdSetLineRasterizationModeEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	lineRasterizationMode: VkLineRasterizationModeEXT
) -> VkResult;

pub type PFN_vkCmdSetLineStippleEnableEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	stippledLineEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetDepthClipNegativeOneToOneEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	negativeOneToOne: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetViewportWScalingEnableNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	viewportWScalingEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetViewportSwizzleNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	firstViewport: u32,
	viewportCount: u32,
	pViewportSwizzles: *mut VkViewportSwizzleNV
) -> VkResult;

pub type PFN_vkCmdSetCoverageToColorEnableNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	coverageToColorEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetCoverageToColorLocationNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	coverageToColorLocation: u32
) -> VkResult;

pub type PFN_vkCmdSetCoverageModulationModeNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	coverageModulationMode: VkCoverageModulationModeNV
) -> VkResult;

pub type PFN_vkCmdSetCoverageModulationTableEnableNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	coverageModulationTableEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetCoverageModulationTableNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	coverageModulationTableCount: u32,
	pCoverageModulationTable: *mut float
) -> VkResult;

pub type PFN_vkCmdSetShadingRateImageEnableNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	shadingRateImageEnable: VkBool32
) -> VkResult;

pub type PFN_vkCmdSetCoverageReductionModeNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	coverageReductionMode: VkCoverageReductionModeNV
) -> VkResult;

pub type PFN_vkCmdSetRepresentativeFragmentTestEnableNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	representativeFragmentTestEnable: VkBool32
) -> VkResult;

pub type PFN_vkCreatePrivateDataSlot = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkPrivateDataSlotCreateInfo,
	pAllocator: *mut VkAllocationCallbacks,
	pPrivateDataSlot: *mut VkPrivateDataSlot
) -> VkResult;

pub type PFN_vkDestroyPrivateDataSlot = unsafe extern "system" fn(
	device: VkDevice,
	privateDataSlot: VkPrivateDataSlot,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkSetPrivateData = unsafe extern "system" fn(
	device: VkDevice,
	objectType: VkObjectType,
	objectHandle: uint64_t,
	privateDataSlot: VkPrivateDataSlot,
	data: uint64_t
) -> VkResult;

pub type PFN_vkGetPrivateData = unsafe extern "system" fn(
	device: VkDevice,
	objectType: VkObjectType,
	objectHandle: uint64_t,
	privateDataSlot: VkPrivateDataSlot,
	pData: *mut uint64_t
) -> VkResult;

pub type PFN_vkCmdCopyBuffer2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pCopyBufferInfo: *mut VkCopyBufferInfo2
) -> VkResult;

pub type PFN_vkCmdCopyImage2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pCopyImageInfo: *mut VkCopyImageInfo2
) -> VkResult;

pub type PFN_vkCmdBlitImage2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pBlitImageInfo: *mut VkBlitImageInfo2
) -> VkResult;

pub type PFN_vkCmdCopyBufferToImage2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pCopyBufferToImageInfo: *mut VkCopyBufferToImageInfo2
) -> VkResult;

pub type PFN_vkCmdCopyImageToBuffer2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pCopyImageToBufferInfo: *mut VkCopyImageToBufferInfo2
) -> VkResult;

pub type PFN_vkCmdResolveImage2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pResolveImageInfo: *mut VkResolveImageInfo2
) -> VkResult;

pub type PFN_vkCmdSetFragmentShadingRateKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pFragmentSize: *mut VkExtent2D,
	combinerOps: [VkFragmentShadingRateCombinerOpKHR; 2]
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pFragmentShadingRateCount: *mut u32,
	pFragmentShadingRates: *mut VkPhysicalDeviceFragmentShadingRateKHR
) -> VkResult;

pub type PFN_vkCmdSetFragmentShadingRateEnumNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	shadingRate: VkFragmentShadingRateNV,
	combinerOps: [VkFragmentShadingRateCombinerOpKHR; 2]
) -> VkResult;

pub type PFN_vkGetAccelerationStructureBuildSizesKHR = unsafe extern "system" fn(
	device: VkDevice,
	buildType: VkAccelerationStructureBuildTypeKHR,
	pBuildInfo: *mut VkAccelerationStructureBuildGeometryInfoKHR,
	pMaxPrimitiveCounts: *mut u32,
	pSizeInfo: *mut VkAccelerationStructureBuildSizesInfoKHR
) -> VkResult;

pub type PFN_vkCmdSetVertexInputEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	vertexBindingDescriptionCount: u32,
	pVertexBindingDescriptions: *mut VkVertexInputBindingDescription2EXT,
	vertexAttributeDescriptionCount: u32,
	pVertexAttributeDescriptions: *mut VkVertexInputAttributeDescription2EXT
) -> VkResult;

pub type PFN_vkCmdSetColorWriteEnableEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	attachmentCount: u32,
	pColorWriteEnables: *mut VkBool32
) -> VkResult;

pub type PFN_vkCmdSetEvent2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	event: VkEvent,
	pDependencyInfo: *mut VkDependencyInfo
) -> VkResult;

pub type PFN_vkCmdResetEvent2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	event: VkEvent,
	stageMask: VkPipelineStageFlags2
) -> VkResult;

pub type PFN_vkCmdWaitEvents2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	eventCount: u32,
	pEvents: *mut VkEvent,
	pDependencyInfos: *mut VkDependencyInfo
) -> VkResult;

pub type PFN_vkCmdPipelineBarrier2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pDependencyInfo: *mut VkDependencyInfo
) -> VkResult;

pub type PFN_vkQueueSubmit2 = unsafe extern "system" fn(
	queue: VkQueue,
	submitCount: u32,
	pSubmits: *mut VkSubmitInfo2,
	fence: VkFence
) -> VkResult;

pub type PFN_vkCmdWriteTimestamp2 = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	stage: VkPipelineStageFlags2,
	queryPool: VkQueryPool,
	query: u32
) -> VkResult;

pub type PFN_vkCmdWriteBufferMarker2AMD = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	stage: VkPipelineStageFlags2,
	dstBuffer: VkBuffer,
	dstOffset: VkDeviceSize,
	marker: u32
) -> VkResult;

pub type PFN_vkGetQueueCheckpointData2NV = unsafe extern "system" fn(
	queue: VkQueue,
	pCheckpointDataCount: *mut u32,
	pCheckpointData: *mut VkCheckpointData2NV
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pVideoProfile: *mut VkVideoProfileInfoKHR,
	pCapabilities: *mut VkVideoCapabilitiesKHR
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pVideoFormatInfo: *mut VkPhysicalDeviceVideoFormatInfoKHR,
	pVideoFormatPropertyCount: *mut u32,
	pVideoFormatProperties: *mut VkVideoFormatPropertiesKHR
) -> VkResult;

pub type PFN_vkCreateVideoSessionKHR = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkVideoSessionCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pVideoSession: *mut VkVideoSessionKHR
) -> VkResult;

pub type PFN_vkDestroyVideoSessionKHR = unsafe extern "system" fn(
	device: VkDevice,
	videoSession: VkVideoSessionKHR,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCreateVideoSessionParametersKHR = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkVideoSessionParametersCreateInfoKHR,
	pAllocator: *mut VkAllocationCallbacks,
	pVideoSessionParameters: *mut VkVideoSessionParametersKHR
) -> VkResult;

pub type PFN_vkUpdateVideoSessionParametersKHR = unsafe extern "system" fn(
	device: VkDevice,
	videoSessionParameters: VkVideoSessionParametersKHR,
	pUpdateInfo: *mut VkVideoSessionParametersUpdateInfoKHR
) -> VkResult;

pub type PFN_vkDestroyVideoSessionParametersKHR = unsafe extern "system" fn(
	device: VkDevice,
	videoSessionParameters: VkVideoSessionParametersKHR,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetVideoSessionMemoryRequirementsKHR = unsafe extern "system" fn(
	device: VkDevice,
	videoSession: VkVideoSessionKHR,
	pMemoryRequirementsCount: *mut u32,
	pMemoryRequirements: *mut VkVideoSessionMemoryRequirementsKHR
) -> VkResult;

pub type PFN_vkBindVideoSessionMemoryKHR = unsafe extern "system" fn(
	device: VkDevice,
	videoSession: VkVideoSessionKHR,
	bindSessionMemoryInfoCount: u32,
	pBindSessionMemoryInfos: *mut VkBindVideoSessionMemoryInfoKHR
) -> VkResult;

pub type PFN_vkCmdDecodeVideoKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pDecodeInfo: *mut VkVideoDecodeInfoKHR
) -> VkResult;

pub type PFN_vkCmdBeginVideoCodingKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pBeginInfo: *mut VkVideoBeginCodingInfoKHR
) -> VkResult;

pub type PFN_vkCmdControlVideoCodingKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pCodingControlInfo: *mut VkVideoCodingControlInfoKHR
) -> VkResult;

pub type PFN_vkCmdEndVideoCodingKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pEndCodingInfo: *mut VkVideoEndCodingInfoKHR
) -> VkResult;

pub type PFN_vkCmdEncodeVideoKHR = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pEncodeInfo: *mut VkVideoEncodeInfoKHR
) -> VkResult;

pub type PFN_vkCmdDecompressMemoryNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	decompressRegionCount: u32,
	pDecompressMemoryRegions: *mut VkDecompressMemoryRegionNV
) -> VkResult;

pub type PFN_vkCmdDecompressMemoryIndirectCountNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	indirectCommandsAddress: VkDeviceAddress,
	indirectCommandsCountAddress: VkDeviceAddress,
	stride: u32
) -> VkResult;

pub type PFN_vkCreateCuModuleNVX = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkCuModuleCreateInfoNVX,
	pAllocator: *mut VkAllocationCallbacks,
	pModule: *mut VkCuModuleNVX
) -> VkResult;

pub type PFN_vkCreateCuFunctionNVX = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkCuFunctionCreateInfoNVX,
	pAllocator: *mut VkAllocationCallbacks,
	pFunction: *mut VkCuFunctionNVX
) -> VkResult;

pub type PFN_vkDestroyCuModuleNVX = unsafe extern "system" fn(
	device: VkDevice,
	module: VkCuModuleNVX,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkDestroyCuFunctionNVX = unsafe extern "system" fn(
	device: VkDevice,
	function: VkCuFunctionNVX,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCmdCuLaunchKernelNVX = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pLaunchInfo: *mut VkCuLaunchInfoNVX
) -> VkResult;

pub type PFN_vkSetDeviceMemoryPriorityEXT = unsafe extern "system" fn(
	device: VkDevice,
	memory: VkDeviceMemory,
	priority: float
) -> VkResult;

pub type PFN_vkAcquireDrmDisplayEXT = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	drmFd: int32_t,
	display: VkDisplayKHR
) -> VkResult;

pub type PFN_vkGetDrmDisplayEXT = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	drmFd: int32_t,
	connectorId: u32,
	display: *mut VkDisplayKHR
) -> VkResult;

pub type PFN_vkWaitForPresentKHR = unsafe extern "system" fn(
	device: VkDevice,
	swapchain: VkSwapchainKHR,
	presentId: uint64_t,
	timeout: uint64_t
) -> VkResult;

pub type PFN_vkCreateBufferCollectionFUCHSIA = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkBufferCollectionCreateInfoFUCHSIA,
	pAllocator: *mut VkAllocationCallbacks,
	pCollection: *mut VkBufferCollectionFUCHSIA
) -> VkResult;

pub type PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA = unsafe extern "system" fn(
	device: VkDevice,
	collection: VkBufferCollectionFUCHSIA,
	pBufferConstraintsInfo: *mut VkBufferConstraintsInfoFUCHSIA
) -> VkResult;

pub type PFN_vkSetBufferCollectionImageConstraintsFUCHSIA = unsafe extern "system" fn(
	device: VkDevice,
	collection: VkBufferCollectionFUCHSIA,
	pImageConstraintsInfo: *mut VkImageConstraintsInfoFUCHSIA
) -> VkResult;

pub type PFN_vkDestroyBufferCollectionFUCHSIA = unsafe extern "system" fn(
	device: VkDevice,
	collection: VkBufferCollectionFUCHSIA,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkGetBufferCollectionPropertiesFUCHSIA = unsafe extern "system" fn(
	device: VkDevice,
	collection: VkBufferCollectionFUCHSIA,
	pProperties: *mut VkBufferCollectionPropertiesFUCHSIA
) -> VkResult;

pub type PFN_vkCmdBeginRendering = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pRenderingInfo: *mut VkRenderingInfo
) -> VkResult;

pub type PFN_vkCmdEndRendering = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer
) -> VkResult;

pub type PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = unsafe extern "system" fn(
	device: VkDevice,
	pBindingReference: *mut VkDescriptorSetBindingReferenceVALVE,
	pHostMapping: *mut VkDescriptorSetLayoutHostMappingInfoVALVE
) -> VkResult;

pub type PFN_vkGetDescriptorSetHostMappingVALVE = unsafe extern "system" fn(
	device: VkDevice,
	descriptorSet: VkDescriptorSet,
	ppData: *mut *mut c_void
) -> VkResult;

pub type PFN_vkCreateMicromapEXT = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkMicromapCreateInfoEXT,
	pAllocator: *mut VkAllocationCallbacks,
	pMicromap: *mut VkMicromapEXT
) -> VkResult;

pub type PFN_vkCmdBuildMicromapsEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	infoCount: u32,
	pInfos: *mut VkMicromapBuildInfoEXT
) -> VkResult;

pub type PFN_vkBuildMicromapsEXT = unsafe extern "system" fn(
	device: VkDevice,
	deferredOperation: VkDeferredOperationKHR,
	infoCount: u32,
	pInfos: *mut VkMicromapBuildInfoEXT
) -> VkResult;

pub type PFN_vkDestroyMicromapEXT = unsafe extern "system" fn(
	device: VkDevice,
	micromap: VkMicromapEXT,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkCmdCopyMicromapEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pInfo: *mut VkCopyMicromapInfoEXT
) -> VkResult;

pub type PFN_vkCopyMicromapEXT = unsafe extern "system" fn(
	device: VkDevice,
	deferredOperation: VkDeferredOperationKHR,
	pInfo: *mut VkCopyMicromapInfoEXT
) -> VkResult;

pub type PFN_vkCmdCopyMicromapToMemoryEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pInfo: *mut VkCopyMicromapToMemoryInfoEXT
) -> VkResult;

pub type PFN_vkCopyMicromapToMemoryEXT = unsafe extern "system" fn(
	device: VkDevice,
	deferredOperation: VkDeferredOperationKHR,
	pInfo: *mut VkCopyMicromapToMemoryInfoEXT
) -> VkResult;

pub type PFN_vkCmdCopyMemoryToMicromapEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	pInfo: *mut VkCopyMemoryToMicromapInfoEXT
) -> VkResult;

pub type PFN_vkCopyMemoryToMicromapEXT = unsafe extern "system" fn(
	device: VkDevice,
	deferredOperation: VkDeferredOperationKHR,
	pInfo: *mut VkCopyMemoryToMicromapInfoEXT
) -> VkResult;

pub type PFN_vkCmdWriteMicromapsPropertiesEXT = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	micromapCount: u32,
	pMicromaps: *mut VkMicromapEXT,
	queryType: VkQueryType,
	queryPool: VkQueryPool,
	firstQuery: u32
) -> VkResult;

pub type PFN_vkWriteMicromapsPropertiesEXT = unsafe extern "system" fn(
	device: VkDevice,
	micromapCount: u32,
	pMicromaps: *mut VkMicromapEXT,
	queryType: VkQueryType,
	dataSize: size_t,
	pData: *mut c_void,
	stride: size_t
) -> VkResult;

pub type PFN_vkGetDeviceMicromapCompatibilityEXT = unsafe extern "system" fn(
	device: VkDevice,
	pVersionInfo: *mut VkMicromapVersionInfoEXT,
	pCompatibility: *mut VkAccelerationStructureCompatibilityKHR
) -> VkResult;

pub type PFN_vkGetMicromapBuildSizesEXT = unsafe extern "system" fn(
	device: VkDevice,
	buildType: VkAccelerationStructureBuildTypeKHR,
	pBuildInfo: *mut VkMicromapBuildInfoEXT,
	pSizeInfo: *mut VkMicromapBuildSizesInfoEXT
) -> VkResult;

pub type PFN_vkGetShaderModuleIdentifierEXT = unsafe extern "system" fn(
	device: VkDevice,
	shaderModule: VkShaderModule,
	pIdentifier: *mut VkShaderModuleIdentifierEXT
) -> VkResult;

pub type PFN_vkGetShaderModuleCreateInfoIdentifierEXT = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkShaderModuleCreateInfo,
	pIdentifier: *mut VkShaderModuleIdentifierEXT
) -> VkResult;

pub type PFN_vkGetImageSubresourceLayout2EXT = unsafe extern "system" fn(
	device: VkDevice,
	image: VkImage,
	pSubresource: *mut VkImageSubresource2EXT,
	pLayout: *mut VkSubresourceLayout2EXT
) -> VkResult;

pub type PFN_vkGetPipelinePropertiesEXT = unsafe extern "system" fn(
	device: VkDevice,
	pPipelineInfo: *mut VkPipelineInfoEXT,
	pPipelineProperties: *mut VkBaseOutStructure
) -> VkResult;

pub type PFN_vkExportMetalObjectsEXT = unsafe extern "system" fn(
	device: VkDevice,
	pMetalObjectsInfo: *mut VkExportMetalObjectsInfoEXT
) -> VkResult;

pub type PFN_vkGetFramebufferTilePropertiesQCOM = unsafe extern "system" fn(
	device: VkDevice,
	framebuffer: VkFramebuffer,
	pPropertiesCount: *mut u32,
	pProperties: *mut VkTilePropertiesQCOM
) -> VkResult;

pub type PFN_vkGetDynamicRenderingTilePropertiesQCOM = unsafe extern "system" fn(
	device: VkDevice,
	pRenderingInfo: *mut VkRenderingInfo,
	pProperties: *mut VkTilePropertiesQCOM
) -> VkResult;

pub type PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = unsafe extern "system" fn(
	physicalDevice: VkPhysicalDevice,
	pOpticalFlowImageFormatInfo: *mut VkOpticalFlowImageFormatInfoNV,
	pFormatCount: *mut u32,
	pImageFormatProperties: *mut VkOpticalFlowImageFormatPropertiesNV
) -> VkResult;

pub type PFN_vkCreateOpticalFlowSessionNV = unsafe extern "system" fn(
	device: VkDevice,
	pCreateInfo: *mut VkOpticalFlowSessionCreateInfoNV,
	pAllocator: *mut VkAllocationCallbacks,
	pSession: *mut VkOpticalFlowSessionNV
) -> VkResult;

pub type PFN_vkDestroyOpticalFlowSessionNV = unsafe extern "system" fn(
	device: VkDevice,
	session: VkOpticalFlowSessionNV,
	pAllocator: *mut VkAllocationCallbacks
) -> VkResult;

pub type PFN_vkBindOpticalFlowSessionImageNV = unsafe extern "system" fn(
	device: VkDevice,
	session: VkOpticalFlowSessionNV,
	bindingPoint: VkOpticalFlowSessionBindingPointNV,
	view: VkImageView,
	layout: VkImageLayout
) -> VkResult;

pub type PFN_vkCmdOpticalFlowExecuteNV = unsafe extern "system" fn(
	commandBuffer: VkCommandBuffer,
	session: VkOpticalFlowSessionNV,
	pExecuteInfo: *mut VkOpticalFlowExecuteInfoNV
) -> VkResult;

/* Full list of vulkan commands */

pub struct VulkanCommands
{
	vkCreateInstance: PFN_vkCreateInstance,
	vkDestroyInstance: PFN_vkDestroyInstance,
	vkEnumeratePhysicalDevices: PFN_vkEnumeratePhysicalDevices,
	vkGetDeviceProcAddr: PFN_vkGetDeviceProcAddr,
	vkGetInstanceProcAddr: PFN_vkGetInstanceProcAddr,
	vkGetPhysicalDeviceProperties: PFN_vkGetPhysicalDeviceProperties,
	vkGetPhysicalDeviceQueueFamilyProperties: PFN_vkGetPhysicalDeviceQueueFamilyProperties,
	vkGetPhysicalDeviceMemoryProperties: PFN_vkGetPhysicalDeviceMemoryProperties,
	vkGetPhysicalDeviceFeatures: PFN_vkGetPhysicalDeviceFeatures,
	vkGetPhysicalDeviceFormatProperties: PFN_vkGetPhysicalDeviceFormatProperties,
	vkGetPhysicalDeviceImageFormatProperties: PFN_vkGetPhysicalDeviceImageFormatProperties,
	vkCreateDevice: PFN_vkCreateDevice,
	vkDestroyDevice: PFN_vkDestroyDevice,
	vkEnumerateInstanceVersion: PFN_vkEnumerateInstanceVersion,
	vkEnumerateInstanceLayerProperties: PFN_vkEnumerateInstanceLayerProperties,
	vkEnumerateInstanceExtensionProperties: PFN_vkEnumerateInstanceExtensionProperties,
	vkEnumerateDeviceLayerProperties: PFN_vkEnumerateDeviceLayerProperties,
	vkEnumerateDeviceExtensionProperties: PFN_vkEnumerateDeviceExtensionProperties,
	vkGetDeviceQueue: PFN_vkGetDeviceQueue,
	vkQueueSubmit: PFN_vkQueueSubmit,
	vkQueueWaitIdle: PFN_vkQueueWaitIdle,
	vkDeviceWaitIdle: PFN_vkDeviceWaitIdle,
	vkAllocateMemory: PFN_vkAllocateMemory,
	vkFreeMemory: PFN_vkFreeMemory,
	vkMapMemory: PFN_vkMapMemory,
	vkUnmapMemory: PFN_vkUnmapMemory,
	vkFlushMappedMemoryRanges: PFN_vkFlushMappedMemoryRanges,
	vkInvalidateMappedMemoryRanges: PFN_vkInvalidateMappedMemoryRanges,
	vkGetDeviceMemoryCommitment: PFN_vkGetDeviceMemoryCommitment,
	vkGetBufferMemoryRequirements: PFN_vkGetBufferMemoryRequirements,
	vkBindBufferMemory: PFN_vkBindBufferMemory,
	vkGetImageMemoryRequirements: PFN_vkGetImageMemoryRequirements,
	vkBindImageMemory: PFN_vkBindImageMemory,
	vkGetImageSparseMemoryRequirements: PFN_vkGetImageSparseMemoryRequirements,
	vkGetPhysicalDeviceSparseImageFormatProperties: PFN_vkGetPhysicalDeviceSparseImageFormatProperties,
	vkQueueBindSparse: PFN_vkQueueBindSparse,
	vkCreateFence: PFN_vkCreateFence,
	vkDestroyFence: PFN_vkDestroyFence,
	vkResetFences: PFN_vkResetFences,
	vkGetFenceStatus: PFN_vkGetFenceStatus,
	vkWaitForFences: PFN_vkWaitForFences,
	vkCreateSemaphore: PFN_vkCreateSemaphore,
	vkDestroySemaphore: PFN_vkDestroySemaphore,
	vkCreateEvent: PFN_vkCreateEvent,
	vkDestroyEvent: PFN_vkDestroyEvent,
	vkGetEventStatus: PFN_vkGetEventStatus,
	vkSetEvent: PFN_vkSetEvent,
	vkResetEvent: PFN_vkResetEvent,
	vkCreateQueryPool: PFN_vkCreateQueryPool,
	vkDestroyQueryPool: PFN_vkDestroyQueryPool,
	vkGetQueryPoolResults: PFN_vkGetQueryPoolResults,
	vkResetQueryPool: PFN_vkResetQueryPool,
	vkCreateBuffer: PFN_vkCreateBuffer,
	vkDestroyBuffer: PFN_vkDestroyBuffer,
	vkCreateBufferView: PFN_vkCreateBufferView,
	vkDestroyBufferView: PFN_vkDestroyBufferView,
	vkCreateImage: PFN_vkCreateImage,
	vkDestroyImage: PFN_vkDestroyImage,
	vkGetImageSubresourceLayout: PFN_vkGetImageSubresourceLayout,
	vkCreateImageView: PFN_vkCreateImageView,
	vkDestroyImageView: PFN_vkDestroyImageView,
	vkCreateShaderModule: PFN_vkCreateShaderModule,
	vkDestroyShaderModule: PFN_vkDestroyShaderModule,
	vkCreatePipelineCache: PFN_vkCreatePipelineCache,
	vkDestroyPipelineCache: PFN_vkDestroyPipelineCache,
	vkGetPipelineCacheData: PFN_vkGetPipelineCacheData,
	vkMergePipelineCaches: PFN_vkMergePipelineCaches,
	vkCreateGraphicsPipelines: PFN_vkCreateGraphicsPipelines,
	vkCreateComputePipelines: PFN_vkCreateComputePipelines,
	vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI: PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI,
	vkDestroyPipeline: PFN_vkDestroyPipeline,
	vkCreatePipelineLayout: PFN_vkCreatePipelineLayout,
	vkDestroyPipelineLayout: PFN_vkDestroyPipelineLayout,
	vkCreateSampler: PFN_vkCreateSampler,
	vkDestroySampler: PFN_vkDestroySampler,
	vkCreateDescriptorSetLayout: PFN_vkCreateDescriptorSetLayout,
	vkDestroyDescriptorSetLayout: PFN_vkDestroyDescriptorSetLayout,
	vkCreateDescriptorPool: PFN_vkCreateDescriptorPool,
	vkDestroyDescriptorPool: PFN_vkDestroyDescriptorPool,
	vkResetDescriptorPool: PFN_vkResetDescriptorPool,
	vkAllocateDescriptorSets: PFN_vkAllocateDescriptorSets,
	vkFreeDescriptorSets: PFN_vkFreeDescriptorSets,
	vkUpdateDescriptorSets: PFN_vkUpdateDescriptorSets,
	vkCreateFramebuffer: PFN_vkCreateFramebuffer,
	vkDestroyFramebuffer: PFN_vkDestroyFramebuffer,
	vkCreateRenderPass: PFN_vkCreateRenderPass,
	vkDestroyRenderPass: PFN_vkDestroyRenderPass,
	vkGetRenderAreaGranularity: PFN_vkGetRenderAreaGranularity,
	vkCreateCommandPool: PFN_vkCreateCommandPool,
	vkDestroyCommandPool: PFN_vkDestroyCommandPool,
	vkResetCommandPool: PFN_vkResetCommandPool,
	vkAllocateCommandBuffers: PFN_vkAllocateCommandBuffers,
	vkFreeCommandBuffers: PFN_vkFreeCommandBuffers,
	vkBeginCommandBuffer: PFN_vkBeginCommandBuffer,
	vkEndCommandBuffer: PFN_vkEndCommandBuffer,
	vkResetCommandBuffer: PFN_vkResetCommandBuffer,
	vkCmdBindPipeline: PFN_vkCmdBindPipeline,
	vkCmdSetViewport: PFN_vkCmdSetViewport,
	vkCmdSetScissor: PFN_vkCmdSetScissor,
	vkCmdSetLineWidth: PFN_vkCmdSetLineWidth,
	vkCmdSetDepthBias: PFN_vkCmdSetDepthBias,
	vkCmdSetBlendConstants: PFN_vkCmdSetBlendConstants,
	vkCmdSetDepthBounds: PFN_vkCmdSetDepthBounds,
	vkCmdSetStencilCompareMask: PFN_vkCmdSetStencilCompareMask,
	vkCmdSetStencilWriteMask: PFN_vkCmdSetStencilWriteMask,
	vkCmdSetStencilReference: PFN_vkCmdSetStencilReference,
	vkCmdBindDescriptorSets: PFN_vkCmdBindDescriptorSets,
	vkCmdBindIndexBuffer: PFN_vkCmdBindIndexBuffer,
	vkCmdBindVertexBuffers: PFN_vkCmdBindVertexBuffers,
	vkCmdDraw: PFN_vkCmdDraw,
	vkCmdDrawIndexed: PFN_vkCmdDrawIndexed,
	vkCmdDrawMultiEXT: PFN_vkCmdDrawMultiEXT,
	vkCmdDrawMultiIndexedEXT: PFN_vkCmdDrawMultiIndexedEXT,
	vkCmdDrawIndirect: PFN_vkCmdDrawIndirect,
	vkCmdDrawIndexedIndirect: PFN_vkCmdDrawIndexedIndirect,
	vkCmdDispatch: PFN_vkCmdDispatch,
	vkCmdDispatchIndirect: PFN_vkCmdDispatchIndirect,
	vkCmdSubpassShadingHUAWEI: PFN_vkCmdSubpassShadingHUAWEI,
	vkCmdCopyBuffer: PFN_vkCmdCopyBuffer,
	vkCmdCopyImage: PFN_vkCmdCopyImage,
	vkCmdBlitImage: PFN_vkCmdBlitImage,
	vkCmdCopyBufferToImage: PFN_vkCmdCopyBufferToImage,
	vkCmdCopyImageToBuffer: PFN_vkCmdCopyImageToBuffer,
	vkCmdCopyMemoryIndirectNV: PFN_vkCmdCopyMemoryIndirectNV,
	vkCmdCopyMemoryToImageIndirectNV: PFN_vkCmdCopyMemoryToImageIndirectNV,
	vkCmdUpdateBuffer: PFN_vkCmdUpdateBuffer,
	vkCmdFillBuffer: PFN_vkCmdFillBuffer,
	vkCmdClearColorImage: PFN_vkCmdClearColorImage,
	vkCmdClearDepthStencilImage: PFN_vkCmdClearDepthStencilImage,
	vkCmdClearAttachments: PFN_vkCmdClearAttachments,
	vkCmdResolveImage: PFN_vkCmdResolveImage,
	vkCmdSetEvent: PFN_vkCmdSetEvent,
	vkCmdResetEvent: PFN_vkCmdResetEvent,
	vkCmdWaitEvents: PFN_vkCmdWaitEvents,
	vkCmdPipelineBarrier: PFN_vkCmdPipelineBarrier,
	vkCmdBeginQuery: PFN_vkCmdBeginQuery,
	vkCmdEndQuery: PFN_vkCmdEndQuery,
	vkCmdBeginConditionalRenderingEXT: PFN_vkCmdBeginConditionalRenderingEXT,
	vkCmdEndConditionalRenderingEXT: PFN_vkCmdEndConditionalRenderingEXT,
	vkCmdResetQueryPool: PFN_vkCmdResetQueryPool,
	vkCmdWriteTimestamp: PFN_vkCmdWriteTimestamp,
	vkCmdCopyQueryPoolResults: PFN_vkCmdCopyQueryPoolResults,
	vkCmdPushConstants: PFN_vkCmdPushConstants,
	vkCmdBeginRenderPass: PFN_vkCmdBeginRenderPass,
	vkCmdNextSubpass: PFN_vkCmdNextSubpass,
	vkCmdEndRenderPass: PFN_vkCmdEndRenderPass,
	vkCmdExecuteCommands: PFN_vkCmdExecuteCommands,
	vkCreateAndroidSurfaceKHR: PFN_vkCreateAndroidSurfaceKHR,
	vkGetPhysicalDeviceDisplayPropertiesKHR: PFN_vkGetPhysicalDeviceDisplayPropertiesKHR,
	vkGetPhysicalDeviceDisplayPlanePropertiesKHR: PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR,
	vkGetDisplayPlaneSupportedDisplaysKHR: PFN_vkGetDisplayPlaneSupportedDisplaysKHR,
	vkGetDisplayModePropertiesKHR: PFN_vkGetDisplayModePropertiesKHR,
	vkCreateDisplayModeKHR: PFN_vkCreateDisplayModeKHR,
	vkGetDisplayPlaneCapabilitiesKHR: PFN_vkGetDisplayPlaneCapabilitiesKHR,
	vkCreateDisplayPlaneSurfaceKHR: PFN_vkCreateDisplayPlaneSurfaceKHR,
	vkCreateSharedSwapchainsKHR: PFN_vkCreateSharedSwapchainsKHR,
	vkDestroySurfaceKHR: PFN_vkDestroySurfaceKHR,
	vkGetPhysicalDeviceSurfaceSupportKHR: PFN_vkGetPhysicalDeviceSurfaceSupportKHR,
	vkGetPhysicalDeviceSurfaceCapabilitiesKHR: PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR,
	vkGetPhysicalDeviceSurfaceFormatsKHR: PFN_vkGetPhysicalDeviceSurfaceFormatsKHR,
	vkGetPhysicalDeviceSurfacePresentModesKHR: PFN_vkGetPhysicalDeviceSurfacePresentModesKHR,
	vkCreateSwapchainKHR: PFN_vkCreateSwapchainKHR,
	vkDestroySwapchainKHR: PFN_vkDestroySwapchainKHR,
	vkGetSwapchainImagesKHR: PFN_vkGetSwapchainImagesKHR,
	vkAcquireNextImageKHR: PFN_vkAcquireNextImageKHR,
	vkQueuePresentKHR: PFN_vkQueuePresentKHR,
	vkCreateViSurfaceNN: PFN_vkCreateViSurfaceNN,
	vkCreateWaylandSurfaceKHR: PFN_vkCreateWaylandSurfaceKHR,
	vkGetPhysicalDeviceWaylandPresentationSupportKHR: PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR,
	vkCreateWin32SurfaceKHR: PFN_vkCreateWin32SurfaceKHR,
	vkGetPhysicalDeviceWin32PresentationSupportKHR: PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR,
	vkCreateXlibSurfaceKHR: PFN_vkCreateXlibSurfaceKHR,
	vkGetPhysicalDeviceXlibPresentationSupportKHR: PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR,
	vkCreateXcbSurfaceKHR: PFN_vkCreateXcbSurfaceKHR,
	vkGetPhysicalDeviceXcbPresentationSupportKHR: PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR,
	vkCreateDirectFBSurfaceEXT: PFN_vkCreateDirectFBSurfaceEXT,
	vkGetPhysicalDeviceDirectFBPresentationSupportEXT: PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT,
	vkCreateImagePipeSurfaceFUCHSIA: PFN_vkCreateImagePipeSurfaceFUCHSIA,
	vkCreateStreamDescriptorSurfaceGGP: PFN_vkCreateStreamDescriptorSurfaceGGP,
	vkCreateScreenSurfaceQNX: PFN_vkCreateScreenSurfaceQNX,
	vkGetPhysicalDeviceScreenPresentationSupportQNX: PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX,
	vkCreateDebugReportCallbackEXT: PFN_vkCreateDebugReportCallbackEXT,
	vkDestroyDebugReportCallbackEXT: PFN_vkDestroyDebugReportCallbackEXT,
	vkDebugReportMessageEXT: PFN_vkDebugReportMessageEXT,
	vkDebugMarkerSetObjectNameEXT: PFN_vkDebugMarkerSetObjectNameEXT,
	vkDebugMarkerSetObjectTagEXT: PFN_vkDebugMarkerSetObjectTagEXT,
	vkCmdDebugMarkerBeginEXT: PFN_vkCmdDebugMarkerBeginEXT,
	vkCmdDebugMarkerEndEXT: PFN_vkCmdDebugMarkerEndEXT,
	vkCmdDebugMarkerInsertEXT: PFN_vkCmdDebugMarkerInsertEXT,
	vkGetPhysicalDeviceExternalImageFormatPropertiesNV: PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV,
	vkGetMemoryWin32HandleNV: PFN_vkGetMemoryWin32HandleNV,
	vkCmdExecuteGeneratedCommandsNV: PFN_vkCmdExecuteGeneratedCommandsNV,
	vkCmdPreprocessGeneratedCommandsNV: PFN_vkCmdPreprocessGeneratedCommandsNV,
	vkCmdBindPipelineShaderGroupNV: PFN_vkCmdBindPipelineShaderGroupNV,
	vkGetGeneratedCommandsMemoryRequirementsNV: PFN_vkGetGeneratedCommandsMemoryRequirementsNV,
	vkCreateIndirectCommandsLayoutNV: PFN_vkCreateIndirectCommandsLayoutNV,
	vkDestroyIndirectCommandsLayoutNV: PFN_vkDestroyIndirectCommandsLayoutNV,
	vkGetPhysicalDeviceFeatures2: PFN_vkGetPhysicalDeviceFeatures2,
	vkGetPhysicalDeviceProperties2: PFN_vkGetPhysicalDeviceProperties2,
	vkGetPhysicalDeviceFormatProperties2: PFN_vkGetPhysicalDeviceFormatProperties2,
	vkGetPhysicalDeviceImageFormatProperties2: PFN_vkGetPhysicalDeviceImageFormatProperties2,
	vkGetPhysicalDeviceQueueFamilyProperties2: PFN_vkGetPhysicalDeviceQueueFamilyProperties2,
	vkGetPhysicalDeviceMemoryProperties2: PFN_vkGetPhysicalDeviceMemoryProperties2,
	vkGetPhysicalDeviceSparseImageFormatProperties2: PFN_vkGetPhysicalDeviceSparseImageFormatProperties2,
	vkCmdPushDescriptorSetKHR: PFN_vkCmdPushDescriptorSetKHR,
	vkTrimCommandPool: PFN_vkTrimCommandPool,
	vkGetPhysicalDeviceExternalBufferProperties: PFN_vkGetPhysicalDeviceExternalBufferProperties,
	vkGetMemoryWin32HandleKHR: PFN_vkGetMemoryWin32HandleKHR,
	vkGetMemoryWin32HandlePropertiesKHR: PFN_vkGetMemoryWin32HandlePropertiesKHR,
	vkGetMemoryFdKHR: PFN_vkGetMemoryFdKHR,
	vkGetMemoryFdPropertiesKHR: PFN_vkGetMemoryFdPropertiesKHR,
	vkGetMemoryZirconHandleFUCHSIA: PFN_vkGetMemoryZirconHandleFUCHSIA,
	vkGetMemoryZirconHandlePropertiesFUCHSIA: PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA,
	vkGetMemoryRemoteAddressNV: PFN_vkGetMemoryRemoteAddressNV,
	vkGetPhysicalDeviceExternalSemaphoreProperties: PFN_vkGetPhysicalDeviceExternalSemaphoreProperties,
	vkGetSemaphoreWin32HandleKHR: PFN_vkGetSemaphoreWin32HandleKHR,
	vkImportSemaphoreWin32HandleKHR: PFN_vkImportSemaphoreWin32HandleKHR,
	vkGetSemaphoreFdKHR: PFN_vkGetSemaphoreFdKHR,
	vkImportSemaphoreFdKHR: PFN_vkImportSemaphoreFdKHR,
	vkGetSemaphoreZirconHandleFUCHSIA: PFN_vkGetSemaphoreZirconHandleFUCHSIA,
	vkImportSemaphoreZirconHandleFUCHSIA: PFN_vkImportSemaphoreZirconHandleFUCHSIA,
	vkGetPhysicalDeviceExternalFenceProperties: PFN_vkGetPhysicalDeviceExternalFenceProperties,
	vkGetFenceWin32HandleKHR: PFN_vkGetFenceWin32HandleKHR,
	vkImportFenceWin32HandleKHR: PFN_vkImportFenceWin32HandleKHR,
	vkGetFenceFdKHR: PFN_vkGetFenceFdKHR,
	vkImportFenceFdKHR: PFN_vkImportFenceFdKHR,
	vkReleaseDisplayEXT: PFN_vkReleaseDisplayEXT,
	vkAcquireXlibDisplayEXT: PFN_vkAcquireXlibDisplayEXT,
	vkGetRandROutputDisplayEXT: PFN_vkGetRandROutputDisplayEXT,
	vkAcquireWinrtDisplayNV: PFN_vkAcquireWinrtDisplayNV,
	vkGetWinrtDisplayNV: PFN_vkGetWinrtDisplayNV,
	vkDisplayPowerControlEXT: PFN_vkDisplayPowerControlEXT,
	vkRegisterDeviceEventEXT: PFN_vkRegisterDeviceEventEXT,
	vkRegisterDisplayEventEXT: PFN_vkRegisterDisplayEventEXT,
	vkGetSwapchainCounterEXT: PFN_vkGetSwapchainCounterEXT,
	vkGetPhysicalDeviceSurfaceCapabilities2EXT: PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT,
	vkEnumeratePhysicalDeviceGroups: PFN_vkEnumeratePhysicalDeviceGroups,
	vkGetDeviceGroupPeerMemoryFeatures: PFN_vkGetDeviceGroupPeerMemoryFeatures,
	vkBindBufferMemory2: PFN_vkBindBufferMemory2,
	vkBindImageMemory2: PFN_vkBindImageMemory2,
	vkCmdSetDeviceMask: PFN_vkCmdSetDeviceMask,
	vkGetDeviceGroupPresentCapabilitiesKHR: PFN_vkGetDeviceGroupPresentCapabilitiesKHR,
	vkGetDeviceGroupSurfacePresentModesKHR: PFN_vkGetDeviceGroupSurfacePresentModesKHR,
	vkAcquireNextImage2KHR: PFN_vkAcquireNextImage2KHR,
	vkCmdDispatchBase: PFN_vkCmdDispatchBase,
	vkGetPhysicalDevicePresentRectanglesKHR: PFN_vkGetPhysicalDevicePresentRectanglesKHR,
	vkCreateDescriptorUpdateTemplate: PFN_vkCreateDescriptorUpdateTemplate,
	vkDestroyDescriptorUpdateTemplate: PFN_vkDestroyDescriptorUpdateTemplate,
	vkUpdateDescriptorSetWithTemplate: PFN_vkUpdateDescriptorSetWithTemplate,
	vkCmdPushDescriptorSetWithTemplateKHR: PFN_vkCmdPushDescriptorSetWithTemplateKHR,
	vkSetHdrMetadataEXT: PFN_vkSetHdrMetadataEXT,
	vkGetSwapchainStatusKHR: PFN_vkGetSwapchainStatusKHR,
	vkGetRefreshCycleDurationGOOGLE: PFN_vkGetRefreshCycleDurationGOOGLE,
	vkGetPastPresentationTimingGOOGLE: PFN_vkGetPastPresentationTimingGOOGLE,
	vkCreateIOSSurfaceMVK: PFN_vkCreateIOSSurfaceMVK,
	vkCreateMacOSSurfaceMVK: PFN_vkCreateMacOSSurfaceMVK,
	vkCreateMetalSurfaceEXT: PFN_vkCreateMetalSurfaceEXT,
	vkCmdSetViewportWScalingNV: PFN_vkCmdSetViewportWScalingNV,
	vkCmdSetDiscardRectangleEXT: PFN_vkCmdSetDiscardRectangleEXT,
	vkCmdSetSampleLocationsEXT: PFN_vkCmdSetSampleLocationsEXT,
	vkGetPhysicalDeviceMultisamplePropertiesEXT: PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT,
	vkGetPhysicalDeviceSurfaceCapabilities2KHR: PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR,
	vkGetPhysicalDeviceSurfaceFormats2KHR: PFN_vkGetPhysicalDeviceSurfaceFormats2KHR,
	vkGetPhysicalDeviceDisplayProperties2KHR: PFN_vkGetPhysicalDeviceDisplayProperties2KHR,
	vkGetPhysicalDeviceDisplayPlaneProperties2KHR: PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR,
	vkGetDisplayModeProperties2KHR: PFN_vkGetDisplayModeProperties2KHR,
	vkGetDisplayPlaneCapabilities2KHR: PFN_vkGetDisplayPlaneCapabilities2KHR,
	vkGetBufferMemoryRequirements2: PFN_vkGetBufferMemoryRequirements2,
	vkGetImageMemoryRequirements2: PFN_vkGetImageMemoryRequirements2,
	vkGetImageSparseMemoryRequirements2: PFN_vkGetImageSparseMemoryRequirements2,
	vkGetDeviceBufferMemoryRequirements: PFN_vkGetDeviceBufferMemoryRequirements,
	vkGetDeviceImageMemoryRequirements: PFN_vkGetDeviceImageMemoryRequirements,
	vkGetDeviceImageSparseMemoryRequirements: PFN_vkGetDeviceImageSparseMemoryRequirements,
	vkCreateSamplerYcbcrConversion: PFN_vkCreateSamplerYcbcrConversion,
	vkDestroySamplerYcbcrConversion: PFN_vkDestroySamplerYcbcrConversion,
	vkGetDeviceQueue2: PFN_vkGetDeviceQueue2,
	vkCreateValidationCacheEXT: PFN_vkCreateValidationCacheEXT,
	vkDestroyValidationCacheEXT: PFN_vkDestroyValidationCacheEXT,
	vkGetValidationCacheDataEXT: PFN_vkGetValidationCacheDataEXT,
	vkMergeValidationCachesEXT: PFN_vkMergeValidationCachesEXT,
	vkGetDescriptorSetLayoutSupport: PFN_vkGetDescriptorSetLayoutSupport,
	vkGetSwapchainGrallocUsageANDROID: PFN_vkGetSwapchainGrallocUsageANDROID,
	vkGetSwapchainGrallocUsage2ANDROID: PFN_vkGetSwapchainGrallocUsage2ANDROID,
	vkAcquireImageANDROID: PFN_vkAcquireImageANDROID,
	vkQueueSignalReleaseImageANDROID: PFN_vkQueueSignalReleaseImageANDROID,
	vkGetShaderInfoAMD: PFN_vkGetShaderInfoAMD,
	vkSetLocalDimmingAMD: PFN_vkSetLocalDimmingAMD,
	vkGetPhysicalDeviceCalibrateableTimeDomainsEXT: PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT,
	vkGetCalibratedTimestampsEXT: PFN_vkGetCalibratedTimestampsEXT,
	vkSetDebugUtilsObjectNameEXT: PFN_vkSetDebugUtilsObjectNameEXT,
	vkSetDebugUtilsObjectTagEXT: PFN_vkSetDebugUtilsObjectTagEXT,
	vkQueueBeginDebugUtilsLabelEXT: PFN_vkQueueBeginDebugUtilsLabelEXT,
	vkQueueEndDebugUtilsLabelEXT: PFN_vkQueueEndDebugUtilsLabelEXT,
	vkQueueInsertDebugUtilsLabelEXT: PFN_vkQueueInsertDebugUtilsLabelEXT,
	vkCmdBeginDebugUtilsLabelEXT: PFN_vkCmdBeginDebugUtilsLabelEXT,
	vkCmdEndDebugUtilsLabelEXT: PFN_vkCmdEndDebugUtilsLabelEXT,
	vkCmdInsertDebugUtilsLabelEXT: PFN_vkCmdInsertDebugUtilsLabelEXT,
	vkCreateDebugUtilsMessengerEXT: PFN_vkCreateDebugUtilsMessengerEXT,
	vkDestroyDebugUtilsMessengerEXT: PFN_vkDestroyDebugUtilsMessengerEXT,
	vkSubmitDebugUtilsMessageEXT: PFN_vkSubmitDebugUtilsMessageEXT,
	vkGetMemoryHostPointerPropertiesEXT: PFN_vkGetMemoryHostPointerPropertiesEXT,
	vkCmdWriteBufferMarkerAMD: PFN_vkCmdWriteBufferMarkerAMD,
	vkCreateRenderPass2: PFN_vkCreateRenderPass2,
	vkCmdBeginRenderPass2: PFN_vkCmdBeginRenderPass2,
	vkCmdNextSubpass2: PFN_vkCmdNextSubpass2,
	vkCmdEndRenderPass2: PFN_vkCmdEndRenderPass2,
	vkGetSemaphoreCounterValue: PFN_vkGetSemaphoreCounterValue,
	vkWaitSemaphores: PFN_vkWaitSemaphores,
	vkSignalSemaphore: PFN_vkSignalSemaphore,
	vkGetAndroidHardwareBufferPropertiesANDROID: PFN_vkGetAndroidHardwareBufferPropertiesANDROID,
	vkGetMemoryAndroidHardwareBufferANDROID: PFN_vkGetMemoryAndroidHardwareBufferANDROID,
	vkCmdDrawIndirectCount: PFN_vkCmdDrawIndirectCount,
	vkCmdDrawIndexedIndirectCount: PFN_vkCmdDrawIndexedIndirectCount,
	vkCmdSetCheckpointNV: PFN_vkCmdSetCheckpointNV,
	vkGetQueueCheckpointDataNV: PFN_vkGetQueueCheckpointDataNV,
	vkCmdBindTransformFeedbackBuffersEXT: PFN_vkCmdBindTransformFeedbackBuffersEXT,
	vkCmdBeginTransformFeedbackEXT: PFN_vkCmdBeginTransformFeedbackEXT,
	vkCmdEndTransformFeedbackEXT: PFN_vkCmdEndTransformFeedbackEXT,
	vkCmdBeginQueryIndexedEXT: PFN_vkCmdBeginQueryIndexedEXT,
	vkCmdEndQueryIndexedEXT: PFN_vkCmdEndQueryIndexedEXT,
	vkCmdDrawIndirectByteCountEXT: PFN_vkCmdDrawIndirectByteCountEXT,
	vkCmdSetExclusiveScissorNV: PFN_vkCmdSetExclusiveScissorNV,
	vkCmdBindShadingRateImageNV: PFN_vkCmdBindShadingRateImageNV,
	vkCmdSetViewportShadingRatePaletteNV: PFN_vkCmdSetViewportShadingRatePaletteNV,
	vkCmdSetCoarseSampleOrderNV: PFN_vkCmdSetCoarseSampleOrderNV,
	vkCmdDrawMeshTasksNV: PFN_vkCmdDrawMeshTasksNV,
	vkCmdDrawMeshTasksIndirectNV: PFN_vkCmdDrawMeshTasksIndirectNV,
	vkCmdDrawMeshTasksIndirectCountNV: PFN_vkCmdDrawMeshTasksIndirectCountNV,
	vkCmdDrawMeshTasksEXT: PFN_vkCmdDrawMeshTasksEXT,
	vkCmdDrawMeshTasksIndirectEXT: PFN_vkCmdDrawMeshTasksIndirectEXT,
	vkCmdDrawMeshTasksIndirectCountEXT: PFN_vkCmdDrawMeshTasksIndirectCountEXT,
	vkCompileDeferredNV: PFN_vkCompileDeferredNV,
	vkCreateAccelerationStructureNV: PFN_vkCreateAccelerationStructureNV,
	vkCmdBindInvocationMaskHUAWEI: PFN_vkCmdBindInvocationMaskHUAWEI,
	vkDestroyAccelerationStructureKHR: PFN_vkDestroyAccelerationStructureKHR,
	vkDestroyAccelerationStructureNV: PFN_vkDestroyAccelerationStructureNV,
	vkGetAccelerationStructureMemoryRequirementsNV: PFN_vkGetAccelerationStructureMemoryRequirementsNV,
	vkBindAccelerationStructureMemoryNV: PFN_vkBindAccelerationStructureMemoryNV,
	vkCmdCopyAccelerationStructureNV: PFN_vkCmdCopyAccelerationStructureNV,
	vkCmdCopyAccelerationStructureKHR: PFN_vkCmdCopyAccelerationStructureKHR,
	vkCopyAccelerationStructureKHR: PFN_vkCopyAccelerationStructureKHR,
	vkCmdCopyAccelerationStructureToMemoryKHR: PFN_vkCmdCopyAccelerationStructureToMemoryKHR,
	vkCopyAccelerationStructureToMemoryKHR: PFN_vkCopyAccelerationStructureToMemoryKHR,
	vkCmdCopyMemoryToAccelerationStructureKHR: PFN_vkCmdCopyMemoryToAccelerationStructureKHR,
	vkCopyMemoryToAccelerationStructureKHR: PFN_vkCopyMemoryToAccelerationStructureKHR,
	vkCmdWriteAccelerationStructuresPropertiesKHR: PFN_vkCmdWriteAccelerationStructuresPropertiesKHR,
	vkCmdWriteAccelerationStructuresPropertiesNV: PFN_vkCmdWriteAccelerationStructuresPropertiesNV,
	vkCmdBuildAccelerationStructureNV: PFN_vkCmdBuildAccelerationStructureNV,
	vkWriteAccelerationStructuresPropertiesKHR: PFN_vkWriteAccelerationStructuresPropertiesKHR,
	vkCmdTraceRaysKHR: PFN_vkCmdTraceRaysKHR,
	vkCmdTraceRaysNV: PFN_vkCmdTraceRaysNV,
	vkGetRayTracingShaderGroupHandlesKHR: PFN_vkGetRayTracingShaderGroupHandlesKHR,
	vkGetRayTracingCaptureReplayShaderGroupHandlesKHR: PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR,
	vkGetAccelerationStructureHandleNV: PFN_vkGetAccelerationStructureHandleNV,
	vkCreateRayTracingPipelinesNV: PFN_vkCreateRayTracingPipelinesNV,
	vkCreateRayTracingPipelinesKHR: PFN_vkCreateRayTracingPipelinesKHR,
	vkGetPhysicalDeviceCooperativeMatrixPropertiesNV: PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV,
	vkCmdTraceRaysIndirectKHR: PFN_vkCmdTraceRaysIndirectKHR,
	vkCmdTraceRaysIndirect2KHR: PFN_vkCmdTraceRaysIndirect2KHR,
	vkGetDeviceAccelerationStructureCompatibilityKHR: PFN_vkGetDeviceAccelerationStructureCompatibilityKHR,
	vkGetRayTracingShaderGroupStackSizeKHR: PFN_vkGetRayTracingShaderGroupStackSizeKHR,
	vkCmdSetRayTracingPipelineStackSizeKHR: PFN_vkCmdSetRayTracingPipelineStackSizeKHR,
	vkGetImageViewHandleNVX: PFN_vkGetImageViewHandleNVX,
	vkGetImageViewAddressNVX: PFN_vkGetImageViewAddressNVX,
	vkGetPhysicalDeviceSurfacePresentModes2EXT: PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT,
	vkGetDeviceGroupSurfacePresentModes2EXT: PFN_vkGetDeviceGroupSurfacePresentModes2EXT,
	vkAcquireFullScreenExclusiveModeEXT: PFN_vkAcquireFullScreenExclusiveModeEXT,
	vkReleaseFullScreenExclusiveModeEXT: PFN_vkReleaseFullScreenExclusiveModeEXT,
	vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR: PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR,
	vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR: PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR,
	vkAcquireProfilingLockKHR: PFN_vkAcquireProfilingLockKHR,
	vkReleaseProfilingLockKHR: PFN_vkReleaseProfilingLockKHR,
	vkGetImageDrmFormatModifierPropertiesEXT: PFN_vkGetImageDrmFormatModifierPropertiesEXT,
	vkGetBufferOpaqueCaptureAddress: PFN_vkGetBufferOpaqueCaptureAddress,
	vkGetBufferDeviceAddress: PFN_vkGetBufferDeviceAddress,
	vkCreateHeadlessSurfaceEXT: PFN_vkCreateHeadlessSurfaceEXT,
	vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV: PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV,
	vkInitializePerformanceApiINTEL: PFN_vkInitializePerformanceApiINTEL,
	vkUninitializePerformanceApiINTEL: PFN_vkUninitializePerformanceApiINTEL,
	vkCmdSetPerformanceMarkerINTEL: PFN_vkCmdSetPerformanceMarkerINTEL,
	vkCmdSetPerformanceStreamMarkerINTEL: PFN_vkCmdSetPerformanceStreamMarkerINTEL,
	vkCmdSetPerformanceOverrideINTEL: PFN_vkCmdSetPerformanceOverrideINTEL,
	vkAcquirePerformanceConfigurationINTEL: PFN_vkAcquirePerformanceConfigurationINTEL,
	vkReleasePerformanceConfigurationINTEL: PFN_vkReleasePerformanceConfigurationINTEL,
	vkQueueSetPerformanceConfigurationINTEL: PFN_vkQueueSetPerformanceConfigurationINTEL,
	vkGetPerformanceParameterINTEL: PFN_vkGetPerformanceParameterINTEL,
	vkGetDeviceMemoryOpaqueCaptureAddress: PFN_vkGetDeviceMemoryOpaqueCaptureAddress,
	vkGetPipelineExecutablePropertiesKHR: PFN_vkGetPipelineExecutablePropertiesKHR,
	vkGetPipelineExecutableStatisticsKHR: PFN_vkGetPipelineExecutableStatisticsKHR,
	vkGetPipelineExecutableInternalRepresentationsKHR: PFN_vkGetPipelineExecutableInternalRepresentationsKHR,
	vkCmdSetLineStippleEXT: PFN_vkCmdSetLineStippleEXT,
	vkGetPhysicalDeviceToolProperties: PFN_vkGetPhysicalDeviceToolProperties,
	vkCreateAccelerationStructureKHR: PFN_vkCreateAccelerationStructureKHR,
	vkCmdBuildAccelerationStructuresKHR: PFN_vkCmdBuildAccelerationStructuresKHR,
	vkCmdBuildAccelerationStructuresIndirectKHR: PFN_vkCmdBuildAccelerationStructuresIndirectKHR,
	vkBuildAccelerationStructuresKHR: PFN_vkBuildAccelerationStructuresKHR,
	vkGetAccelerationStructureDeviceAddressKHR: PFN_vkGetAccelerationStructureDeviceAddressKHR,
	vkCreateDeferredOperationKHR: PFN_vkCreateDeferredOperationKHR,
	vkDestroyDeferredOperationKHR: PFN_vkDestroyDeferredOperationKHR,
	vkGetDeferredOperationMaxConcurrencyKHR: PFN_vkGetDeferredOperationMaxConcurrencyKHR,
	vkGetDeferredOperationResultKHR: PFN_vkGetDeferredOperationResultKHR,
	vkDeferredOperationJoinKHR: PFN_vkDeferredOperationJoinKHR,
	vkCmdSetCullMode: PFN_vkCmdSetCullMode,
	vkCmdSetFrontFace: PFN_vkCmdSetFrontFace,
	vkCmdSetPrimitiveTopology: PFN_vkCmdSetPrimitiveTopology,
	vkCmdSetViewportWithCount: PFN_vkCmdSetViewportWithCount,
	vkCmdSetScissorWithCount: PFN_vkCmdSetScissorWithCount,
	vkCmdBindVertexBuffers2: PFN_vkCmdBindVertexBuffers2,
	vkCmdSetDepthTestEnable: PFN_vkCmdSetDepthTestEnable,
	vkCmdSetDepthWriteEnable: PFN_vkCmdSetDepthWriteEnable,
	vkCmdSetDepthCompareOp: PFN_vkCmdSetDepthCompareOp,
	vkCmdSetDepthBoundsTestEnable: PFN_vkCmdSetDepthBoundsTestEnable,
	vkCmdSetStencilTestEnable: PFN_vkCmdSetStencilTestEnable,
	vkCmdSetStencilOp: PFN_vkCmdSetStencilOp,
	vkCmdSetPatchControlPointsEXT: PFN_vkCmdSetPatchControlPointsEXT,
	vkCmdSetRasterizerDiscardEnable: PFN_vkCmdSetRasterizerDiscardEnable,
	vkCmdSetDepthBiasEnable: PFN_vkCmdSetDepthBiasEnable,
	vkCmdSetLogicOpEXT: PFN_vkCmdSetLogicOpEXT,
	vkCmdSetPrimitiveRestartEnable: PFN_vkCmdSetPrimitiveRestartEnable,
	vkCmdSetTessellationDomainOriginEXT: PFN_vkCmdSetTessellationDomainOriginEXT,
	vkCmdSetDepthClampEnableEXT: PFN_vkCmdSetDepthClampEnableEXT,
	vkCmdSetPolygonModeEXT: PFN_vkCmdSetPolygonModeEXT,
	vkCmdSetRasterizationSamplesEXT: PFN_vkCmdSetRasterizationSamplesEXT,
	vkCmdSetSampleMaskEXT: PFN_vkCmdSetSampleMaskEXT,
	vkCmdSetAlphaToCoverageEnableEXT: PFN_vkCmdSetAlphaToCoverageEnableEXT,
	vkCmdSetAlphaToOneEnableEXT: PFN_vkCmdSetAlphaToOneEnableEXT,
	vkCmdSetLogicOpEnableEXT: PFN_vkCmdSetLogicOpEnableEXT,
	vkCmdSetColorBlendEnableEXT: PFN_vkCmdSetColorBlendEnableEXT,
	vkCmdSetColorBlendEquationEXT: PFN_vkCmdSetColorBlendEquationEXT,
	vkCmdSetColorWriteMaskEXT: PFN_vkCmdSetColorWriteMaskEXT,
	vkCmdSetRasterizationStreamEXT: PFN_vkCmdSetRasterizationStreamEXT,
	vkCmdSetConservativeRasterizationModeEXT: PFN_vkCmdSetConservativeRasterizationModeEXT,
	vkCmdSetExtraPrimitiveOverestimationSizeEXT: PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT,
	vkCmdSetDepthClipEnableEXT: PFN_vkCmdSetDepthClipEnableEXT,
	vkCmdSetSampleLocationsEnableEXT: PFN_vkCmdSetSampleLocationsEnableEXT,
	vkCmdSetColorBlendAdvancedEXT: PFN_vkCmdSetColorBlendAdvancedEXT,
	vkCmdSetProvokingVertexModeEXT: PFN_vkCmdSetProvokingVertexModeEXT,
	vkCmdSetLineRasterizationModeEXT: PFN_vkCmdSetLineRasterizationModeEXT,
	vkCmdSetLineStippleEnableEXT: PFN_vkCmdSetLineStippleEnableEXT,
	vkCmdSetDepthClipNegativeOneToOneEXT: PFN_vkCmdSetDepthClipNegativeOneToOneEXT,
	vkCmdSetViewportWScalingEnableNV: PFN_vkCmdSetViewportWScalingEnableNV,
	vkCmdSetViewportSwizzleNV: PFN_vkCmdSetViewportSwizzleNV,
	vkCmdSetCoverageToColorEnableNV: PFN_vkCmdSetCoverageToColorEnableNV,
	vkCmdSetCoverageToColorLocationNV: PFN_vkCmdSetCoverageToColorLocationNV,
	vkCmdSetCoverageModulationModeNV: PFN_vkCmdSetCoverageModulationModeNV,
	vkCmdSetCoverageModulationTableEnableNV: PFN_vkCmdSetCoverageModulationTableEnableNV,
	vkCmdSetCoverageModulationTableNV: PFN_vkCmdSetCoverageModulationTableNV,
	vkCmdSetShadingRateImageEnableNV: PFN_vkCmdSetShadingRateImageEnableNV,
	vkCmdSetCoverageReductionModeNV: PFN_vkCmdSetCoverageReductionModeNV,
	vkCmdSetRepresentativeFragmentTestEnableNV: PFN_vkCmdSetRepresentativeFragmentTestEnableNV,
	vkCreatePrivateDataSlot: PFN_vkCreatePrivateDataSlot,
	vkDestroyPrivateDataSlot: PFN_vkDestroyPrivateDataSlot,
	vkSetPrivateData: PFN_vkSetPrivateData,
	vkGetPrivateData: PFN_vkGetPrivateData,
	vkCmdCopyBuffer2: PFN_vkCmdCopyBuffer2,
	vkCmdCopyImage2: PFN_vkCmdCopyImage2,
	vkCmdBlitImage2: PFN_vkCmdBlitImage2,
	vkCmdCopyBufferToImage2: PFN_vkCmdCopyBufferToImage2,
	vkCmdCopyImageToBuffer2: PFN_vkCmdCopyImageToBuffer2,
	vkCmdResolveImage2: PFN_vkCmdResolveImage2,
	vkCmdSetFragmentShadingRateKHR: PFN_vkCmdSetFragmentShadingRateKHR,
	vkGetPhysicalDeviceFragmentShadingRatesKHR: PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR,
	vkCmdSetFragmentShadingRateEnumNV: PFN_vkCmdSetFragmentShadingRateEnumNV,
	vkGetAccelerationStructureBuildSizesKHR: PFN_vkGetAccelerationStructureBuildSizesKHR,
	vkCmdSetVertexInputEXT: PFN_vkCmdSetVertexInputEXT,
	vkCmdSetColorWriteEnableEXT: PFN_vkCmdSetColorWriteEnableEXT,
	vkCmdSetEvent2: PFN_vkCmdSetEvent2,
	vkCmdResetEvent2: PFN_vkCmdResetEvent2,
	vkCmdWaitEvents2: PFN_vkCmdWaitEvents2,
	vkCmdPipelineBarrier2: PFN_vkCmdPipelineBarrier2,
	vkQueueSubmit2: PFN_vkQueueSubmit2,
	vkCmdWriteTimestamp2: PFN_vkCmdWriteTimestamp2,
	vkCmdWriteBufferMarker2AMD: PFN_vkCmdWriteBufferMarker2AMD,
	vkGetQueueCheckpointData2NV: PFN_vkGetQueueCheckpointData2NV,
	vkGetPhysicalDeviceVideoCapabilitiesKHR: PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR,
	vkGetPhysicalDeviceVideoFormatPropertiesKHR: PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR,
	vkCreateVideoSessionKHR: PFN_vkCreateVideoSessionKHR,
	vkDestroyVideoSessionKHR: PFN_vkDestroyVideoSessionKHR,
	vkCreateVideoSessionParametersKHR: PFN_vkCreateVideoSessionParametersKHR,
	vkUpdateVideoSessionParametersKHR: PFN_vkUpdateVideoSessionParametersKHR,
	vkDestroyVideoSessionParametersKHR: PFN_vkDestroyVideoSessionParametersKHR,
	vkGetVideoSessionMemoryRequirementsKHR: PFN_vkGetVideoSessionMemoryRequirementsKHR,
	vkBindVideoSessionMemoryKHR: PFN_vkBindVideoSessionMemoryKHR,
	vkCmdDecodeVideoKHR: PFN_vkCmdDecodeVideoKHR,
	vkCmdBeginVideoCodingKHR: PFN_vkCmdBeginVideoCodingKHR,
	vkCmdControlVideoCodingKHR: PFN_vkCmdControlVideoCodingKHR,
	vkCmdEndVideoCodingKHR: PFN_vkCmdEndVideoCodingKHR,
	vkCmdEncodeVideoKHR: PFN_vkCmdEncodeVideoKHR,
	vkCmdDecompressMemoryNV: PFN_vkCmdDecompressMemoryNV,
	vkCmdDecompressMemoryIndirectCountNV: PFN_vkCmdDecompressMemoryIndirectCountNV,
	vkCreateCuModuleNVX: PFN_vkCreateCuModuleNVX,
	vkCreateCuFunctionNVX: PFN_vkCreateCuFunctionNVX,
	vkDestroyCuModuleNVX: PFN_vkDestroyCuModuleNVX,
	vkDestroyCuFunctionNVX: PFN_vkDestroyCuFunctionNVX,
	vkCmdCuLaunchKernelNVX: PFN_vkCmdCuLaunchKernelNVX,
	vkSetDeviceMemoryPriorityEXT: PFN_vkSetDeviceMemoryPriorityEXT,
	vkAcquireDrmDisplayEXT: PFN_vkAcquireDrmDisplayEXT,
	vkGetDrmDisplayEXT: PFN_vkGetDrmDisplayEXT,
	vkWaitForPresentKHR: PFN_vkWaitForPresentKHR,
	vkCreateBufferCollectionFUCHSIA: PFN_vkCreateBufferCollectionFUCHSIA,
	vkSetBufferCollectionBufferConstraintsFUCHSIA: PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA,
	vkSetBufferCollectionImageConstraintsFUCHSIA: PFN_vkSetBufferCollectionImageConstraintsFUCHSIA,
	vkDestroyBufferCollectionFUCHSIA: PFN_vkDestroyBufferCollectionFUCHSIA,
	vkGetBufferCollectionPropertiesFUCHSIA: PFN_vkGetBufferCollectionPropertiesFUCHSIA,
	vkCmdBeginRendering: PFN_vkCmdBeginRendering,
	vkCmdEndRendering: PFN_vkCmdEndRendering,
	vkGetDescriptorSetLayoutHostMappingInfoVALVE: PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE,
	vkGetDescriptorSetHostMappingVALVE: PFN_vkGetDescriptorSetHostMappingVALVE,
	vkCreateMicromapEXT: PFN_vkCreateMicromapEXT,
	vkCmdBuildMicromapsEXT: PFN_vkCmdBuildMicromapsEXT,
	vkBuildMicromapsEXT: PFN_vkBuildMicromapsEXT,
	vkDestroyMicromapEXT: PFN_vkDestroyMicromapEXT,
	vkCmdCopyMicromapEXT: PFN_vkCmdCopyMicromapEXT,
	vkCopyMicromapEXT: PFN_vkCopyMicromapEXT,
	vkCmdCopyMicromapToMemoryEXT: PFN_vkCmdCopyMicromapToMemoryEXT,
	vkCopyMicromapToMemoryEXT: PFN_vkCopyMicromapToMemoryEXT,
	vkCmdCopyMemoryToMicromapEXT: PFN_vkCmdCopyMemoryToMicromapEXT,
	vkCopyMemoryToMicromapEXT: PFN_vkCopyMemoryToMicromapEXT,
	vkCmdWriteMicromapsPropertiesEXT: PFN_vkCmdWriteMicromapsPropertiesEXT,
	vkWriteMicromapsPropertiesEXT: PFN_vkWriteMicromapsPropertiesEXT,
	vkGetDeviceMicromapCompatibilityEXT: PFN_vkGetDeviceMicromapCompatibilityEXT,
	vkGetMicromapBuildSizesEXT: PFN_vkGetMicromapBuildSizesEXT,
	vkGetShaderModuleIdentifierEXT: PFN_vkGetShaderModuleIdentifierEXT,
	vkGetShaderModuleCreateInfoIdentifierEXT: PFN_vkGetShaderModuleCreateInfoIdentifierEXT,
	vkGetImageSubresourceLayout2EXT: PFN_vkGetImageSubresourceLayout2EXT,
	vkGetPipelinePropertiesEXT: PFN_vkGetPipelinePropertiesEXT,
	vkExportMetalObjectsEXT: PFN_vkExportMetalObjectsEXT,
	vkGetFramebufferTilePropertiesQCOM: PFN_vkGetFramebufferTilePropertiesQCOM,
	vkGetDynamicRenderingTilePropertiesQCOM: PFN_vkGetDynamicRenderingTilePropertiesQCOM,
	vkGetPhysicalDeviceOpticalFlowImageFormatsNV: PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV,
	vkCreateOpticalFlowSessionNV: PFN_vkCreateOpticalFlowSessionNV,
	vkDestroyOpticalFlowSessionNV: PFN_vkDestroyOpticalFlowSessionNV,
	vkBindOpticalFlowSessionImageNV: PFN_vkBindOpticalFlowSessionImageNV,
	vkCmdOpticalFlowExecuteNV: PFN_vkCmdOpticalFlowExecuteNV
}

static mut VULKAN_COMMANDS: Option<VulkanCommands> = None;

pub fn vk_load_functions(load_func: fn(&str) -> *const c_void) -> bool
{
	let vkCreateInstance: PFN_vkCreateInstance = load_func("vkCreateInstance");
	let vkDestroyInstance: PFN_vkDestroyInstance = load_func("vkDestroyInstance");
	let vkEnumeratePhysicalDevices: PFN_vkEnumeratePhysicalDevices = load_func("vkEnumeratePhysicalDevices");
	let vkGetDeviceProcAddr: PFN_vkGetDeviceProcAddr = load_func("vkGetDeviceProcAddr");
	let vkGetInstanceProcAddr: PFN_vkGetInstanceProcAddr = load_func("vkGetInstanceProcAddr");
	let vkGetPhysicalDeviceProperties: PFN_vkGetPhysicalDeviceProperties = load_func("vkGetPhysicalDeviceProperties");
	let vkGetPhysicalDeviceQueueFamilyProperties: PFN_vkGetPhysicalDeviceQueueFamilyProperties = load_func("vkGetPhysicalDeviceQueueFamilyProperties");
	let vkGetPhysicalDeviceMemoryProperties: PFN_vkGetPhysicalDeviceMemoryProperties = load_func("vkGetPhysicalDeviceMemoryProperties");
	let vkGetPhysicalDeviceFeatures: PFN_vkGetPhysicalDeviceFeatures = load_func("vkGetPhysicalDeviceFeatures");
	let vkGetPhysicalDeviceFormatProperties: PFN_vkGetPhysicalDeviceFormatProperties = load_func("vkGetPhysicalDeviceFormatProperties");
	let vkGetPhysicalDeviceImageFormatProperties: PFN_vkGetPhysicalDeviceImageFormatProperties = load_func("vkGetPhysicalDeviceImageFormatProperties");
	let vkCreateDevice: PFN_vkCreateDevice = load_func("vkCreateDevice");
	let vkDestroyDevice: PFN_vkDestroyDevice = load_func("vkDestroyDevice");
	let vkEnumerateInstanceVersion: PFN_vkEnumerateInstanceVersion = load_func("vkEnumerateInstanceVersion");
	let vkEnumerateInstanceLayerProperties: PFN_vkEnumerateInstanceLayerProperties = load_func("vkEnumerateInstanceLayerProperties");
	let vkEnumerateInstanceExtensionProperties: PFN_vkEnumerateInstanceExtensionProperties = load_func("vkEnumerateInstanceExtensionProperties");
	let vkEnumerateDeviceLayerProperties: PFN_vkEnumerateDeviceLayerProperties = load_func("vkEnumerateDeviceLayerProperties");
	let vkEnumerateDeviceExtensionProperties: PFN_vkEnumerateDeviceExtensionProperties = load_func("vkEnumerateDeviceExtensionProperties");
	let vkGetDeviceQueue: PFN_vkGetDeviceQueue = load_func("vkGetDeviceQueue");
	let vkQueueSubmit: PFN_vkQueueSubmit = load_func("vkQueueSubmit");
	let vkQueueWaitIdle: PFN_vkQueueWaitIdle = load_func("vkQueueWaitIdle");
	let vkDeviceWaitIdle: PFN_vkDeviceWaitIdle = load_func("vkDeviceWaitIdle");
	let vkAllocateMemory: PFN_vkAllocateMemory = load_func("vkAllocateMemory");
	let vkFreeMemory: PFN_vkFreeMemory = load_func("vkFreeMemory");
	let vkMapMemory: PFN_vkMapMemory = load_func("vkMapMemory");
	let vkUnmapMemory: PFN_vkUnmapMemory = load_func("vkUnmapMemory");
	let vkFlushMappedMemoryRanges: PFN_vkFlushMappedMemoryRanges = load_func("vkFlushMappedMemoryRanges");
	let vkInvalidateMappedMemoryRanges: PFN_vkInvalidateMappedMemoryRanges = load_func("vkInvalidateMappedMemoryRanges");
	let vkGetDeviceMemoryCommitment: PFN_vkGetDeviceMemoryCommitment = load_func("vkGetDeviceMemoryCommitment");
	let vkGetBufferMemoryRequirements: PFN_vkGetBufferMemoryRequirements = load_func("vkGetBufferMemoryRequirements");
	let vkBindBufferMemory: PFN_vkBindBufferMemory = load_func("vkBindBufferMemory");
	let vkGetImageMemoryRequirements: PFN_vkGetImageMemoryRequirements = load_func("vkGetImageMemoryRequirements");
	let vkBindImageMemory: PFN_vkBindImageMemory = load_func("vkBindImageMemory");
	let vkGetImageSparseMemoryRequirements: PFN_vkGetImageSparseMemoryRequirements = load_func("vkGetImageSparseMemoryRequirements");
	let vkGetPhysicalDeviceSparseImageFormatProperties: PFN_vkGetPhysicalDeviceSparseImageFormatProperties = load_func("vkGetPhysicalDeviceSparseImageFormatProperties");
	let vkQueueBindSparse: PFN_vkQueueBindSparse = load_func("vkQueueBindSparse");
	let vkCreateFence: PFN_vkCreateFence = load_func("vkCreateFence");
	let vkDestroyFence: PFN_vkDestroyFence = load_func("vkDestroyFence");
	let vkResetFences: PFN_vkResetFences = load_func("vkResetFences");
	let vkGetFenceStatus: PFN_vkGetFenceStatus = load_func("vkGetFenceStatus");
	let vkWaitForFences: PFN_vkWaitForFences = load_func("vkWaitForFences");
	let vkCreateSemaphore: PFN_vkCreateSemaphore = load_func("vkCreateSemaphore");
	let vkDestroySemaphore: PFN_vkDestroySemaphore = load_func("vkDestroySemaphore");
	let vkCreateEvent: PFN_vkCreateEvent = load_func("vkCreateEvent");
	let vkDestroyEvent: PFN_vkDestroyEvent = load_func("vkDestroyEvent");
	let vkGetEventStatus: PFN_vkGetEventStatus = load_func("vkGetEventStatus");
	let vkSetEvent: PFN_vkSetEvent = load_func("vkSetEvent");
	let vkResetEvent: PFN_vkResetEvent = load_func("vkResetEvent");
	let vkCreateQueryPool: PFN_vkCreateQueryPool = load_func("vkCreateQueryPool");
	let vkDestroyQueryPool: PFN_vkDestroyQueryPool = load_func("vkDestroyQueryPool");
	let vkGetQueryPoolResults: PFN_vkGetQueryPoolResults = load_func("vkGetQueryPoolResults");
	let vkResetQueryPool: PFN_vkResetQueryPool = load_func("vkResetQueryPool");
	let vkCreateBuffer: PFN_vkCreateBuffer = load_func("vkCreateBuffer");
	let vkDestroyBuffer: PFN_vkDestroyBuffer = load_func("vkDestroyBuffer");
	let vkCreateBufferView: PFN_vkCreateBufferView = load_func("vkCreateBufferView");
	let vkDestroyBufferView: PFN_vkDestroyBufferView = load_func("vkDestroyBufferView");
	let vkCreateImage: PFN_vkCreateImage = load_func("vkCreateImage");
	let vkDestroyImage: PFN_vkDestroyImage = load_func("vkDestroyImage");
	let vkGetImageSubresourceLayout: PFN_vkGetImageSubresourceLayout = load_func("vkGetImageSubresourceLayout");
	let vkCreateImageView: PFN_vkCreateImageView = load_func("vkCreateImageView");
	let vkDestroyImageView: PFN_vkDestroyImageView = load_func("vkDestroyImageView");
	let vkCreateShaderModule: PFN_vkCreateShaderModule = load_func("vkCreateShaderModule");
	let vkDestroyShaderModule: PFN_vkDestroyShaderModule = load_func("vkDestroyShaderModule");
	let vkCreatePipelineCache: PFN_vkCreatePipelineCache = load_func("vkCreatePipelineCache");
	let vkDestroyPipelineCache: PFN_vkDestroyPipelineCache = load_func("vkDestroyPipelineCache");
	let vkGetPipelineCacheData: PFN_vkGetPipelineCacheData = load_func("vkGetPipelineCacheData");
	let vkMergePipelineCaches: PFN_vkMergePipelineCaches = load_func("vkMergePipelineCaches");
	let vkCreateGraphicsPipelines: PFN_vkCreateGraphicsPipelines = load_func("vkCreateGraphicsPipelines");
	let vkCreateComputePipelines: PFN_vkCreateComputePipelines = load_func("vkCreateComputePipelines");
	let vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI: PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = load_func("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
	let vkDestroyPipeline: PFN_vkDestroyPipeline = load_func("vkDestroyPipeline");
	let vkCreatePipelineLayout: PFN_vkCreatePipelineLayout = load_func("vkCreatePipelineLayout");
	let vkDestroyPipelineLayout: PFN_vkDestroyPipelineLayout = load_func("vkDestroyPipelineLayout");
	let vkCreateSampler: PFN_vkCreateSampler = load_func("vkCreateSampler");
	let vkDestroySampler: PFN_vkDestroySampler = load_func("vkDestroySampler");
	let vkCreateDescriptorSetLayout: PFN_vkCreateDescriptorSetLayout = load_func("vkCreateDescriptorSetLayout");
	let vkDestroyDescriptorSetLayout: PFN_vkDestroyDescriptorSetLayout = load_func("vkDestroyDescriptorSetLayout");
	let vkCreateDescriptorPool: PFN_vkCreateDescriptorPool = load_func("vkCreateDescriptorPool");
	let vkDestroyDescriptorPool: PFN_vkDestroyDescriptorPool = load_func("vkDestroyDescriptorPool");
	let vkResetDescriptorPool: PFN_vkResetDescriptorPool = load_func("vkResetDescriptorPool");
	let vkAllocateDescriptorSets: PFN_vkAllocateDescriptorSets = load_func("vkAllocateDescriptorSets");
	let vkFreeDescriptorSets: PFN_vkFreeDescriptorSets = load_func("vkFreeDescriptorSets");
	let vkUpdateDescriptorSets: PFN_vkUpdateDescriptorSets = load_func("vkUpdateDescriptorSets");
	let vkCreateFramebuffer: PFN_vkCreateFramebuffer = load_func("vkCreateFramebuffer");
	let vkDestroyFramebuffer: PFN_vkDestroyFramebuffer = load_func("vkDestroyFramebuffer");
	let vkCreateRenderPass: PFN_vkCreateRenderPass = load_func("vkCreateRenderPass");
	let vkDestroyRenderPass: PFN_vkDestroyRenderPass = load_func("vkDestroyRenderPass");
	let vkGetRenderAreaGranularity: PFN_vkGetRenderAreaGranularity = load_func("vkGetRenderAreaGranularity");
	let vkCreateCommandPool: PFN_vkCreateCommandPool = load_func("vkCreateCommandPool");
	let vkDestroyCommandPool: PFN_vkDestroyCommandPool = load_func("vkDestroyCommandPool");
	let vkResetCommandPool: PFN_vkResetCommandPool = load_func("vkResetCommandPool");
	let vkAllocateCommandBuffers: PFN_vkAllocateCommandBuffers = load_func("vkAllocateCommandBuffers");
	let vkFreeCommandBuffers: PFN_vkFreeCommandBuffers = load_func("vkFreeCommandBuffers");
	let vkBeginCommandBuffer: PFN_vkBeginCommandBuffer = load_func("vkBeginCommandBuffer");
	let vkEndCommandBuffer: PFN_vkEndCommandBuffer = load_func("vkEndCommandBuffer");
	let vkResetCommandBuffer: PFN_vkResetCommandBuffer = load_func("vkResetCommandBuffer");
	let vkCmdBindPipeline: PFN_vkCmdBindPipeline = load_func("vkCmdBindPipeline");
	let vkCmdSetViewport: PFN_vkCmdSetViewport = load_func("vkCmdSetViewport");
	let vkCmdSetScissor: PFN_vkCmdSetScissor = load_func("vkCmdSetScissor");
	let vkCmdSetLineWidth: PFN_vkCmdSetLineWidth = load_func("vkCmdSetLineWidth");
	let vkCmdSetDepthBias: PFN_vkCmdSetDepthBias = load_func("vkCmdSetDepthBias");
	let vkCmdSetBlendConstants: PFN_vkCmdSetBlendConstants = load_func("vkCmdSetBlendConstants");
	let vkCmdSetDepthBounds: PFN_vkCmdSetDepthBounds = load_func("vkCmdSetDepthBounds");
	let vkCmdSetStencilCompareMask: PFN_vkCmdSetStencilCompareMask = load_func("vkCmdSetStencilCompareMask");
	let vkCmdSetStencilWriteMask: PFN_vkCmdSetStencilWriteMask = load_func("vkCmdSetStencilWriteMask");
	let vkCmdSetStencilReference: PFN_vkCmdSetStencilReference = load_func("vkCmdSetStencilReference");
	let vkCmdBindDescriptorSets: PFN_vkCmdBindDescriptorSets = load_func("vkCmdBindDescriptorSets");
	let vkCmdBindIndexBuffer: PFN_vkCmdBindIndexBuffer = load_func("vkCmdBindIndexBuffer");
	let vkCmdBindVertexBuffers: PFN_vkCmdBindVertexBuffers = load_func("vkCmdBindVertexBuffers");
	let vkCmdDraw: PFN_vkCmdDraw = load_func("vkCmdDraw");
	let vkCmdDrawIndexed: PFN_vkCmdDrawIndexed = load_func("vkCmdDrawIndexed");
	let vkCmdDrawMultiEXT: PFN_vkCmdDrawMultiEXT = load_func("vkCmdDrawMultiEXT");
	let vkCmdDrawMultiIndexedEXT: PFN_vkCmdDrawMultiIndexedEXT = load_func("vkCmdDrawMultiIndexedEXT");
	let vkCmdDrawIndirect: PFN_vkCmdDrawIndirect = load_func("vkCmdDrawIndirect");
	let vkCmdDrawIndexedIndirect: PFN_vkCmdDrawIndexedIndirect = load_func("vkCmdDrawIndexedIndirect");
	let vkCmdDispatch: PFN_vkCmdDispatch = load_func("vkCmdDispatch");
	let vkCmdDispatchIndirect: PFN_vkCmdDispatchIndirect = load_func("vkCmdDispatchIndirect");
	let vkCmdSubpassShadingHUAWEI: PFN_vkCmdSubpassShadingHUAWEI = load_func("vkCmdSubpassShadingHUAWEI");
	let vkCmdCopyBuffer: PFN_vkCmdCopyBuffer = load_func("vkCmdCopyBuffer");
	let vkCmdCopyImage: PFN_vkCmdCopyImage = load_func("vkCmdCopyImage");
	let vkCmdBlitImage: PFN_vkCmdBlitImage = load_func("vkCmdBlitImage");
	let vkCmdCopyBufferToImage: PFN_vkCmdCopyBufferToImage = load_func("vkCmdCopyBufferToImage");
	let vkCmdCopyImageToBuffer: PFN_vkCmdCopyImageToBuffer = load_func("vkCmdCopyImageToBuffer");
	let vkCmdCopyMemoryIndirectNV: PFN_vkCmdCopyMemoryIndirectNV = load_func("vkCmdCopyMemoryIndirectNV");
	let vkCmdCopyMemoryToImageIndirectNV: PFN_vkCmdCopyMemoryToImageIndirectNV = load_func("vkCmdCopyMemoryToImageIndirectNV");
	let vkCmdUpdateBuffer: PFN_vkCmdUpdateBuffer = load_func("vkCmdUpdateBuffer");
	let vkCmdFillBuffer: PFN_vkCmdFillBuffer = load_func("vkCmdFillBuffer");
	let vkCmdClearColorImage: PFN_vkCmdClearColorImage = load_func("vkCmdClearColorImage");
	let vkCmdClearDepthStencilImage: PFN_vkCmdClearDepthStencilImage = load_func("vkCmdClearDepthStencilImage");
	let vkCmdClearAttachments: PFN_vkCmdClearAttachments = load_func("vkCmdClearAttachments");
	let vkCmdResolveImage: PFN_vkCmdResolveImage = load_func("vkCmdResolveImage");
	let vkCmdSetEvent: PFN_vkCmdSetEvent = load_func("vkCmdSetEvent");
	let vkCmdResetEvent: PFN_vkCmdResetEvent = load_func("vkCmdResetEvent");
	let vkCmdWaitEvents: PFN_vkCmdWaitEvents = load_func("vkCmdWaitEvents");
	let vkCmdPipelineBarrier: PFN_vkCmdPipelineBarrier = load_func("vkCmdPipelineBarrier");
	let vkCmdBeginQuery: PFN_vkCmdBeginQuery = load_func("vkCmdBeginQuery");
	let vkCmdEndQuery: PFN_vkCmdEndQuery = load_func("vkCmdEndQuery");
	let vkCmdBeginConditionalRenderingEXT: PFN_vkCmdBeginConditionalRenderingEXT = load_func("vkCmdBeginConditionalRenderingEXT");
	let vkCmdEndConditionalRenderingEXT: PFN_vkCmdEndConditionalRenderingEXT = load_func("vkCmdEndConditionalRenderingEXT");
	let vkCmdResetQueryPool: PFN_vkCmdResetQueryPool = load_func("vkCmdResetQueryPool");
	let vkCmdWriteTimestamp: PFN_vkCmdWriteTimestamp = load_func("vkCmdWriteTimestamp");
	let vkCmdCopyQueryPoolResults: PFN_vkCmdCopyQueryPoolResults = load_func("vkCmdCopyQueryPoolResults");
	let vkCmdPushConstants: PFN_vkCmdPushConstants = load_func("vkCmdPushConstants");
	let vkCmdBeginRenderPass: PFN_vkCmdBeginRenderPass = load_func("vkCmdBeginRenderPass");
	let vkCmdNextSubpass: PFN_vkCmdNextSubpass = load_func("vkCmdNextSubpass");
	let vkCmdEndRenderPass: PFN_vkCmdEndRenderPass = load_func("vkCmdEndRenderPass");
	let vkCmdExecuteCommands: PFN_vkCmdExecuteCommands = load_func("vkCmdExecuteCommands");
	let vkCreateAndroidSurfaceKHR: PFN_vkCreateAndroidSurfaceKHR = load_func("vkCreateAndroidSurfaceKHR");
	let vkGetPhysicalDeviceDisplayPropertiesKHR: PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = load_func("vkGetPhysicalDeviceDisplayPropertiesKHR");
	let vkGetPhysicalDeviceDisplayPlanePropertiesKHR: PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = load_func("vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
	let vkGetDisplayPlaneSupportedDisplaysKHR: PFN_vkGetDisplayPlaneSupportedDisplaysKHR = load_func("vkGetDisplayPlaneSupportedDisplaysKHR");
	let vkGetDisplayModePropertiesKHR: PFN_vkGetDisplayModePropertiesKHR = load_func("vkGetDisplayModePropertiesKHR");
	let vkCreateDisplayModeKHR: PFN_vkCreateDisplayModeKHR = load_func("vkCreateDisplayModeKHR");
	let vkGetDisplayPlaneCapabilitiesKHR: PFN_vkGetDisplayPlaneCapabilitiesKHR = load_func("vkGetDisplayPlaneCapabilitiesKHR");
	let vkCreateDisplayPlaneSurfaceKHR: PFN_vkCreateDisplayPlaneSurfaceKHR = load_func("vkCreateDisplayPlaneSurfaceKHR");
	let vkCreateSharedSwapchainsKHR: PFN_vkCreateSharedSwapchainsKHR = load_func("vkCreateSharedSwapchainsKHR");
	let vkDestroySurfaceKHR: PFN_vkDestroySurfaceKHR = load_func("vkDestroySurfaceKHR");
	let vkGetPhysicalDeviceSurfaceSupportKHR: PFN_vkGetPhysicalDeviceSurfaceSupportKHR = load_func("vkGetPhysicalDeviceSurfaceSupportKHR");
	let vkGetPhysicalDeviceSurfaceCapabilitiesKHR: PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = load_func("vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
	let vkGetPhysicalDeviceSurfaceFormatsKHR: PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = load_func("vkGetPhysicalDeviceSurfaceFormatsKHR");
	let vkGetPhysicalDeviceSurfacePresentModesKHR: PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = load_func("vkGetPhysicalDeviceSurfacePresentModesKHR");
	let vkCreateSwapchainKHR: PFN_vkCreateSwapchainKHR = load_func("vkCreateSwapchainKHR");
	let vkDestroySwapchainKHR: PFN_vkDestroySwapchainKHR = load_func("vkDestroySwapchainKHR");
	let vkGetSwapchainImagesKHR: PFN_vkGetSwapchainImagesKHR = load_func("vkGetSwapchainImagesKHR");
	let vkAcquireNextImageKHR: PFN_vkAcquireNextImageKHR = load_func("vkAcquireNextImageKHR");
	let vkQueuePresentKHR: PFN_vkQueuePresentKHR = load_func("vkQueuePresentKHR");
	let vkCreateViSurfaceNN: PFN_vkCreateViSurfaceNN = load_func("vkCreateViSurfaceNN");
	let vkCreateWaylandSurfaceKHR: PFN_vkCreateWaylandSurfaceKHR = load_func("vkCreateWaylandSurfaceKHR");
	let vkGetPhysicalDeviceWaylandPresentationSupportKHR: PFN_vkGetPhysicalDeviceWaylandPresentationSupportKHR = load_func("vkGetPhysicalDeviceWaylandPresentationSupportKHR");
	let vkCreateWin32SurfaceKHR: PFN_vkCreateWin32SurfaceKHR = load_func("vkCreateWin32SurfaceKHR");
	let vkGetPhysicalDeviceWin32PresentationSupportKHR: PFN_vkGetPhysicalDeviceWin32PresentationSupportKHR = load_func("vkGetPhysicalDeviceWin32PresentationSupportKHR");
	let vkCreateXlibSurfaceKHR: PFN_vkCreateXlibSurfaceKHR = load_func("vkCreateXlibSurfaceKHR");
	let vkGetPhysicalDeviceXlibPresentationSupportKHR: PFN_vkGetPhysicalDeviceXlibPresentationSupportKHR = load_func("vkGetPhysicalDeviceXlibPresentationSupportKHR");
	let vkCreateXcbSurfaceKHR: PFN_vkCreateXcbSurfaceKHR = load_func("vkCreateXcbSurfaceKHR");
	let vkGetPhysicalDeviceXcbPresentationSupportKHR: PFN_vkGetPhysicalDeviceXcbPresentationSupportKHR = load_func("vkGetPhysicalDeviceXcbPresentationSupportKHR");
	let vkCreateDirectFBSurfaceEXT: PFN_vkCreateDirectFBSurfaceEXT = load_func("vkCreateDirectFBSurfaceEXT");
	let vkGetPhysicalDeviceDirectFBPresentationSupportEXT: PFN_vkGetPhysicalDeviceDirectFBPresentationSupportEXT = load_func("vkGetPhysicalDeviceDirectFBPresentationSupportEXT");
	let vkCreateImagePipeSurfaceFUCHSIA: PFN_vkCreateImagePipeSurfaceFUCHSIA = load_func("vkCreateImagePipeSurfaceFUCHSIA");
	let vkCreateStreamDescriptorSurfaceGGP: PFN_vkCreateStreamDescriptorSurfaceGGP = load_func("vkCreateStreamDescriptorSurfaceGGP");
	let vkCreateScreenSurfaceQNX: PFN_vkCreateScreenSurfaceQNX = load_func("vkCreateScreenSurfaceQNX");
	let vkGetPhysicalDeviceScreenPresentationSupportQNX: PFN_vkGetPhysicalDeviceScreenPresentationSupportQNX = load_func("vkGetPhysicalDeviceScreenPresentationSupportQNX");
	let vkCreateDebugReportCallbackEXT: PFN_vkCreateDebugReportCallbackEXT = load_func("vkCreateDebugReportCallbackEXT");
	let vkDestroyDebugReportCallbackEXT: PFN_vkDestroyDebugReportCallbackEXT = load_func("vkDestroyDebugReportCallbackEXT");
	let vkDebugReportMessageEXT: PFN_vkDebugReportMessageEXT = load_func("vkDebugReportMessageEXT");
	let vkDebugMarkerSetObjectNameEXT: PFN_vkDebugMarkerSetObjectNameEXT = load_func("vkDebugMarkerSetObjectNameEXT");
	let vkDebugMarkerSetObjectTagEXT: PFN_vkDebugMarkerSetObjectTagEXT = load_func("vkDebugMarkerSetObjectTagEXT");
	let vkCmdDebugMarkerBeginEXT: PFN_vkCmdDebugMarkerBeginEXT = load_func("vkCmdDebugMarkerBeginEXT");
	let vkCmdDebugMarkerEndEXT: PFN_vkCmdDebugMarkerEndEXT = load_func("vkCmdDebugMarkerEndEXT");
	let vkCmdDebugMarkerInsertEXT: PFN_vkCmdDebugMarkerInsertEXT = load_func("vkCmdDebugMarkerInsertEXT");
	let vkGetPhysicalDeviceExternalImageFormatPropertiesNV: PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = load_func("vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
	let vkGetMemoryWin32HandleNV: PFN_vkGetMemoryWin32HandleNV = load_func("vkGetMemoryWin32HandleNV");
	let vkCmdExecuteGeneratedCommandsNV: PFN_vkCmdExecuteGeneratedCommandsNV = load_func("vkCmdExecuteGeneratedCommandsNV");
	let vkCmdPreprocessGeneratedCommandsNV: PFN_vkCmdPreprocessGeneratedCommandsNV = load_func("vkCmdPreprocessGeneratedCommandsNV");
	let vkCmdBindPipelineShaderGroupNV: PFN_vkCmdBindPipelineShaderGroupNV = load_func("vkCmdBindPipelineShaderGroupNV");
	let vkGetGeneratedCommandsMemoryRequirementsNV: PFN_vkGetGeneratedCommandsMemoryRequirementsNV = load_func("vkGetGeneratedCommandsMemoryRequirementsNV");
	let vkCreateIndirectCommandsLayoutNV: PFN_vkCreateIndirectCommandsLayoutNV = load_func("vkCreateIndirectCommandsLayoutNV");
	let vkDestroyIndirectCommandsLayoutNV: PFN_vkDestroyIndirectCommandsLayoutNV = load_func("vkDestroyIndirectCommandsLayoutNV");
	let vkGetPhysicalDeviceFeatures2: PFN_vkGetPhysicalDeviceFeatures2 = load_func("vkGetPhysicalDeviceFeatures2");
	let vkGetPhysicalDeviceProperties2: PFN_vkGetPhysicalDeviceProperties2 = load_func("vkGetPhysicalDeviceProperties2");
	let vkGetPhysicalDeviceFormatProperties2: PFN_vkGetPhysicalDeviceFormatProperties2 = load_func("vkGetPhysicalDeviceFormatProperties2");
	let vkGetPhysicalDeviceImageFormatProperties2: PFN_vkGetPhysicalDeviceImageFormatProperties2 = load_func("vkGetPhysicalDeviceImageFormatProperties2");
	let vkGetPhysicalDeviceQueueFamilyProperties2: PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = load_func("vkGetPhysicalDeviceQueueFamilyProperties2");
	let vkGetPhysicalDeviceMemoryProperties2: PFN_vkGetPhysicalDeviceMemoryProperties2 = load_func("vkGetPhysicalDeviceMemoryProperties2");
	let vkGetPhysicalDeviceSparseImageFormatProperties2: PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = load_func("vkGetPhysicalDeviceSparseImageFormatProperties2");
	let vkCmdPushDescriptorSetKHR: PFN_vkCmdPushDescriptorSetKHR = load_func("vkCmdPushDescriptorSetKHR");
	let vkTrimCommandPool: PFN_vkTrimCommandPool = load_func("vkTrimCommandPool");
	let vkGetPhysicalDeviceExternalBufferProperties: PFN_vkGetPhysicalDeviceExternalBufferProperties = load_func("vkGetPhysicalDeviceExternalBufferProperties");
	let vkGetMemoryWin32HandleKHR: PFN_vkGetMemoryWin32HandleKHR = load_func("vkGetMemoryWin32HandleKHR");
	let vkGetMemoryWin32HandlePropertiesKHR: PFN_vkGetMemoryWin32HandlePropertiesKHR = load_func("vkGetMemoryWin32HandlePropertiesKHR");
	let vkGetMemoryFdKHR: PFN_vkGetMemoryFdKHR = load_func("vkGetMemoryFdKHR");
	let vkGetMemoryFdPropertiesKHR: PFN_vkGetMemoryFdPropertiesKHR = load_func("vkGetMemoryFdPropertiesKHR");
	let vkGetMemoryZirconHandleFUCHSIA: PFN_vkGetMemoryZirconHandleFUCHSIA = load_func("vkGetMemoryZirconHandleFUCHSIA");
	let vkGetMemoryZirconHandlePropertiesFUCHSIA: PFN_vkGetMemoryZirconHandlePropertiesFUCHSIA = load_func("vkGetMemoryZirconHandlePropertiesFUCHSIA");
	let vkGetMemoryRemoteAddressNV: PFN_vkGetMemoryRemoteAddressNV = load_func("vkGetMemoryRemoteAddressNV");
	let vkGetPhysicalDeviceExternalSemaphoreProperties: PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = load_func("vkGetPhysicalDeviceExternalSemaphoreProperties");
	let vkGetSemaphoreWin32HandleKHR: PFN_vkGetSemaphoreWin32HandleKHR = load_func("vkGetSemaphoreWin32HandleKHR");
	let vkImportSemaphoreWin32HandleKHR: PFN_vkImportSemaphoreWin32HandleKHR = load_func("vkImportSemaphoreWin32HandleKHR");
	let vkGetSemaphoreFdKHR: PFN_vkGetSemaphoreFdKHR = load_func("vkGetSemaphoreFdKHR");
	let vkImportSemaphoreFdKHR: PFN_vkImportSemaphoreFdKHR = load_func("vkImportSemaphoreFdKHR");
	let vkGetSemaphoreZirconHandleFUCHSIA: PFN_vkGetSemaphoreZirconHandleFUCHSIA = load_func("vkGetSemaphoreZirconHandleFUCHSIA");
	let vkImportSemaphoreZirconHandleFUCHSIA: PFN_vkImportSemaphoreZirconHandleFUCHSIA = load_func("vkImportSemaphoreZirconHandleFUCHSIA");
	let vkGetPhysicalDeviceExternalFenceProperties: PFN_vkGetPhysicalDeviceExternalFenceProperties = load_func("vkGetPhysicalDeviceExternalFenceProperties");
	let vkGetFenceWin32HandleKHR: PFN_vkGetFenceWin32HandleKHR = load_func("vkGetFenceWin32HandleKHR");
	let vkImportFenceWin32HandleKHR: PFN_vkImportFenceWin32HandleKHR = load_func("vkImportFenceWin32HandleKHR");
	let vkGetFenceFdKHR: PFN_vkGetFenceFdKHR = load_func("vkGetFenceFdKHR");
	let vkImportFenceFdKHR: PFN_vkImportFenceFdKHR = load_func("vkImportFenceFdKHR");
	let vkReleaseDisplayEXT: PFN_vkReleaseDisplayEXT = load_func("vkReleaseDisplayEXT");
	let vkAcquireXlibDisplayEXT: PFN_vkAcquireXlibDisplayEXT = load_func("vkAcquireXlibDisplayEXT");
	let vkGetRandROutputDisplayEXT: PFN_vkGetRandROutputDisplayEXT = load_func("vkGetRandROutputDisplayEXT");
	let vkAcquireWinrtDisplayNV: PFN_vkAcquireWinrtDisplayNV = load_func("vkAcquireWinrtDisplayNV");
	let vkGetWinrtDisplayNV: PFN_vkGetWinrtDisplayNV = load_func("vkGetWinrtDisplayNV");
	let vkDisplayPowerControlEXT: PFN_vkDisplayPowerControlEXT = load_func("vkDisplayPowerControlEXT");
	let vkRegisterDeviceEventEXT: PFN_vkRegisterDeviceEventEXT = load_func("vkRegisterDeviceEventEXT");
	let vkRegisterDisplayEventEXT: PFN_vkRegisterDisplayEventEXT = load_func("vkRegisterDisplayEventEXT");
	let vkGetSwapchainCounterEXT: PFN_vkGetSwapchainCounterEXT = load_func("vkGetSwapchainCounterEXT");
	let vkGetPhysicalDeviceSurfaceCapabilities2EXT: PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = load_func("vkGetPhysicalDeviceSurfaceCapabilities2EXT");
	let vkEnumeratePhysicalDeviceGroups: PFN_vkEnumeratePhysicalDeviceGroups = load_func("vkEnumeratePhysicalDeviceGroups");
	let vkGetDeviceGroupPeerMemoryFeatures: PFN_vkGetDeviceGroupPeerMemoryFeatures = load_func("vkGetDeviceGroupPeerMemoryFeatures");
	let vkBindBufferMemory2: PFN_vkBindBufferMemory2 = load_func("vkBindBufferMemory2");
	let vkBindImageMemory2: PFN_vkBindImageMemory2 = load_func("vkBindImageMemory2");
	let vkCmdSetDeviceMask: PFN_vkCmdSetDeviceMask = load_func("vkCmdSetDeviceMask");
	let vkGetDeviceGroupPresentCapabilitiesKHR: PFN_vkGetDeviceGroupPresentCapabilitiesKHR = load_func("vkGetDeviceGroupPresentCapabilitiesKHR");
	let vkGetDeviceGroupSurfacePresentModesKHR: PFN_vkGetDeviceGroupSurfacePresentModesKHR = load_func("vkGetDeviceGroupSurfacePresentModesKHR");
	let vkAcquireNextImage2KHR: PFN_vkAcquireNextImage2KHR = load_func("vkAcquireNextImage2KHR");
	let vkCmdDispatchBase: PFN_vkCmdDispatchBase = load_func("vkCmdDispatchBase");
	let vkGetPhysicalDevicePresentRectanglesKHR: PFN_vkGetPhysicalDevicePresentRectanglesKHR = load_func("vkGetPhysicalDevicePresentRectanglesKHR");
	let vkCreateDescriptorUpdateTemplate: PFN_vkCreateDescriptorUpdateTemplate = load_func("vkCreateDescriptorUpdateTemplate");
	let vkDestroyDescriptorUpdateTemplate: PFN_vkDestroyDescriptorUpdateTemplate = load_func("vkDestroyDescriptorUpdateTemplate");
	let vkUpdateDescriptorSetWithTemplate: PFN_vkUpdateDescriptorSetWithTemplate = load_func("vkUpdateDescriptorSetWithTemplate");
	let vkCmdPushDescriptorSetWithTemplateKHR: PFN_vkCmdPushDescriptorSetWithTemplateKHR = load_func("vkCmdPushDescriptorSetWithTemplateKHR");
	let vkSetHdrMetadataEXT: PFN_vkSetHdrMetadataEXT = load_func("vkSetHdrMetadataEXT");
	let vkGetSwapchainStatusKHR: PFN_vkGetSwapchainStatusKHR = load_func("vkGetSwapchainStatusKHR");
	let vkGetRefreshCycleDurationGOOGLE: PFN_vkGetRefreshCycleDurationGOOGLE = load_func("vkGetRefreshCycleDurationGOOGLE");
	let vkGetPastPresentationTimingGOOGLE: PFN_vkGetPastPresentationTimingGOOGLE = load_func("vkGetPastPresentationTimingGOOGLE");
	let vkCreateIOSSurfaceMVK: PFN_vkCreateIOSSurfaceMVK = load_func("vkCreateIOSSurfaceMVK");
	let vkCreateMacOSSurfaceMVK: PFN_vkCreateMacOSSurfaceMVK = load_func("vkCreateMacOSSurfaceMVK");
	let vkCreateMetalSurfaceEXT: PFN_vkCreateMetalSurfaceEXT = load_func("vkCreateMetalSurfaceEXT");
	let vkCmdSetViewportWScalingNV: PFN_vkCmdSetViewportWScalingNV = load_func("vkCmdSetViewportWScalingNV");
	let vkCmdSetDiscardRectangleEXT: PFN_vkCmdSetDiscardRectangleEXT = load_func("vkCmdSetDiscardRectangleEXT");
	let vkCmdSetSampleLocationsEXT: PFN_vkCmdSetSampleLocationsEXT = load_func("vkCmdSetSampleLocationsEXT");
	let vkGetPhysicalDeviceMultisamplePropertiesEXT: PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = load_func("vkGetPhysicalDeviceMultisamplePropertiesEXT");
	let vkGetPhysicalDeviceSurfaceCapabilities2KHR: PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = load_func("vkGetPhysicalDeviceSurfaceCapabilities2KHR");
	let vkGetPhysicalDeviceSurfaceFormats2KHR: PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = load_func("vkGetPhysicalDeviceSurfaceFormats2KHR");
	let vkGetPhysicalDeviceDisplayProperties2KHR: PFN_vkGetPhysicalDeviceDisplayProperties2KHR = load_func("vkGetPhysicalDeviceDisplayProperties2KHR");
	let vkGetPhysicalDeviceDisplayPlaneProperties2KHR: PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = load_func("vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
	let vkGetDisplayModeProperties2KHR: PFN_vkGetDisplayModeProperties2KHR = load_func("vkGetDisplayModeProperties2KHR");
	let vkGetDisplayPlaneCapabilities2KHR: PFN_vkGetDisplayPlaneCapabilities2KHR = load_func("vkGetDisplayPlaneCapabilities2KHR");
	let vkGetBufferMemoryRequirements2: PFN_vkGetBufferMemoryRequirements2 = load_func("vkGetBufferMemoryRequirements2");
	let vkGetImageMemoryRequirements2: PFN_vkGetImageMemoryRequirements2 = load_func("vkGetImageMemoryRequirements2");
	let vkGetImageSparseMemoryRequirements2: PFN_vkGetImageSparseMemoryRequirements2 = load_func("vkGetImageSparseMemoryRequirements2");
	let vkGetDeviceBufferMemoryRequirements: PFN_vkGetDeviceBufferMemoryRequirements = load_func("vkGetDeviceBufferMemoryRequirements");
	let vkGetDeviceImageMemoryRequirements: PFN_vkGetDeviceImageMemoryRequirements = load_func("vkGetDeviceImageMemoryRequirements");
	let vkGetDeviceImageSparseMemoryRequirements: PFN_vkGetDeviceImageSparseMemoryRequirements = load_func("vkGetDeviceImageSparseMemoryRequirements");
	let vkCreateSamplerYcbcrConversion: PFN_vkCreateSamplerYcbcrConversion = load_func("vkCreateSamplerYcbcrConversion");
	let vkDestroySamplerYcbcrConversion: PFN_vkDestroySamplerYcbcrConversion = load_func("vkDestroySamplerYcbcrConversion");
	let vkGetDeviceQueue2: PFN_vkGetDeviceQueue2 = load_func("vkGetDeviceQueue2");
	let vkCreateValidationCacheEXT: PFN_vkCreateValidationCacheEXT = load_func("vkCreateValidationCacheEXT");
	let vkDestroyValidationCacheEXT: PFN_vkDestroyValidationCacheEXT = load_func("vkDestroyValidationCacheEXT");
	let vkGetValidationCacheDataEXT: PFN_vkGetValidationCacheDataEXT = load_func("vkGetValidationCacheDataEXT");
	let vkMergeValidationCachesEXT: PFN_vkMergeValidationCachesEXT = load_func("vkMergeValidationCachesEXT");
	let vkGetDescriptorSetLayoutSupport: PFN_vkGetDescriptorSetLayoutSupport = load_func("vkGetDescriptorSetLayoutSupport");
	let vkGetSwapchainGrallocUsageANDROID: PFN_vkGetSwapchainGrallocUsageANDROID = load_func("vkGetSwapchainGrallocUsageANDROID");
	let vkGetSwapchainGrallocUsage2ANDROID: PFN_vkGetSwapchainGrallocUsage2ANDROID = load_func("vkGetSwapchainGrallocUsage2ANDROID");
	let vkAcquireImageANDROID: PFN_vkAcquireImageANDROID = load_func("vkAcquireImageANDROID");
	let vkQueueSignalReleaseImageANDROID: PFN_vkQueueSignalReleaseImageANDROID = load_func("vkQueueSignalReleaseImageANDROID");
	let vkGetShaderInfoAMD: PFN_vkGetShaderInfoAMD = load_func("vkGetShaderInfoAMD");
	let vkSetLocalDimmingAMD: PFN_vkSetLocalDimmingAMD = load_func("vkSetLocalDimmingAMD");
	let vkGetPhysicalDeviceCalibrateableTimeDomainsEXT: PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = load_func("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
	let vkGetCalibratedTimestampsEXT: PFN_vkGetCalibratedTimestampsEXT = load_func("vkGetCalibratedTimestampsEXT");
	let vkSetDebugUtilsObjectNameEXT: PFN_vkSetDebugUtilsObjectNameEXT = load_func("vkSetDebugUtilsObjectNameEXT");
	let vkSetDebugUtilsObjectTagEXT: PFN_vkSetDebugUtilsObjectTagEXT = load_func("vkSetDebugUtilsObjectTagEXT");
	let vkQueueBeginDebugUtilsLabelEXT: PFN_vkQueueBeginDebugUtilsLabelEXT = load_func("vkQueueBeginDebugUtilsLabelEXT");
	let vkQueueEndDebugUtilsLabelEXT: PFN_vkQueueEndDebugUtilsLabelEXT = load_func("vkQueueEndDebugUtilsLabelEXT");
	let vkQueueInsertDebugUtilsLabelEXT: PFN_vkQueueInsertDebugUtilsLabelEXT = load_func("vkQueueInsertDebugUtilsLabelEXT");
	let vkCmdBeginDebugUtilsLabelEXT: PFN_vkCmdBeginDebugUtilsLabelEXT = load_func("vkCmdBeginDebugUtilsLabelEXT");
	let vkCmdEndDebugUtilsLabelEXT: PFN_vkCmdEndDebugUtilsLabelEXT = load_func("vkCmdEndDebugUtilsLabelEXT");
	let vkCmdInsertDebugUtilsLabelEXT: PFN_vkCmdInsertDebugUtilsLabelEXT = load_func("vkCmdInsertDebugUtilsLabelEXT");
	let vkCreateDebugUtilsMessengerEXT: PFN_vkCreateDebugUtilsMessengerEXT = load_func("vkCreateDebugUtilsMessengerEXT");
	let vkDestroyDebugUtilsMessengerEXT: PFN_vkDestroyDebugUtilsMessengerEXT = load_func("vkDestroyDebugUtilsMessengerEXT");
	let vkSubmitDebugUtilsMessageEXT: PFN_vkSubmitDebugUtilsMessageEXT = load_func("vkSubmitDebugUtilsMessageEXT");
	let vkGetMemoryHostPointerPropertiesEXT: PFN_vkGetMemoryHostPointerPropertiesEXT = load_func("vkGetMemoryHostPointerPropertiesEXT");
	let vkCmdWriteBufferMarkerAMD: PFN_vkCmdWriteBufferMarkerAMD = load_func("vkCmdWriteBufferMarkerAMD");
	let vkCreateRenderPass2: PFN_vkCreateRenderPass2 = load_func("vkCreateRenderPass2");
	let vkCmdBeginRenderPass2: PFN_vkCmdBeginRenderPass2 = load_func("vkCmdBeginRenderPass2");
	let vkCmdNextSubpass2: PFN_vkCmdNextSubpass2 = load_func("vkCmdNextSubpass2");
	let vkCmdEndRenderPass2: PFN_vkCmdEndRenderPass2 = load_func("vkCmdEndRenderPass2");
	let vkGetSemaphoreCounterValue: PFN_vkGetSemaphoreCounterValue = load_func("vkGetSemaphoreCounterValue");
	let vkWaitSemaphores: PFN_vkWaitSemaphores = load_func("vkWaitSemaphores");
	let vkSignalSemaphore: PFN_vkSignalSemaphore = load_func("vkSignalSemaphore");
	let vkGetAndroidHardwareBufferPropertiesANDROID: PFN_vkGetAndroidHardwareBufferPropertiesANDROID = load_func("vkGetAndroidHardwareBufferPropertiesANDROID");
	let vkGetMemoryAndroidHardwareBufferANDROID: PFN_vkGetMemoryAndroidHardwareBufferANDROID = load_func("vkGetMemoryAndroidHardwareBufferANDROID");
	let vkCmdDrawIndirectCount: PFN_vkCmdDrawIndirectCount = load_func("vkCmdDrawIndirectCount");
	let vkCmdDrawIndexedIndirectCount: PFN_vkCmdDrawIndexedIndirectCount = load_func("vkCmdDrawIndexedIndirectCount");
	let vkCmdSetCheckpointNV: PFN_vkCmdSetCheckpointNV = load_func("vkCmdSetCheckpointNV");
	let vkGetQueueCheckpointDataNV: PFN_vkGetQueueCheckpointDataNV = load_func("vkGetQueueCheckpointDataNV");
	let vkCmdBindTransformFeedbackBuffersEXT: PFN_vkCmdBindTransformFeedbackBuffersEXT = load_func("vkCmdBindTransformFeedbackBuffersEXT");
	let vkCmdBeginTransformFeedbackEXT: PFN_vkCmdBeginTransformFeedbackEXT = load_func("vkCmdBeginTransformFeedbackEXT");
	let vkCmdEndTransformFeedbackEXT: PFN_vkCmdEndTransformFeedbackEXT = load_func("vkCmdEndTransformFeedbackEXT");
	let vkCmdBeginQueryIndexedEXT: PFN_vkCmdBeginQueryIndexedEXT = load_func("vkCmdBeginQueryIndexedEXT");
	let vkCmdEndQueryIndexedEXT: PFN_vkCmdEndQueryIndexedEXT = load_func("vkCmdEndQueryIndexedEXT");
	let vkCmdDrawIndirectByteCountEXT: PFN_vkCmdDrawIndirectByteCountEXT = load_func("vkCmdDrawIndirectByteCountEXT");
	let vkCmdSetExclusiveScissorNV: PFN_vkCmdSetExclusiveScissorNV = load_func("vkCmdSetExclusiveScissorNV");
	let vkCmdBindShadingRateImageNV: PFN_vkCmdBindShadingRateImageNV = load_func("vkCmdBindShadingRateImageNV");
	let vkCmdSetViewportShadingRatePaletteNV: PFN_vkCmdSetViewportShadingRatePaletteNV = load_func("vkCmdSetViewportShadingRatePaletteNV");
	let vkCmdSetCoarseSampleOrderNV: PFN_vkCmdSetCoarseSampleOrderNV = load_func("vkCmdSetCoarseSampleOrderNV");
	let vkCmdDrawMeshTasksNV: PFN_vkCmdDrawMeshTasksNV = load_func("vkCmdDrawMeshTasksNV");
	let vkCmdDrawMeshTasksIndirectNV: PFN_vkCmdDrawMeshTasksIndirectNV = load_func("vkCmdDrawMeshTasksIndirectNV");
	let vkCmdDrawMeshTasksIndirectCountNV: PFN_vkCmdDrawMeshTasksIndirectCountNV = load_func("vkCmdDrawMeshTasksIndirectCountNV");
	let vkCmdDrawMeshTasksEXT: PFN_vkCmdDrawMeshTasksEXT = load_func("vkCmdDrawMeshTasksEXT");
	let vkCmdDrawMeshTasksIndirectEXT: PFN_vkCmdDrawMeshTasksIndirectEXT = load_func("vkCmdDrawMeshTasksIndirectEXT");
	let vkCmdDrawMeshTasksIndirectCountEXT: PFN_vkCmdDrawMeshTasksIndirectCountEXT = load_func("vkCmdDrawMeshTasksIndirectCountEXT");
	let vkCompileDeferredNV: PFN_vkCompileDeferredNV = load_func("vkCompileDeferredNV");
	let vkCreateAccelerationStructureNV: PFN_vkCreateAccelerationStructureNV = load_func("vkCreateAccelerationStructureNV");
	let vkCmdBindInvocationMaskHUAWEI: PFN_vkCmdBindInvocationMaskHUAWEI = load_func("vkCmdBindInvocationMaskHUAWEI");
	let vkDestroyAccelerationStructureKHR: PFN_vkDestroyAccelerationStructureKHR = load_func("vkDestroyAccelerationStructureKHR");
	let vkDestroyAccelerationStructureNV: PFN_vkDestroyAccelerationStructureNV = load_func("vkDestroyAccelerationStructureNV");
	let vkGetAccelerationStructureMemoryRequirementsNV: PFN_vkGetAccelerationStructureMemoryRequirementsNV = load_func("vkGetAccelerationStructureMemoryRequirementsNV");
	let vkBindAccelerationStructureMemoryNV: PFN_vkBindAccelerationStructureMemoryNV = load_func("vkBindAccelerationStructureMemoryNV");
	let vkCmdCopyAccelerationStructureNV: PFN_vkCmdCopyAccelerationStructureNV = load_func("vkCmdCopyAccelerationStructureNV");
	let vkCmdCopyAccelerationStructureKHR: PFN_vkCmdCopyAccelerationStructureKHR = load_func("vkCmdCopyAccelerationStructureKHR");
	let vkCopyAccelerationStructureKHR: PFN_vkCopyAccelerationStructureKHR = load_func("vkCopyAccelerationStructureKHR");
	let vkCmdCopyAccelerationStructureToMemoryKHR: PFN_vkCmdCopyAccelerationStructureToMemoryKHR = load_func("vkCmdCopyAccelerationStructureToMemoryKHR");
	let vkCopyAccelerationStructureToMemoryKHR: PFN_vkCopyAccelerationStructureToMemoryKHR = load_func("vkCopyAccelerationStructureToMemoryKHR");
	let vkCmdCopyMemoryToAccelerationStructureKHR: PFN_vkCmdCopyMemoryToAccelerationStructureKHR = load_func("vkCmdCopyMemoryToAccelerationStructureKHR");
	let vkCopyMemoryToAccelerationStructureKHR: PFN_vkCopyMemoryToAccelerationStructureKHR = load_func("vkCopyMemoryToAccelerationStructureKHR");
	let vkCmdWriteAccelerationStructuresPropertiesKHR: PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = load_func("vkCmdWriteAccelerationStructuresPropertiesKHR");
	let vkCmdWriteAccelerationStructuresPropertiesNV: PFN_vkCmdWriteAccelerationStructuresPropertiesNV = load_func("vkCmdWriteAccelerationStructuresPropertiesNV");
	let vkCmdBuildAccelerationStructureNV: PFN_vkCmdBuildAccelerationStructureNV = load_func("vkCmdBuildAccelerationStructureNV");
	let vkWriteAccelerationStructuresPropertiesKHR: PFN_vkWriteAccelerationStructuresPropertiesKHR = load_func("vkWriteAccelerationStructuresPropertiesKHR");
	let vkCmdTraceRaysKHR: PFN_vkCmdTraceRaysKHR = load_func("vkCmdTraceRaysKHR");
	let vkCmdTraceRaysNV: PFN_vkCmdTraceRaysNV = load_func("vkCmdTraceRaysNV");
	let vkGetRayTracingShaderGroupHandlesKHR: PFN_vkGetRayTracingShaderGroupHandlesKHR = load_func("vkGetRayTracingShaderGroupHandlesKHR");
	let vkGetRayTracingCaptureReplayShaderGroupHandlesKHR: PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = load_func("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
	let vkGetAccelerationStructureHandleNV: PFN_vkGetAccelerationStructureHandleNV = load_func("vkGetAccelerationStructureHandleNV");
	let vkCreateRayTracingPipelinesNV: PFN_vkCreateRayTracingPipelinesNV = load_func("vkCreateRayTracingPipelinesNV");
	let vkCreateRayTracingPipelinesKHR: PFN_vkCreateRayTracingPipelinesKHR = load_func("vkCreateRayTracingPipelinesKHR");
	let vkGetPhysicalDeviceCooperativeMatrixPropertiesNV: PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = load_func("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
	let vkCmdTraceRaysIndirectKHR: PFN_vkCmdTraceRaysIndirectKHR = load_func("vkCmdTraceRaysIndirectKHR");
	let vkCmdTraceRaysIndirect2KHR: PFN_vkCmdTraceRaysIndirect2KHR = load_func("vkCmdTraceRaysIndirect2KHR");
	let vkGetDeviceAccelerationStructureCompatibilityKHR: PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = load_func("vkGetDeviceAccelerationStructureCompatibilityKHR");
	let vkGetRayTracingShaderGroupStackSizeKHR: PFN_vkGetRayTracingShaderGroupStackSizeKHR = load_func("vkGetRayTracingShaderGroupStackSizeKHR");
	let vkCmdSetRayTracingPipelineStackSizeKHR: PFN_vkCmdSetRayTracingPipelineStackSizeKHR = load_func("vkCmdSetRayTracingPipelineStackSizeKHR");
	let vkGetImageViewHandleNVX: PFN_vkGetImageViewHandleNVX = load_func("vkGetImageViewHandleNVX");
	let vkGetImageViewAddressNVX: PFN_vkGetImageViewAddressNVX = load_func("vkGetImageViewAddressNVX");
	let vkGetPhysicalDeviceSurfacePresentModes2EXT: PFN_vkGetPhysicalDeviceSurfacePresentModes2EXT = load_func("vkGetPhysicalDeviceSurfacePresentModes2EXT");
	let vkGetDeviceGroupSurfacePresentModes2EXT: PFN_vkGetDeviceGroupSurfacePresentModes2EXT = load_func("vkGetDeviceGroupSurfacePresentModes2EXT");
	let vkAcquireFullScreenExclusiveModeEXT: PFN_vkAcquireFullScreenExclusiveModeEXT = load_func("vkAcquireFullScreenExclusiveModeEXT");
	let vkReleaseFullScreenExclusiveModeEXT: PFN_vkReleaseFullScreenExclusiveModeEXT = load_func("vkReleaseFullScreenExclusiveModeEXT");
	let vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR: PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = load_func("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
	let vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR: PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = load_func("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
	let vkAcquireProfilingLockKHR: PFN_vkAcquireProfilingLockKHR = load_func("vkAcquireProfilingLockKHR");
	let vkReleaseProfilingLockKHR: PFN_vkReleaseProfilingLockKHR = load_func("vkReleaseProfilingLockKHR");
	let vkGetImageDrmFormatModifierPropertiesEXT: PFN_vkGetImageDrmFormatModifierPropertiesEXT = load_func("vkGetImageDrmFormatModifierPropertiesEXT");
	let vkGetBufferOpaqueCaptureAddress: PFN_vkGetBufferOpaqueCaptureAddress = load_func("vkGetBufferOpaqueCaptureAddress");
	let vkGetBufferDeviceAddress: PFN_vkGetBufferDeviceAddress = load_func("vkGetBufferDeviceAddress");
	let vkCreateHeadlessSurfaceEXT: PFN_vkCreateHeadlessSurfaceEXT = load_func("vkCreateHeadlessSurfaceEXT");
	let vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV: PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = load_func("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
	let vkInitializePerformanceApiINTEL: PFN_vkInitializePerformanceApiINTEL = load_func("vkInitializePerformanceApiINTEL");
	let vkUninitializePerformanceApiINTEL: PFN_vkUninitializePerformanceApiINTEL = load_func("vkUninitializePerformanceApiINTEL");
	let vkCmdSetPerformanceMarkerINTEL: PFN_vkCmdSetPerformanceMarkerINTEL = load_func("vkCmdSetPerformanceMarkerINTEL");
	let vkCmdSetPerformanceStreamMarkerINTEL: PFN_vkCmdSetPerformanceStreamMarkerINTEL = load_func("vkCmdSetPerformanceStreamMarkerINTEL");
	let vkCmdSetPerformanceOverrideINTEL: PFN_vkCmdSetPerformanceOverrideINTEL = load_func("vkCmdSetPerformanceOverrideINTEL");
	let vkAcquirePerformanceConfigurationINTEL: PFN_vkAcquirePerformanceConfigurationINTEL = load_func("vkAcquirePerformanceConfigurationINTEL");
	let vkReleasePerformanceConfigurationINTEL: PFN_vkReleasePerformanceConfigurationINTEL = load_func("vkReleasePerformanceConfigurationINTEL");
	let vkQueueSetPerformanceConfigurationINTEL: PFN_vkQueueSetPerformanceConfigurationINTEL = load_func("vkQueueSetPerformanceConfigurationINTEL");
	let vkGetPerformanceParameterINTEL: PFN_vkGetPerformanceParameterINTEL = load_func("vkGetPerformanceParameterINTEL");
	let vkGetDeviceMemoryOpaqueCaptureAddress: PFN_vkGetDeviceMemoryOpaqueCaptureAddress = load_func("vkGetDeviceMemoryOpaqueCaptureAddress");
	let vkGetPipelineExecutablePropertiesKHR: PFN_vkGetPipelineExecutablePropertiesKHR = load_func("vkGetPipelineExecutablePropertiesKHR");
	let vkGetPipelineExecutableStatisticsKHR: PFN_vkGetPipelineExecutableStatisticsKHR = load_func("vkGetPipelineExecutableStatisticsKHR");
	let vkGetPipelineExecutableInternalRepresentationsKHR: PFN_vkGetPipelineExecutableInternalRepresentationsKHR = load_func("vkGetPipelineExecutableInternalRepresentationsKHR");
	let vkCmdSetLineStippleEXT: PFN_vkCmdSetLineStippleEXT = load_func("vkCmdSetLineStippleEXT");
	let vkGetPhysicalDeviceToolProperties: PFN_vkGetPhysicalDeviceToolProperties = load_func("vkGetPhysicalDeviceToolProperties");
	let vkCreateAccelerationStructureKHR: PFN_vkCreateAccelerationStructureKHR = load_func("vkCreateAccelerationStructureKHR");
	let vkCmdBuildAccelerationStructuresKHR: PFN_vkCmdBuildAccelerationStructuresKHR = load_func("vkCmdBuildAccelerationStructuresKHR");
	let vkCmdBuildAccelerationStructuresIndirectKHR: PFN_vkCmdBuildAccelerationStructuresIndirectKHR = load_func("vkCmdBuildAccelerationStructuresIndirectKHR");
	let vkBuildAccelerationStructuresKHR: PFN_vkBuildAccelerationStructuresKHR = load_func("vkBuildAccelerationStructuresKHR");
	let vkGetAccelerationStructureDeviceAddressKHR: PFN_vkGetAccelerationStructureDeviceAddressKHR = load_func("vkGetAccelerationStructureDeviceAddressKHR");
	let vkCreateDeferredOperationKHR: PFN_vkCreateDeferredOperationKHR = load_func("vkCreateDeferredOperationKHR");
	let vkDestroyDeferredOperationKHR: PFN_vkDestroyDeferredOperationKHR = load_func("vkDestroyDeferredOperationKHR");
	let vkGetDeferredOperationMaxConcurrencyKHR: PFN_vkGetDeferredOperationMaxConcurrencyKHR = load_func("vkGetDeferredOperationMaxConcurrencyKHR");
	let vkGetDeferredOperationResultKHR: PFN_vkGetDeferredOperationResultKHR = load_func("vkGetDeferredOperationResultKHR");
	let vkDeferredOperationJoinKHR: PFN_vkDeferredOperationJoinKHR = load_func("vkDeferredOperationJoinKHR");
	let vkCmdSetCullMode: PFN_vkCmdSetCullMode = load_func("vkCmdSetCullMode");
	let vkCmdSetFrontFace: PFN_vkCmdSetFrontFace = load_func("vkCmdSetFrontFace");
	let vkCmdSetPrimitiveTopology: PFN_vkCmdSetPrimitiveTopology = load_func("vkCmdSetPrimitiveTopology");
	let vkCmdSetViewportWithCount: PFN_vkCmdSetViewportWithCount = load_func("vkCmdSetViewportWithCount");
	let vkCmdSetScissorWithCount: PFN_vkCmdSetScissorWithCount = load_func("vkCmdSetScissorWithCount");
	let vkCmdBindVertexBuffers2: PFN_vkCmdBindVertexBuffers2 = load_func("vkCmdBindVertexBuffers2");
	let vkCmdSetDepthTestEnable: PFN_vkCmdSetDepthTestEnable = load_func("vkCmdSetDepthTestEnable");
	let vkCmdSetDepthWriteEnable: PFN_vkCmdSetDepthWriteEnable = load_func("vkCmdSetDepthWriteEnable");
	let vkCmdSetDepthCompareOp: PFN_vkCmdSetDepthCompareOp = load_func("vkCmdSetDepthCompareOp");
	let vkCmdSetDepthBoundsTestEnable: PFN_vkCmdSetDepthBoundsTestEnable = load_func("vkCmdSetDepthBoundsTestEnable");
	let vkCmdSetStencilTestEnable: PFN_vkCmdSetStencilTestEnable = load_func("vkCmdSetStencilTestEnable");
	let vkCmdSetStencilOp: PFN_vkCmdSetStencilOp = load_func("vkCmdSetStencilOp");
	let vkCmdSetPatchControlPointsEXT: PFN_vkCmdSetPatchControlPointsEXT = load_func("vkCmdSetPatchControlPointsEXT");
	let vkCmdSetRasterizerDiscardEnable: PFN_vkCmdSetRasterizerDiscardEnable = load_func("vkCmdSetRasterizerDiscardEnable");
	let vkCmdSetDepthBiasEnable: PFN_vkCmdSetDepthBiasEnable = load_func("vkCmdSetDepthBiasEnable");
	let vkCmdSetLogicOpEXT: PFN_vkCmdSetLogicOpEXT = load_func("vkCmdSetLogicOpEXT");
	let vkCmdSetPrimitiveRestartEnable: PFN_vkCmdSetPrimitiveRestartEnable = load_func("vkCmdSetPrimitiveRestartEnable");
	let vkCmdSetTessellationDomainOriginEXT: PFN_vkCmdSetTessellationDomainOriginEXT = load_func("vkCmdSetTessellationDomainOriginEXT");
	let vkCmdSetDepthClampEnableEXT: PFN_vkCmdSetDepthClampEnableEXT = load_func("vkCmdSetDepthClampEnableEXT");
	let vkCmdSetPolygonModeEXT: PFN_vkCmdSetPolygonModeEXT = load_func("vkCmdSetPolygonModeEXT");
	let vkCmdSetRasterizationSamplesEXT: PFN_vkCmdSetRasterizationSamplesEXT = load_func("vkCmdSetRasterizationSamplesEXT");
	let vkCmdSetSampleMaskEXT: PFN_vkCmdSetSampleMaskEXT = load_func("vkCmdSetSampleMaskEXT");
	let vkCmdSetAlphaToCoverageEnableEXT: PFN_vkCmdSetAlphaToCoverageEnableEXT = load_func("vkCmdSetAlphaToCoverageEnableEXT");
	let vkCmdSetAlphaToOneEnableEXT: PFN_vkCmdSetAlphaToOneEnableEXT = load_func("vkCmdSetAlphaToOneEnableEXT");
	let vkCmdSetLogicOpEnableEXT: PFN_vkCmdSetLogicOpEnableEXT = load_func("vkCmdSetLogicOpEnableEXT");
	let vkCmdSetColorBlendEnableEXT: PFN_vkCmdSetColorBlendEnableEXT = load_func("vkCmdSetColorBlendEnableEXT");
	let vkCmdSetColorBlendEquationEXT: PFN_vkCmdSetColorBlendEquationEXT = load_func("vkCmdSetColorBlendEquationEXT");
	let vkCmdSetColorWriteMaskEXT: PFN_vkCmdSetColorWriteMaskEXT = load_func("vkCmdSetColorWriteMaskEXT");
	let vkCmdSetRasterizationStreamEXT: PFN_vkCmdSetRasterizationStreamEXT = load_func("vkCmdSetRasterizationStreamEXT");
	let vkCmdSetConservativeRasterizationModeEXT: PFN_vkCmdSetConservativeRasterizationModeEXT = load_func("vkCmdSetConservativeRasterizationModeEXT");
	let vkCmdSetExtraPrimitiveOverestimationSizeEXT: PFN_vkCmdSetExtraPrimitiveOverestimationSizeEXT = load_func("vkCmdSetExtraPrimitiveOverestimationSizeEXT");
	let vkCmdSetDepthClipEnableEXT: PFN_vkCmdSetDepthClipEnableEXT = load_func("vkCmdSetDepthClipEnableEXT");
	let vkCmdSetSampleLocationsEnableEXT: PFN_vkCmdSetSampleLocationsEnableEXT = load_func("vkCmdSetSampleLocationsEnableEXT");
	let vkCmdSetColorBlendAdvancedEXT: PFN_vkCmdSetColorBlendAdvancedEXT = load_func("vkCmdSetColorBlendAdvancedEXT");
	let vkCmdSetProvokingVertexModeEXT: PFN_vkCmdSetProvokingVertexModeEXT = load_func("vkCmdSetProvokingVertexModeEXT");
	let vkCmdSetLineRasterizationModeEXT: PFN_vkCmdSetLineRasterizationModeEXT = load_func("vkCmdSetLineRasterizationModeEXT");
	let vkCmdSetLineStippleEnableEXT: PFN_vkCmdSetLineStippleEnableEXT = load_func("vkCmdSetLineStippleEnableEXT");
	let vkCmdSetDepthClipNegativeOneToOneEXT: PFN_vkCmdSetDepthClipNegativeOneToOneEXT = load_func("vkCmdSetDepthClipNegativeOneToOneEXT");
	let vkCmdSetViewportWScalingEnableNV: PFN_vkCmdSetViewportWScalingEnableNV = load_func("vkCmdSetViewportWScalingEnableNV");
	let vkCmdSetViewportSwizzleNV: PFN_vkCmdSetViewportSwizzleNV = load_func("vkCmdSetViewportSwizzleNV");
	let vkCmdSetCoverageToColorEnableNV: PFN_vkCmdSetCoverageToColorEnableNV = load_func("vkCmdSetCoverageToColorEnableNV");
	let vkCmdSetCoverageToColorLocationNV: PFN_vkCmdSetCoverageToColorLocationNV = load_func("vkCmdSetCoverageToColorLocationNV");
	let vkCmdSetCoverageModulationModeNV: PFN_vkCmdSetCoverageModulationModeNV = load_func("vkCmdSetCoverageModulationModeNV");
	let vkCmdSetCoverageModulationTableEnableNV: PFN_vkCmdSetCoverageModulationTableEnableNV = load_func("vkCmdSetCoverageModulationTableEnableNV");
	let vkCmdSetCoverageModulationTableNV: PFN_vkCmdSetCoverageModulationTableNV = load_func("vkCmdSetCoverageModulationTableNV");
	let vkCmdSetShadingRateImageEnableNV: PFN_vkCmdSetShadingRateImageEnableNV = load_func("vkCmdSetShadingRateImageEnableNV");
	let vkCmdSetCoverageReductionModeNV: PFN_vkCmdSetCoverageReductionModeNV = load_func("vkCmdSetCoverageReductionModeNV");
	let vkCmdSetRepresentativeFragmentTestEnableNV: PFN_vkCmdSetRepresentativeFragmentTestEnableNV = load_func("vkCmdSetRepresentativeFragmentTestEnableNV");
	let vkCreatePrivateDataSlot: PFN_vkCreatePrivateDataSlot = load_func("vkCreatePrivateDataSlot");
	let vkDestroyPrivateDataSlot: PFN_vkDestroyPrivateDataSlot = load_func("vkDestroyPrivateDataSlot");
	let vkSetPrivateData: PFN_vkSetPrivateData = load_func("vkSetPrivateData");
	let vkGetPrivateData: PFN_vkGetPrivateData = load_func("vkGetPrivateData");
	let vkCmdCopyBuffer2: PFN_vkCmdCopyBuffer2 = load_func("vkCmdCopyBuffer2");
	let vkCmdCopyImage2: PFN_vkCmdCopyImage2 = load_func("vkCmdCopyImage2");
	let vkCmdBlitImage2: PFN_vkCmdBlitImage2 = load_func("vkCmdBlitImage2");
	let vkCmdCopyBufferToImage2: PFN_vkCmdCopyBufferToImage2 = load_func("vkCmdCopyBufferToImage2");
	let vkCmdCopyImageToBuffer2: PFN_vkCmdCopyImageToBuffer2 = load_func("vkCmdCopyImageToBuffer2");
	let vkCmdResolveImage2: PFN_vkCmdResolveImage2 = load_func("vkCmdResolveImage2");
	let vkCmdSetFragmentShadingRateKHR: PFN_vkCmdSetFragmentShadingRateKHR = load_func("vkCmdSetFragmentShadingRateKHR");
	let vkGetPhysicalDeviceFragmentShadingRatesKHR: PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = load_func("vkGetPhysicalDeviceFragmentShadingRatesKHR");
	let vkCmdSetFragmentShadingRateEnumNV: PFN_vkCmdSetFragmentShadingRateEnumNV = load_func("vkCmdSetFragmentShadingRateEnumNV");
	let vkGetAccelerationStructureBuildSizesKHR: PFN_vkGetAccelerationStructureBuildSizesKHR = load_func("vkGetAccelerationStructureBuildSizesKHR");
	let vkCmdSetVertexInputEXT: PFN_vkCmdSetVertexInputEXT = load_func("vkCmdSetVertexInputEXT");
	let vkCmdSetColorWriteEnableEXT: PFN_vkCmdSetColorWriteEnableEXT = load_func("vkCmdSetColorWriteEnableEXT");
	let vkCmdSetEvent2: PFN_vkCmdSetEvent2 = load_func("vkCmdSetEvent2");
	let vkCmdResetEvent2: PFN_vkCmdResetEvent2 = load_func("vkCmdResetEvent2");
	let vkCmdWaitEvents2: PFN_vkCmdWaitEvents2 = load_func("vkCmdWaitEvents2");
	let vkCmdPipelineBarrier2: PFN_vkCmdPipelineBarrier2 = load_func("vkCmdPipelineBarrier2");
	let vkQueueSubmit2: PFN_vkQueueSubmit2 = load_func("vkQueueSubmit2");
	let vkCmdWriteTimestamp2: PFN_vkCmdWriteTimestamp2 = load_func("vkCmdWriteTimestamp2");
	let vkCmdWriteBufferMarker2AMD: PFN_vkCmdWriteBufferMarker2AMD = load_func("vkCmdWriteBufferMarker2AMD");
	let vkGetQueueCheckpointData2NV: PFN_vkGetQueueCheckpointData2NV = load_func("vkGetQueueCheckpointData2NV");
	let vkGetPhysicalDeviceVideoCapabilitiesKHR: PFN_vkGetPhysicalDeviceVideoCapabilitiesKHR = load_func("vkGetPhysicalDeviceVideoCapabilitiesKHR");
	let vkGetPhysicalDeviceVideoFormatPropertiesKHR: PFN_vkGetPhysicalDeviceVideoFormatPropertiesKHR = load_func("vkGetPhysicalDeviceVideoFormatPropertiesKHR");
	let vkCreateVideoSessionKHR: PFN_vkCreateVideoSessionKHR = load_func("vkCreateVideoSessionKHR");
	let vkDestroyVideoSessionKHR: PFN_vkDestroyVideoSessionKHR = load_func("vkDestroyVideoSessionKHR");
	let vkCreateVideoSessionParametersKHR: PFN_vkCreateVideoSessionParametersKHR = load_func("vkCreateVideoSessionParametersKHR");
	let vkUpdateVideoSessionParametersKHR: PFN_vkUpdateVideoSessionParametersKHR = load_func("vkUpdateVideoSessionParametersKHR");
	let vkDestroyVideoSessionParametersKHR: PFN_vkDestroyVideoSessionParametersKHR = load_func("vkDestroyVideoSessionParametersKHR");
	let vkGetVideoSessionMemoryRequirementsKHR: PFN_vkGetVideoSessionMemoryRequirementsKHR = load_func("vkGetVideoSessionMemoryRequirementsKHR");
	let vkBindVideoSessionMemoryKHR: PFN_vkBindVideoSessionMemoryKHR = load_func("vkBindVideoSessionMemoryKHR");
	let vkCmdDecodeVideoKHR: PFN_vkCmdDecodeVideoKHR = load_func("vkCmdDecodeVideoKHR");
	let vkCmdBeginVideoCodingKHR: PFN_vkCmdBeginVideoCodingKHR = load_func("vkCmdBeginVideoCodingKHR");
	let vkCmdControlVideoCodingKHR: PFN_vkCmdControlVideoCodingKHR = load_func("vkCmdControlVideoCodingKHR");
	let vkCmdEndVideoCodingKHR: PFN_vkCmdEndVideoCodingKHR = load_func("vkCmdEndVideoCodingKHR");
	let vkCmdEncodeVideoKHR: PFN_vkCmdEncodeVideoKHR = load_func("vkCmdEncodeVideoKHR");
	let vkCmdDecompressMemoryNV: PFN_vkCmdDecompressMemoryNV = load_func("vkCmdDecompressMemoryNV");
	let vkCmdDecompressMemoryIndirectCountNV: PFN_vkCmdDecompressMemoryIndirectCountNV = load_func("vkCmdDecompressMemoryIndirectCountNV");
	let vkCreateCuModuleNVX: PFN_vkCreateCuModuleNVX = load_func("vkCreateCuModuleNVX");
	let vkCreateCuFunctionNVX: PFN_vkCreateCuFunctionNVX = load_func("vkCreateCuFunctionNVX");
	let vkDestroyCuModuleNVX: PFN_vkDestroyCuModuleNVX = load_func("vkDestroyCuModuleNVX");
	let vkDestroyCuFunctionNVX: PFN_vkDestroyCuFunctionNVX = load_func("vkDestroyCuFunctionNVX");
	let vkCmdCuLaunchKernelNVX: PFN_vkCmdCuLaunchKernelNVX = load_func("vkCmdCuLaunchKernelNVX");
	let vkSetDeviceMemoryPriorityEXT: PFN_vkSetDeviceMemoryPriorityEXT = load_func("vkSetDeviceMemoryPriorityEXT");
	let vkAcquireDrmDisplayEXT: PFN_vkAcquireDrmDisplayEXT = load_func("vkAcquireDrmDisplayEXT");
	let vkGetDrmDisplayEXT: PFN_vkGetDrmDisplayEXT = load_func("vkGetDrmDisplayEXT");
	let vkWaitForPresentKHR: PFN_vkWaitForPresentKHR = load_func("vkWaitForPresentKHR");
	let vkCreateBufferCollectionFUCHSIA: PFN_vkCreateBufferCollectionFUCHSIA = load_func("vkCreateBufferCollectionFUCHSIA");
	let vkSetBufferCollectionBufferConstraintsFUCHSIA: PFN_vkSetBufferCollectionBufferConstraintsFUCHSIA = load_func("vkSetBufferCollectionBufferConstraintsFUCHSIA");
	let vkSetBufferCollectionImageConstraintsFUCHSIA: PFN_vkSetBufferCollectionImageConstraintsFUCHSIA = load_func("vkSetBufferCollectionImageConstraintsFUCHSIA");
	let vkDestroyBufferCollectionFUCHSIA: PFN_vkDestroyBufferCollectionFUCHSIA = load_func("vkDestroyBufferCollectionFUCHSIA");
	let vkGetBufferCollectionPropertiesFUCHSIA: PFN_vkGetBufferCollectionPropertiesFUCHSIA = load_func("vkGetBufferCollectionPropertiesFUCHSIA");
	let vkCmdBeginRendering: PFN_vkCmdBeginRendering = load_func("vkCmdBeginRendering");
	let vkCmdEndRendering: PFN_vkCmdEndRendering = load_func("vkCmdEndRendering");
	let vkGetDescriptorSetLayoutHostMappingInfoVALVE: PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = load_func("vkGetDescriptorSetLayoutHostMappingInfoVALVE");
	let vkGetDescriptorSetHostMappingVALVE: PFN_vkGetDescriptorSetHostMappingVALVE = load_func("vkGetDescriptorSetHostMappingVALVE");
	let vkCreateMicromapEXT: PFN_vkCreateMicromapEXT = load_func("vkCreateMicromapEXT");
	let vkCmdBuildMicromapsEXT: PFN_vkCmdBuildMicromapsEXT = load_func("vkCmdBuildMicromapsEXT");
	let vkBuildMicromapsEXT: PFN_vkBuildMicromapsEXT = load_func("vkBuildMicromapsEXT");
	let vkDestroyMicromapEXT: PFN_vkDestroyMicromapEXT = load_func("vkDestroyMicromapEXT");
	let vkCmdCopyMicromapEXT: PFN_vkCmdCopyMicromapEXT = load_func("vkCmdCopyMicromapEXT");
	let vkCopyMicromapEXT: PFN_vkCopyMicromapEXT = load_func("vkCopyMicromapEXT");
	let vkCmdCopyMicromapToMemoryEXT: PFN_vkCmdCopyMicromapToMemoryEXT = load_func("vkCmdCopyMicromapToMemoryEXT");
	let vkCopyMicromapToMemoryEXT: PFN_vkCopyMicromapToMemoryEXT = load_func("vkCopyMicromapToMemoryEXT");
	let vkCmdCopyMemoryToMicromapEXT: PFN_vkCmdCopyMemoryToMicromapEXT = load_func("vkCmdCopyMemoryToMicromapEXT");
	let vkCopyMemoryToMicromapEXT: PFN_vkCopyMemoryToMicromapEXT = load_func("vkCopyMemoryToMicromapEXT");
	let vkCmdWriteMicromapsPropertiesEXT: PFN_vkCmdWriteMicromapsPropertiesEXT = load_func("vkCmdWriteMicromapsPropertiesEXT");
	let vkWriteMicromapsPropertiesEXT: PFN_vkWriteMicromapsPropertiesEXT = load_func("vkWriteMicromapsPropertiesEXT");
	let vkGetDeviceMicromapCompatibilityEXT: PFN_vkGetDeviceMicromapCompatibilityEXT = load_func("vkGetDeviceMicromapCompatibilityEXT");
	let vkGetMicromapBuildSizesEXT: PFN_vkGetMicromapBuildSizesEXT = load_func("vkGetMicromapBuildSizesEXT");
	let vkGetShaderModuleIdentifierEXT: PFN_vkGetShaderModuleIdentifierEXT = load_func("vkGetShaderModuleIdentifierEXT");
	let vkGetShaderModuleCreateInfoIdentifierEXT: PFN_vkGetShaderModuleCreateInfoIdentifierEXT = load_func("vkGetShaderModuleCreateInfoIdentifierEXT");
	let vkGetImageSubresourceLayout2EXT: PFN_vkGetImageSubresourceLayout2EXT = load_func("vkGetImageSubresourceLayout2EXT");
	let vkGetPipelinePropertiesEXT: PFN_vkGetPipelinePropertiesEXT = load_func("vkGetPipelinePropertiesEXT");
	let vkExportMetalObjectsEXT: PFN_vkExportMetalObjectsEXT = load_func("vkExportMetalObjectsEXT");
	let vkGetFramebufferTilePropertiesQCOM: PFN_vkGetFramebufferTilePropertiesQCOM = load_func("vkGetFramebufferTilePropertiesQCOM");
	let vkGetDynamicRenderingTilePropertiesQCOM: PFN_vkGetDynamicRenderingTilePropertiesQCOM = load_func("vkGetDynamicRenderingTilePropertiesQCOM");
	let vkGetPhysicalDeviceOpticalFlowImageFormatsNV: PFN_vkGetPhysicalDeviceOpticalFlowImageFormatsNV = load_func("vkGetPhysicalDeviceOpticalFlowImageFormatsNV");
	let vkCreateOpticalFlowSessionNV: PFN_vkCreateOpticalFlowSessionNV = load_func("vkCreateOpticalFlowSessionNV");
	let vkDestroyOpticalFlowSessionNV: PFN_vkDestroyOpticalFlowSessionNV = load_func("vkDestroyOpticalFlowSessionNV");
	let vkBindOpticalFlowSessionImageNV: PFN_vkBindOpticalFlowSessionImageNV = load_func("vkBindOpticalFlowSessionImageNV");
	let vkCmdOpticalFlowExecuteNV: PFN_vkCmdOpticalFlowExecuteNV = load_func("vkCmdOpticalFlowExecuteNV");

	unsafe { VULKAN_COMMANDS = VulkanCommands
	{
		vkCreateInstance,
		vkDestroyInstance,
		vkEnumeratePhysicalDevices,
		vkGetDeviceProcAddr,
		vkGetInstanceProcAddr,
		vkGetPhysicalDeviceProperties,
		vkGetPhysicalDeviceQueueFamilyProperties,
		vkGetPhysicalDeviceMemoryProperties,
		vkGetPhysicalDeviceFeatures,
		vkGetPhysicalDeviceFormatProperties,
		vkGetPhysicalDeviceImageFormatProperties,
		vkCreateDevice,
		vkDestroyDevice,
		vkEnumerateInstanceVersion,
		vkEnumerateInstanceLayerProperties,
		vkEnumerateInstanceExtensionProperties,
		vkEnumerateDeviceLayerProperties,
		vkEnumerateDeviceExtensionProperties,
		vkGetDeviceQueue,
		vkQueueSubmit,
		vkQueueWaitIdle,
		vkDeviceWaitIdle,
		vkAllocateMemory,
		vkFreeMemory,
		vkMapMemory,
		vkUnmapMemory,
		vkFlushMappedMemoryRanges,
		vkInvalidateMappedMemoryRanges,
		vkGetDeviceMemoryCommitment,
		vkGetBufferMemoryRequirements,
		vkBindBufferMemory,
		vkGetImageMemoryRequirements,
		vkBindImageMemory,
		vkGetImageSparseMemoryRequirements,
		vkGetPhysicalDeviceSparseImageFormatProperties,
		vkQueueBindSparse,
		vkCreateFence,
		vkDestroyFence,
		vkResetFences,
		vkGetFenceStatus,
		vkWaitForFences,
		vkCreateSemaphore,
		vkDestroySemaphore,
		vkCreateEvent,
		vkDestroyEvent,
		vkGetEventStatus,
		vkSetEvent,
		vkResetEvent,
		vkCreateQueryPool,
		vkDestroyQueryPool,
		vkGetQueryPoolResults,
		vkResetQueryPool,
		vkCreateBuffer,
		vkDestroyBuffer,
		vkCreateBufferView,
		vkDestroyBufferView,
		vkCreateImage,
		vkDestroyImage,
		vkGetImageSubresourceLayout,
		vkCreateImageView,
		vkDestroyImageView,
		vkCreateShaderModule,
		vkDestroyShaderModule,
		vkCreatePipelineCache,
		vkDestroyPipelineCache,
		vkGetPipelineCacheData,
		vkMergePipelineCaches,
		vkCreateGraphicsPipelines,
		vkCreateComputePipelines,
		vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI,
		vkDestroyPipeline,
		vkCreatePipelineLayout,
		vkDestroyPipelineLayout,
		vkCreateSampler,
		vkDestroySampler,
		vkCreateDescriptorSetLayout,
		vkDestroyDescriptorSetLayout,
		vkCreateDescriptorPool,
		vkDestroyDescriptorPool,
		vkResetDescriptorPool,
		vkAllocateDescriptorSets,
		vkFreeDescriptorSets,
		vkUpdateDescriptorSets,
		vkCreateFramebuffer,
		vkDestroyFramebuffer,
		vkCreateRenderPass,
		vkDestroyRenderPass,
		vkGetRenderAreaGranularity,
		vkCreateCommandPool,
		vkDestroyCommandPool,
		vkResetCommandPool,
		vkAllocateCommandBuffers,
		vkFreeCommandBuffers,
		vkBeginCommandBuffer,
		vkEndCommandBuffer,
		vkResetCommandBuffer,
		vkCmdBindPipeline,
		vkCmdSetViewport,
		vkCmdSetScissor,
		vkCmdSetLineWidth,
		vkCmdSetDepthBias,
		vkCmdSetBlendConstants,
		vkCmdSetDepthBounds,
		vkCmdSetStencilCompareMask,
		vkCmdSetStencilWriteMask,
		vkCmdSetStencilReference,
		vkCmdBindDescriptorSets,
		vkCmdBindIndexBuffer,
		vkCmdBindVertexBuffers,
		vkCmdDraw,
		vkCmdDrawIndexed,
		vkCmdDrawMultiEXT,
		vkCmdDrawMultiIndexedEXT,
		vkCmdDrawIndirect,
		vkCmdDrawIndexedIndirect,
		vkCmdDispatch,
		vkCmdDispatchIndirect,
		vkCmdSubpassShadingHUAWEI,
		vkCmdCopyBuffer,
		vkCmdCopyImage,
		vkCmdBlitImage,
		vkCmdCopyBufferToImage,
		vkCmdCopyImageToBuffer,
		vkCmdCopyMemoryIndirectNV,
		vkCmdCopyMemoryToImageIndirectNV,
		vkCmdUpdateBuffer,
		vkCmdFillBuffer,
		vkCmdClearColorImage,
		vkCmdClearDepthStencilImage,
		vkCmdClearAttachments,
		vkCmdResolveImage,
		vkCmdSetEvent,
		vkCmdResetEvent,
		vkCmdWaitEvents,
		vkCmdPipelineBarrier,
		vkCmdBeginQuery,
		vkCmdEndQuery,
		vkCmdBeginConditionalRenderingEXT,
		vkCmdEndConditionalRenderingEXT,
		vkCmdResetQueryPool,
		vkCmdWriteTimestamp,
		vkCmdCopyQueryPoolResults,
		vkCmdPushConstants,
		vkCmdBeginRenderPass,
		vkCmdNextSubpass,
		vkCmdEndRenderPass,
		vkCmdExecuteCommands,
		vkCreateAndroidSurfaceKHR,
		vkGetPhysicalDeviceDisplayPropertiesKHR,
		vkGetPhysicalDeviceDisplayPlanePropertiesKHR,
		vkGetDisplayPlaneSupportedDisplaysKHR,
		vkGetDisplayModePropertiesKHR,
		vkCreateDisplayModeKHR,
		vkGetDisplayPlaneCapabilitiesKHR,
		vkCreateDisplayPlaneSurfaceKHR,
		vkCreateSharedSwapchainsKHR,
		vkDestroySurfaceKHR,
		vkGetPhysicalDeviceSurfaceSupportKHR,
		vkGetPhysicalDeviceSurfaceCapabilitiesKHR,
		vkGetPhysicalDeviceSurfaceFormatsKHR,
		vkGetPhysicalDeviceSurfacePresentModesKHR,
		vkCreateSwapchainKHR,
		vkDestroySwapchainKHR,
		vkGetSwapchainImagesKHR,
		vkAcquireNextImageKHR,
		vkQueuePresentKHR,
		vkCreateViSurfaceNN,
		vkCreateWaylandSurfaceKHR,
		vkGetPhysicalDeviceWaylandPresentationSupportKHR,
		vkCreateWin32SurfaceKHR,
		vkGetPhysicalDeviceWin32PresentationSupportKHR,
		vkCreateXlibSurfaceKHR,
		vkGetPhysicalDeviceXlibPresentationSupportKHR,
		vkCreateXcbSurfaceKHR,
		vkGetPhysicalDeviceXcbPresentationSupportKHR,
		vkCreateDirectFBSurfaceEXT,
		vkGetPhysicalDeviceDirectFBPresentationSupportEXT,
		vkCreateImagePipeSurfaceFUCHSIA,
		vkCreateStreamDescriptorSurfaceGGP,
		vkCreateScreenSurfaceQNX,
		vkGetPhysicalDeviceScreenPresentationSupportQNX,
		vkCreateDebugReportCallbackEXT,
		vkDestroyDebugReportCallbackEXT,
		vkDebugReportMessageEXT,
		vkDebugMarkerSetObjectNameEXT,
		vkDebugMarkerSetObjectTagEXT,
		vkCmdDebugMarkerBeginEXT,
		vkCmdDebugMarkerEndEXT,
		vkCmdDebugMarkerInsertEXT,
		vkGetPhysicalDeviceExternalImageFormatPropertiesNV,
		vkGetMemoryWin32HandleNV,
		vkCmdExecuteGeneratedCommandsNV,
		vkCmdPreprocessGeneratedCommandsNV,
		vkCmdBindPipelineShaderGroupNV,
		vkGetGeneratedCommandsMemoryRequirementsNV,
		vkCreateIndirectCommandsLayoutNV,
		vkDestroyIndirectCommandsLayoutNV,
		vkGetPhysicalDeviceFeatures2,
		vkGetPhysicalDeviceProperties2,
		vkGetPhysicalDeviceFormatProperties2,
		vkGetPhysicalDeviceImageFormatProperties2,
		vkGetPhysicalDeviceQueueFamilyProperties2,
		vkGetPhysicalDeviceMemoryProperties2,
		vkGetPhysicalDeviceSparseImageFormatProperties2,
		vkCmdPushDescriptorSetKHR,
		vkTrimCommandPool,
		vkGetPhysicalDeviceExternalBufferProperties,
		vkGetMemoryWin32HandleKHR,
		vkGetMemoryWin32HandlePropertiesKHR,
		vkGetMemoryFdKHR,
		vkGetMemoryFdPropertiesKHR,
		vkGetMemoryZirconHandleFUCHSIA,
		vkGetMemoryZirconHandlePropertiesFUCHSIA,
		vkGetMemoryRemoteAddressNV,
		vkGetPhysicalDeviceExternalSemaphoreProperties,
		vkGetSemaphoreWin32HandleKHR,
		vkImportSemaphoreWin32HandleKHR,
		vkGetSemaphoreFdKHR,
		vkImportSemaphoreFdKHR,
		vkGetSemaphoreZirconHandleFUCHSIA,
		vkImportSemaphoreZirconHandleFUCHSIA,
		vkGetPhysicalDeviceExternalFenceProperties,
		vkGetFenceWin32HandleKHR,
		vkImportFenceWin32HandleKHR,
		vkGetFenceFdKHR,
		vkImportFenceFdKHR,
		vkReleaseDisplayEXT,
		vkAcquireXlibDisplayEXT,
		vkGetRandROutputDisplayEXT,
		vkAcquireWinrtDisplayNV,
		vkGetWinrtDisplayNV,
		vkDisplayPowerControlEXT,
		vkRegisterDeviceEventEXT,
		vkRegisterDisplayEventEXT,
		vkGetSwapchainCounterEXT,
		vkGetPhysicalDeviceSurfaceCapabilities2EXT,
		vkEnumeratePhysicalDeviceGroups,
		vkGetDeviceGroupPeerMemoryFeatures,
		vkBindBufferMemory2,
		vkBindImageMemory2,
		vkCmdSetDeviceMask,
		vkGetDeviceGroupPresentCapabilitiesKHR,
		vkGetDeviceGroupSurfacePresentModesKHR,
		vkAcquireNextImage2KHR,
		vkCmdDispatchBase,
		vkGetPhysicalDevicePresentRectanglesKHR,
		vkCreateDescriptorUpdateTemplate,
		vkDestroyDescriptorUpdateTemplate,
		vkUpdateDescriptorSetWithTemplate,
		vkCmdPushDescriptorSetWithTemplateKHR,
		vkSetHdrMetadataEXT,
		vkGetSwapchainStatusKHR,
		vkGetRefreshCycleDurationGOOGLE,
		vkGetPastPresentationTimingGOOGLE,
		vkCreateIOSSurfaceMVK,
		vkCreateMacOSSurfaceMVK,
		vkCreateMetalSurfaceEXT,
		vkCmdSetViewportWScalingNV,
		vkCmdSetDiscardRectangleEXT,
		vkCmdSetSampleLocationsEXT,
		vkGetPhysicalDeviceMultisamplePropertiesEXT,
		vkGetPhysicalDeviceSurfaceCapabilities2KHR,
		vkGetPhysicalDeviceSurfaceFormats2KHR,
		vkGetPhysicalDeviceDisplayProperties2KHR,
		vkGetPhysicalDeviceDisplayPlaneProperties2KHR,
		vkGetDisplayModeProperties2KHR,
		vkGetDisplayPlaneCapabilities2KHR,
		vkGetBufferMemoryRequirements2,
		vkGetImageMemoryRequirements2,
		vkGetImageSparseMemoryRequirements2,
		vkGetDeviceBufferMemoryRequirements,
		vkGetDeviceImageMemoryRequirements,
		vkGetDeviceImageSparseMemoryRequirements,
		vkCreateSamplerYcbcrConversion,
		vkDestroySamplerYcbcrConversion,
		vkGetDeviceQueue2,
		vkCreateValidationCacheEXT,
		vkDestroyValidationCacheEXT,
		vkGetValidationCacheDataEXT,
		vkMergeValidationCachesEXT,
		vkGetDescriptorSetLayoutSupport,
		vkGetSwapchainGrallocUsageANDROID,
		vkGetSwapchainGrallocUsage2ANDROID,
		vkAcquireImageANDROID,
		vkQueueSignalReleaseImageANDROID,
		vkGetShaderInfoAMD,
		vkSetLocalDimmingAMD,
		vkGetPhysicalDeviceCalibrateableTimeDomainsEXT,
		vkGetCalibratedTimestampsEXT,
		vkSetDebugUtilsObjectNameEXT,
		vkSetDebugUtilsObjectTagEXT,
		vkQueueBeginDebugUtilsLabelEXT,
		vkQueueEndDebugUtilsLabelEXT,
		vkQueueInsertDebugUtilsLabelEXT,
		vkCmdBeginDebugUtilsLabelEXT,
		vkCmdEndDebugUtilsLabelEXT,
		vkCmdInsertDebugUtilsLabelEXT,
		vkCreateDebugUtilsMessengerEXT,
		vkDestroyDebugUtilsMessengerEXT,
		vkSubmitDebugUtilsMessageEXT,
		vkGetMemoryHostPointerPropertiesEXT,
		vkCmdWriteBufferMarkerAMD,
		vkCreateRenderPass2,
		vkCmdBeginRenderPass2,
		vkCmdNextSubpass2,
		vkCmdEndRenderPass2,
		vkGetSemaphoreCounterValue,
		vkWaitSemaphores,
		vkSignalSemaphore,
		vkGetAndroidHardwareBufferPropertiesANDROID,
		vkGetMemoryAndroidHardwareBufferANDROID,
		vkCmdDrawIndirectCount,
		vkCmdDrawIndexedIndirectCount,
		vkCmdSetCheckpointNV,
		vkGetQueueCheckpointDataNV,
		vkCmdBindTransformFeedbackBuffersEXT,
		vkCmdBeginTransformFeedbackEXT,
		vkCmdEndTransformFeedbackEXT,
		vkCmdBeginQueryIndexedEXT,
		vkCmdEndQueryIndexedEXT,
		vkCmdDrawIndirectByteCountEXT,
		vkCmdSetExclusiveScissorNV,
		vkCmdBindShadingRateImageNV,
		vkCmdSetViewportShadingRatePaletteNV,
		vkCmdSetCoarseSampleOrderNV,
		vkCmdDrawMeshTasksNV,
		vkCmdDrawMeshTasksIndirectNV,
		vkCmdDrawMeshTasksIndirectCountNV,
		vkCmdDrawMeshTasksEXT,
		vkCmdDrawMeshTasksIndirectEXT,
		vkCmdDrawMeshTasksIndirectCountEXT,
		vkCompileDeferredNV,
		vkCreateAccelerationStructureNV,
		vkCmdBindInvocationMaskHUAWEI,
		vkDestroyAccelerationStructureKHR,
		vkDestroyAccelerationStructureNV,
		vkGetAccelerationStructureMemoryRequirementsNV,
		vkBindAccelerationStructureMemoryNV,
		vkCmdCopyAccelerationStructureNV,
		vkCmdCopyAccelerationStructureKHR,
		vkCopyAccelerationStructureKHR,
		vkCmdCopyAccelerationStructureToMemoryKHR,
		vkCopyAccelerationStructureToMemoryKHR,
		vkCmdCopyMemoryToAccelerationStructureKHR,
		vkCopyMemoryToAccelerationStructureKHR,
		vkCmdWriteAccelerationStructuresPropertiesKHR,
		vkCmdWriteAccelerationStructuresPropertiesNV,
		vkCmdBuildAccelerationStructureNV,
		vkWriteAccelerationStructuresPropertiesKHR,
		vkCmdTraceRaysKHR,
		vkCmdTraceRaysNV,
		vkGetRayTracingShaderGroupHandlesKHR,
		vkGetRayTracingCaptureReplayShaderGroupHandlesKHR,
		vkGetAccelerationStructureHandleNV,
		vkCreateRayTracingPipelinesNV,
		vkCreateRayTracingPipelinesKHR,
		vkGetPhysicalDeviceCooperativeMatrixPropertiesNV,
		vkCmdTraceRaysIndirectKHR,
		vkCmdTraceRaysIndirect2KHR,
		vkGetDeviceAccelerationStructureCompatibilityKHR,
		vkGetRayTracingShaderGroupStackSizeKHR,
		vkCmdSetRayTracingPipelineStackSizeKHR,
		vkGetImageViewHandleNVX,
		vkGetImageViewAddressNVX,
		vkGetPhysicalDeviceSurfacePresentModes2EXT,
		vkGetDeviceGroupSurfacePresentModes2EXT,
		vkAcquireFullScreenExclusiveModeEXT,
		vkReleaseFullScreenExclusiveModeEXT,
		vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR,
		vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR,
		vkAcquireProfilingLockKHR,
		vkReleaseProfilingLockKHR,
		vkGetImageDrmFormatModifierPropertiesEXT,
		vkGetBufferOpaqueCaptureAddress,
		vkGetBufferDeviceAddress,
		vkCreateHeadlessSurfaceEXT,
		vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV,
		vkInitializePerformanceApiINTEL,
		vkUninitializePerformanceApiINTEL,
		vkCmdSetPerformanceMarkerINTEL,
		vkCmdSetPerformanceStreamMarkerINTEL,
		vkCmdSetPerformanceOverrideINTEL,
		vkAcquirePerformanceConfigurationINTEL,
		vkReleasePerformanceConfigurationINTEL,
		vkQueueSetPerformanceConfigurationINTEL,
		vkGetPerformanceParameterINTEL,
		vkGetDeviceMemoryOpaqueCaptureAddress,
		vkGetPipelineExecutablePropertiesKHR,
		vkGetPipelineExecutableStatisticsKHR,
		vkGetPipelineExecutableInternalRepresentationsKHR,
		vkCmdSetLineStippleEXT,
		vkGetPhysicalDeviceToolProperties,
		vkCreateAccelerationStructureKHR,
		vkCmdBuildAccelerationStructuresKHR,
		vkCmdBuildAccelerationStructuresIndirectKHR,
		vkBuildAccelerationStructuresKHR,
		vkGetAccelerationStructureDeviceAddressKHR,
		vkCreateDeferredOperationKHR,
		vkDestroyDeferredOperationKHR,
		vkGetDeferredOperationMaxConcurrencyKHR,
		vkGetDeferredOperationResultKHR,
		vkDeferredOperationJoinKHR,
		vkCmdSetCullMode,
		vkCmdSetFrontFace,
		vkCmdSetPrimitiveTopology,
		vkCmdSetViewportWithCount,
		vkCmdSetScissorWithCount,
		vkCmdBindVertexBuffers2,
		vkCmdSetDepthTestEnable,
		vkCmdSetDepthWriteEnable,
		vkCmdSetDepthCompareOp,
		vkCmdSetDepthBoundsTestEnable,
		vkCmdSetStencilTestEnable,
		vkCmdSetStencilOp,
		vkCmdSetPatchControlPointsEXT,
		vkCmdSetRasterizerDiscardEnable,
		vkCmdSetDepthBiasEnable,
		vkCmdSetLogicOpEXT,
		vkCmdSetPrimitiveRestartEnable,
		vkCmdSetTessellationDomainOriginEXT,
		vkCmdSetDepthClampEnableEXT,
		vkCmdSetPolygonModeEXT,
		vkCmdSetRasterizationSamplesEXT,
		vkCmdSetSampleMaskEXT,
		vkCmdSetAlphaToCoverageEnableEXT,
		vkCmdSetAlphaToOneEnableEXT,
		vkCmdSetLogicOpEnableEXT,
		vkCmdSetColorBlendEnableEXT,
		vkCmdSetColorBlendEquationEXT,
		vkCmdSetColorWriteMaskEXT,
		vkCmdSetRasterizationStreamEXT,
		vkCmdSetConservativeRasterizationModeEXT,
		vkCmdSetExtraPrimitiveOverestimationSizeEXT,
		vkCmdSetDepthClipEnableEXT,
		vkCmdSetSampleLocationsEnableEXT,
		vkCmdSetColorBlendAdvancedEXT,
		vkCmdSetProvokingVertexModeEXT,
		vkCmdSetLineRasterizationModeEXT,
		vkCmdSetLineStippleEnableEXT,
		vkCmdSetDepthClipNegativeOneToOneEXT,
		vkCmdSetViewportWScalingEnableNV,
		vkCmdSetViewportSwizzleNV,
		vkCmdSetCoverageToColorEnableNV,
		vkCmdSetCoverageToColorLocationNV,
		vkCmdSetCoverageModulationModeNV,
		vkCmdSetCoverageModulationTableEnableNV,
		vkCmdSetCoverageModulationTableNV,
		vkCmdSetShadingRateImageEnableNV,
		vkCmdSetCoverageReductionModeNV,
		vkCmdSetRepresentativeFragmentTestEnableNV,
		vkCreatePrivateDataSlot,
		vkDestroyPrivateDataSlot,
		vkSetPrivateData,
		vkGetPrivateData,
		vkCmdCopyBuffer2,
		vkCmdCopyImage2,
		vkCmdBlitImage2,
		vkCmdCopyBufferToImage2,
		vkCmdCopyImageToBuffer2,
		vkCmdResolveImage2,
		vkCmdSetFragmentShadingRateKHR,
		vkGetPhysicalDeviceFragmentShadingRatesKHR,
		vkCmdSetFragmentShadingRateEnumNV,
		vkGetAccelerationStructureBuildSizesKHR,
		vkCmdSetVertexInputEXT,
		vkCmdSetColorWriteEnableEXT,
		vkCmdSetEvent2,
		vkCmdResetEvent2,
		vkCmdWaitEvents2,
		vkCmdPipelineBarrier2,
		vkQueueSubmit2,
		vkCmdWriteTimestamp2,
		vkCmdWriteBufferMarker2AMD,
		vkGetQueueCheckpointData2NV,
		vkGetPhysicalDeviceVideoCapabilitiesKHR,
		vkGetPhysicalDeviceVideoFormatPropertiesKHR,
		vkCreateVideoSessionKHR,
		vkDestroyVideoSessionKHR,
		vkCreateVideoSessionParametersKHR,
		vkUpdateVideoSessionParametersKHR,
		vkDestroyVideoSessionParametersKHR,
		vkGetVideoSessionMemoryRequirementsKHR,
		vkBindVideoSessionMemoryKHR,
		vkCmdDecodeVideoKHR,
		vkCmdBeginVideoCodingKHR,
		vkCmdControlVideoCodingKHR,
		vkCmdEndVideoCodingKHR,
		vkCmdEncodeVideoKHR,
		vkCmdDecompressMemoryNV,
		vkCmdDecompressMemoryIndirectCountNV,
		vkCreateCuModuleNVX,
		vkCreateCuFunctionNVX,
		vkDestroyCuModuleNVX,
		vkDestroyCuFunctionNVX,
		vkCmdCuLaunchKernelNVX,
		vkSetDeviceMemoryPriorityEXT,
		vkAcquireDrmDisplayEXT,
		vkGetDrmDisplayEXT,
		vkWaitForPresentKHR,
		vkCreateBufferCollectionFUCHSIA,
		vkSetBufferCollectionBufferConstraintsFUCHSIA,
		vkSetBufferCollectionImageConstraintsFUCHSIA,
		vkDestroyBufferCollectionFUCHSIA,
		vkGetBufferCollectionPropertiesFUCHSIA,
		vkCmdBeginRendering,
		vkCmdEndRendering,
		vkGetDescriptorSetLayoutHostMappingInfoVALVE,
		vkGetDescriptorSetHostMappingVALVE,
		vkCreateMicromapEXT,
		vkCmdBuildMicromapsEXT,
		vkBuildMicromapsEXT,
		vkDestroyMicromapEXT,
		vkCmdCopyMicromapEXT,
		vkCopyMicromapEXT,
		vkCmdCopyMicromapToMemoryEXT,
		vkCopyMicromapToMemoryEXT,
		vkCmdCopyMemoryToMicromapEXT,
		vkCopyMemoryToMicromapEXT,
		vkCmdWriteMicromapsPropertiesEXT,
		vkWriteMicromapsPropertiesEXT,
		vkGetDeviceMicromapCompatibilityEXT,
		vkGetMicromapBuildSizesEXT,
		vkGetShaderModuleIdentifierEXT,
		vkGetShaderModuleCreateInfoIdentifierEXT,
		vkGetImageSubresourceLayout2EXT,
		vkGetPipelinePropertiesEXT,
		vkExportMetalObjectsEXT,
		vkGetFramebufferTilePropertiesQCOM,
		vkGetDynamicRenderingTilePropertiesQCOM,
		vkGetPhysicalDeviceOpticalFlowImageFormatsNV,
		vkCreateOpticalFlowSessionNV,
		vkDestroyOpticalFlowSessionNV,
		vkBindOpticalFlowSessionImageNV,
		vkCmdOpticalFlowExecuteNV
	} }
	true
}

